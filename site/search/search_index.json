{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the NetBox Labs Documentation Site","text":"<p>The home of documentation for NetBox Cloud, Enterprise, Integrations, SDKs and Extensions.</p> <p></p>"},{"location":"maintenance/","title":"Weekly NetBox Labs Platform Maintenance Window Notice","text":"<p>There are weekly maintenance windows for the NetBox Cloud Platform on Tuesdays and Thursdays between the hours of 3:00 - 5:00am EDT / 12:00 - 2:00am PDT / 07:00 - 09:00 UTC. </p> <p>These windows are used for routine maintenance on the infrastructure supporting the NetBox Labs Console, NetBox Cloud instances, and other cloud products and services offered by NetBox Labs. This includes applying necessary security patches and required upgrades to cloud infrastructure, and/or making other underlying infrastructure changes to increase reliability, security and performance.</p> <p>Not every maintenance window will be used, and when it is used we will always try to complete the maintenance with no disruption to your service. In the case that downtime is unavoidable, you can expect the downtime to be limited to no more than a few minutes. If it is ever necessary to perform maintenance that could result in more extended downtime, we will provide ample notice and create a separate one-time maintenance window on status.netboxlabs.com. Note that the routine Tuesday/Thursday maintenance windows will not be reflected on the status page.</p> <p>If you have any automation jobs running during these maintenance windows, we recommend that you ensure that they include business logic to properly handle failed requests, and/or shift them to run outside the maintenance windows.</p> <p>Please don\u2019t hesitate to reach out to the NetBox Labs Support Team if you have any questions about this or anything else regarding NetBox Cloud. We are always happy to jump on a call or chat over email to answer any of your questions.</p>"},{"location":"product_feature_lifecycle/","title":"NetBox Labs Product and Feature Lifecycle","text":"<p>NetBox Labs products and features can go through multiple release stages before becoming generally available. These stages in the release life cycle can present varying degrees of stability and support. The following are the NetBox Labs release stages:</p> <ul> <li>Experimental</li> <li>Private Preview</li> <li>Public Preview</li> <li>General Availability (GA)</li> </ul>"},{"location":"product_feature_lifecycle/#quick-reference","title":"Quick Reference","text":"Experimental Private Preview Public Preview General Availability (GA) Audience Internal Invited customers Early adopters and users who request access Available to all customers at the appropriate tier Risk High (unknown) risk Medium-high risk Low-medium risk Low (known) risk Support Not supported Limited support through product and engineering Support limited to enablement and configuration Fully supported Documentation Code comments Unofficial; communicated with participants Limited; publicly available Publicly available"},{"location":"product_feature_lifecycle/#full-definitions","title":"Full Definitions","text":""},{"location":"product_feature_lifecycle/#experimental","title":"Experimental","text":"<p>This stage is for internal testing within the company. Products or features under this category are in their initial development phases, with high risks associated due to unknown variables. They are not supported and documentation is typically limited to code comments, aiming to gather preliminary insights and feedback internally.</p>"},{"location":"product_feature_lifecycle/#private-preview","title":"Private Preview","text":"<p>At this stage, products or features are shared with a select group of invited customers. This allows for more focused feedback and testing under real-world conditions, albeit with a medium-high risk. Support is limited and direct through product and engineering teams, with documentation being unofficial and primarily communicated directly with the participants.</p>"},{"location":"product_feature_lifecycle/#public-preview","title":"Public Preview","text":"<p>During the Public Preview, products or features are made available to early adopters and users who specifically request access. This phase aims to broaden the feedback loop and iron out any remaining issues, presenting a low to medium risk. Support is available but generally limited to enablement and configuration advice, with documentation becoming more accessible but still considered limited.</p>"},{"location":"product_feature_lifecycle/#general-availability","title":"General Availability","text":"<p>Once a product or feature reaches General Availability, it is available to all customers at the appropriate tier, marking its full release. The risk associated with using these products or features is low, as they are considered stable and reliable. Full support is provided at this stage, and documentation is comprehensive and publicly available.</p> <p>Please don\u2019t hesitate to contact us if you have any questions about this or you would like to discuss getting access to Private Preview or Public Preview products or features.  </p>"},{"location":"Administration%20Console/azure-ad-sso-setup/","title":"Microsoft Azure AD Setup","text":"<p>This guide explains how to configure single sign-on (SSO) support for NetBox Cloud using Microsoft Azure Active Directory (AD) as an authentication backend.</p>"},{"location":"Administration%20Console/azure-ad-sso-setup/#azure-ad-configuration","title":"Azure AD Configuration","text":"<ol> <li> <p>Create a test user (optional) Create a new user in AD to be used for testing. You can skip this step if you already have a suitable account created.</p> </li> <li> <p>Create an app registration Under the Azure Active Directory dashboard, navigate to Add &gt; App registration.</p> <p></p> <p>Enter a name for the registration (e.g. \"NetBox Cloud\") and ensure that the \"single tenant\" option is selected.</p> <p>Under \"Redirect URI\", select \"Web\" for the platform and enter the path to your NetBox Cloud installation, ending with /oauth/complete/azuread-oauth2/. </p> <p>Eg. https://{your-domain}.cloud.netboxapp.com/oauth/complete/azuread-oauth2/</p> <p></p> <p>Once finished, make note of the application (client) ID; this will be used when configuring NetBox Cloud.</p> <p></p> <p>Multitenant authentication</p> <p>NetBox also supports multitenant authentication via Azure AD, however it requires a different backend and an additional configuration parameter. Please see the <code>python-social-auth</code> documentation for details concerning multitenant authentication.</p> </li> <li> <p>Create a secret</p> <p>When viewing the newly-created app registration, click the \"Add a certificate or secret\" link under \"Client credentials\". Under the \"Client secrets\" tab, click the \"New client secret\" button.</p> <p></p> <p>You can optionally specify a description and select a lifetime for the secret.</p> <p></p> <p>Once finished, make note of the secret value (not the secret ID); this will be used when configuring NetBox Cloud.</p> <p></p> </li> </ol>"},{"location":"Administration%20Console/azure-ad-sso-setup/#netbox-cloud-configuration","title":"NetBox Cloud Configuration","text":"<p>Securely share the following configuration parameters with NetBox Labs Support, substituting your own values:</p> <p>REMOTE_AUTH_BACKEND = 'social_core.backends.azuread.AzureADOAuth2' SOCIAL_AUTH_AZUREAD_OAUTH2_KEY = '{APPLICATION_ID}' SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET = '{SECRET_VALUE}'</p> <p>The support team will add these parameters to your NetBox Cloud instance and confirm when this is ready for testing.</p>"},{"location":"Administration%20Console/azure-ad-sso-setup/#testing","title":"Testing","text":"<p>Log out of NetBox Cloud if already authenticated, and click the \"Log In\" button at top right. You should see the normal login form as well as an option to authenticate using Azure AD. Click that link.</p> <p></p> <p>You should be redirected to Microsoft's authentication portal. Enter the username/email and password of your account to continue. You may also be prompted to grant this application access to your account.</p> <p></p> <p>If successful, you will be redirected back to the NetBox Cloud UI, and will be logged in as the AD user. You can verify this by navigating to your profile (using the button at top right).</p> <p>This user account has been replicated locally to NetBox Cloud, and can now be assigned groups and permissions within the NetBox Cloud admin UI.</p>"},{"location":"Administration%20Console/azure-ad-sso-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"Administration%20Console/azure-ad-sso-setup/#redirect-uri-does-not-match","title":"Redirect URI does not Match","text":"<p>Azure requires that the authenticating client request a redirect URI that matches what you've configured for the app in step two. This URI must begin with https:// </p>"},{"location":"Administration%20Console/azure-ad-sso-setup/#not-logged-in-after-authenticating","title":"Not Logged in After Authenticating","text":"<p>If you are redirected to the NetBox Cloud UI after authenticating successfully, but are not logged in, double-check the configured backend and app registration. The instructions in this guide pertain only to the <code>azuread.AzureADOAuth2</code> backend using a single-tenant app registration.</p>"},{"location":"Administration%20Console/azure-group-mapping/","title":"Group Mapping For Azure AD Single Sign-On (SSO)","text":"<p>Upgrade your Single Sign-On experience with Group Mapping for Azure SSO \u2013 a smarter, more secure way to manage user access. The Group Mapping feature for Azure Single Sign-On, streamlines the synchronization of group memberships from Azure Active Directory to groups in NetBox Cloud, allowing you to align your user access efficiently and accurately. </p> <p>Info</p> <p>This feature is only available in Pro/Enterprise tiers.</p> <p>Changes in Azure Active Directory groups are reflected in NetBox Cloud, ensuring up-to-date access management and enhanced security. You can tailor the group mapping to your organizational needs while maintaining strict security and compliance standards.</p> <p>If you are already securing access to NetBox Cloud using Azure AD for SSO, and would like use the Group Mapping feature it's easy to get set up. Simply create your groups and permissions in NetBox Cloud, then set up your groups in Azure AD and reach out to the support team at NetBox Labs and we will take care of the group mappings for you to suit your requirements. </p> <p>Note</p> <p>We\u2019ve made some important updates to the Azure AD user group sync feature that may affect group memberships and permissions of Azure AD SSO users accessing NetBox Cloud. To support enterprise Azure AD environments, we\u2019ve added pagination to retrieve large lists (100+) of membership groups for users. To support NetBox group assignments from Azure nested groups, we\u2019ve changed the Azure API endpoint used for group retrieval from <code>memberOf</code> to <code>transitiveMemberOf</code>. </p> <p>This means that users will now be made members of NetBox user groups based on the configured group mappings for both direct membership Azure groups and transitive Azure groups (parent groups of direct membership groups). Under specific conditions, users may gain additional group memberships and permissions. We strongly advise you review your NetBox Cloud and Azure AD user, group and permission configurations to ensure they align to your security requirements.</p> <p>Watch the video below for a step-by-step example of how the Group Mapping feature works, or read on for an explanation. </p>"},{"location":"Administration%20Console/azure-group-mapping/#how-it-works","title":"How it Works","text":"<p>Group mappings are based on the Object ID of the group in Azure AD. For example: </p> <p></p> <p>The Object ID is mapped to a group in NetBox Cloud, and that group could have permissions assigned to it. For example, this group called CircuitManager in NetBox Cloud has permissions assigned to it that allows members of the group to manage all of the Circuit and  Provider object types: </p> <p></p> <p></p> <p>Optionally, members of the Azure AD groups can also be members of the NetBox built-in groups Staff which allows access to the NetBox admin interface, and Superuser which has all permissions without explicitly assigning them.</p> <p>The NetBox Labs support team will map your Azure AD Group Object ID's to your NetBox Cloud groups, for example: </p> Azure AD Group Object ID NetBox Cloud Group Staff Super User 1a36bed9-3bdc-4970-ab66-faf9704e0af4 Circuit Manager Yes No"},{"location":"Administration%20Console/azure-group-mapping/#how-do-i-get-it-set-up","title":"How Do I Get it Set Up?","text":"<p>Simply provide us with your requirements in terms of object IDs and NetBox groups and we will take care of the rest. </p> <p>If you have any questions about Group Mapping for Azure AD Single Sign-On (SSO), please raise a support ticket by emailing the NetBox Labs Support Team.</p>"},{"location":"Administration%20Console/console-access-from-ui/","title":"Accessing the Console from NetBox Cloud","text":"<p>From within the NetBox Cloud Web Interface, you can easily switch to the NetBox Labs Console. Simply follow the steps outlined below: </p> <ol> <li> <p>In the left hand main menu, click to expand the NetBox Labs plugin menu, and then click on Open Console:</p> <p></p> </li> <li> <p>You will now be taken to the NetBox Labs Console login page:</p> <p></p> <p>Note If you don't already have access to the console, you can request this by clicking on Request Console Access in the NetBox Labs plugin menu from the main NetBox Cloud web interface, and then clicking the link to email the NetBox Labs Support Team to request access. </p> <p></p> <p>If you encounter any issues when accessing the NetBox Labs Console, raise a support ticket by emailing the NetBox Labs Support Team</p> </li> </ol>"},{"location":"Administration%20Console/console-access/","title":"NetBox Cloud","text":""},{"location":"Administration%20Console/console-access/#setting-up-console-access","title":"Setting up Console Access","text":"<p>Request access to the NetBox Labs Console by emailing the NetBox Labs Support Team. </p> <p>The NetBox Cloud team will set up your account with your email address as the username, and you will use this to access the NetBox Labs Console. To complete the set up of your account, follow these steps: </p> <ol> <li> <p>You will receive an email advising you of your username, along with a temporary password and a link to the console URL. Click the link to login</p> </li> <li> <p>Enter the username (your email address) and the temporary password as per the email, and click \u2018Sign in\u2019: </p> <p></p> </li> <li> <p>You will then be prompted to change your password: </p> <p></p> </li> <li> <p>The set up is now complete and you are logged into the NetBox Labs Console. You will see (and be able to administer) all the NetBox Cloud instances running under your Organization.</p> <p></p> </li> <li> <p>To retrieve the credentials for the admin user of a NetBox Cloud instance, either click to reveal or copy them from the Credentials section: </p> <p></p> </li> <li> <p>Then click the on either of the two links to open the URL of the instance in a new browser window:</p> <p></p> </li> <li> <p>Lastly, login to the NetBox Cloud UI with the username and password you have copied from step 5: </p> <p></p> </li> </ol>"},{"location":"Administration%20Console/console-overview/","title":"NetBox Cloud: Administrative Console Overview","text":""},{"location":"Administration%20Console/console-overview/#console-access","title":"Console Access","text":"<p>To access your NetBox Cloud Administrative Console, follow these steps: </p> <ul> <li>Login to the console</li> <li> <p>Click on the arrow next your Organization Name and then click on the Namespace ID</p> <p></p> </li> <li> <p>Next scroll down and click on the NetBox panel, and then click on the NetBox ID link to launch the Administrative console</p> <p></p> </li> </ul>"},{"location":"Administration%20Console/console-overview/#summary-view","title":"Summary View","text":"<p>This compressed full page screenshot breaks the full Administrative Console down into similar sections.  Each section is designed to give you greater insight to your NetBox instance.</p> <p></p>"},{"location":"Administration%20Console/console-overview/#section-breakdown","title":"Section Breakdown","text":""},{"location":"Administration%20Console/console-overview/#1-information-panel","title":"1. Information Panel","text":"<p>The Information Panel provides a view of basic information relating to your NetBox Cloud instance.  Here you will find the name of your NetBox Cloud instance within your Organization's Namespace, along with the AWS Region and the NetBox version. You also have a link to the instance raw URL, plus a refresh button for the instance data. </p>"},{"location":"Administration%20Console/console-overview/#2-netbox-deployment","title":"2. NetBox Deployment","text":"<p>The NetBox Deployment panel lists various service and configuration status points.  Included will be the current version, and version upgrade controls, the number of instance replicas, and resource allocations. The instance image and namespace are also listed here.  </p> <ul> <li>The left circle icon (stop button) will stop the running NetBox Cloud instance.</li> <li>The center circle icon (play button) will start the NetBox Cloud instance.</li> <li>The right refresh icon will refresh the data in the panel. </li> <li>The Version number with the smaller font displays the current NetBox version</li> <li>The Version drop down lists versions of NetBox that can be changed to.</li> <li>The cloud icon will illuminate if you select a different version of NetBox.</li> <li>The cloud icon will change NetBox to the selected version.</li> </ul> <p>The Secrets section provides access to the current secret credentials for the instance API Token, local \u201cadmin\u201d user account and Secret Key.  When the Administrative Console initially loads these values will be hidden.  </p> <ul> <li>Clicking the open eye will reveal the secret details</li> <li>Clicking the closed eye will conceal the secret details</li> <li>Clicking the copy icon will copy the secret to your clipboard</li> </ul>"},{"location":"Administration%20Console/console-overview/#3-ingress","title":"3. Ingress","text":"<p>The Ingress pannel gives the Name, Domain and DNS Name information for the NetBox Cloud instance, as well as the number of Ingress Pods and the Load Balancer status.</p>"},{"location":"Administration%20Console/console-overview/#4-storage","title":"4. Storage","text":"<p>The Storage Panel contains information on the storage bucket, user, and access key ID. Clicking the open eye will reveal the Access Key secret details.</p>"},{"location":"Administration%20Console/console-overview/#5-postgres","title":"5. Postgres","text":"<p>The Postgres Database panel (left) gives the current status of the database, along with details of the host, username and database name for the instance. Clicking the open eye will reveal the Postrges Database secret details.</p> <p>The Postgres panel (right) gives the number of database instances, their status, instance names, version, Aurora capacity unit consumption, current configured backup retention period, and security group IDs. Clicking the open eye will reveal the Postrges secret details.</p>"},{"location":"Administration%20Console/console-overview/#6-redis","title":"6. Redis","text":"<p>The Redis Database panel (left) gives the name, status, host, user, and ID of the Main and Cache Redis databases. </p> <p>The Redis panel (right) gives the name, status, resource, image and version information for the Redis instance. Clicking the open eye will reveal the Redis secret details.</p>"},{"location":"Administration%20Console/console-overview/#7-advanced-configuration","title":"7. Advanced Configuration","text":""},{"location":"Administration%20Console/console-overview/#7b-ingress-allow-list","title":"7b. Ingress Allow List","text":"<p>If the Ingress Allow List is configured, then inbound Web/API traffic will only be permitted to either IPv4 or IPv6 CIDR ranges listed on the Ingress Allow List. </p>"},{"location":"Administration%20Console/console-overview/#7c-netbox-configmap-env","title":"7c. NetBox Configmap ENV","text":"<p>This NetBox Configmap ENV allows you to view or manage the underlying variables for the instance</p>"},{"location":"Administration%20Console/console-overview/#7d-netbox-startup-configmaps","title":"7d. NetBox Startup Configmaps","text":"<p>The NetBox Startup Configmaps (redacted screenshot) allows you to view or manage the underlying configmaps for the instance.</p>"},{"location":"Administration%20Console/console-overview/#8-pod-infologs","title":"8. Pod Info/Logs","text":"<p>The Pods screen allows you to view the underlying composition of the instance.  This includes versions, operational status, vCPU and Memory information.</p> <ul> <li>The refresh button will give you the up-to-date information for all pods.</li> <li>The multi line icon will load the current log for the selected object in each pod.</li> </ul>"},{"location":"Administration%20Console/free-plan-features/","title":"NetBox Cloud Free Plan Features","text":"<p>The NetBox Cloud Free Plan is perfect for small networks, lab environments, and targeted use cases. It includes up to 100 devices, 500 IP addresses, 10k API requests/month, and 2 operational branches. </p>"},{"location":"Administration%20Console/free-plan-features/#free-plan-features-in-detail","title":"Free Plan Features in Detail","text":"<p>The following features are enabled in the NetBox Cloud Free Plan: </p> <ul> <li>Devices: 100</li> <li>IP Addresses: 500</li> <li>API Requests: 10,000 per month</li> <li>File Upload Size: Maximum 5MB </li> <li>Backup Frequency: Once per day</li> <li>Branching Enabled: Maximum of 2 operational branches</li> <li>Prefix List Entries: Maximum of 10 entries</li> <li>Upgrades: Automatic</li> </ul> <p>If you need more, or you need features like advanced SSO, Plugins, Webhooks, Custom Scripts, Custom Hostnames, the ability to work with backups, commercial support, and more, check out our paid plans.</p>"},{"location":"Administration%20Console/managing-hostnames/","title":"Managing NetBox Cloud Hostnames","text":"<p>Info</p> <p>Current functionality of the Hostnames Manager is limited to viewing Hostnames along with their associated NetBox Cloud instances and categories. Enhanced functionality to manage Hostnames is coming soon in a future release.</p> <ol> <li> <p>From within the NetBox Labs Console click on Settings in the left-hand main menu to manage the settings for your Organization: </p> <p></p> </li> <li> <p>Click to expand Hostnames Manager</p> <p></p> </li> <li> <p>From here you can view the Hostnames configured for your organization. Under NetBox you can see which NetBox instance is associated with a given hostname, and what Category the hostname is: </p> <p></p> </li> </ol>"},{"location":"Administration%20Console/managing-hostnames/#hostname-categories","title":"Hostname Categories:","text":"<p>Hostname categories are defined as follows: </p> Category Definition <code>platform random</code> A randomly generated hostname created when a new NetBox Cloud instance is created, usually as a trial. <code>platform custom</code> A custom hostname on the NetBox cloud platform eg. <code>abcwidgets.cloud.netboxapp.com</code> <code>org custom</code> A custom hostname defined by your organization eg. <code>netbox-prod.abcwidgets.com</code>"},{"location":"Administration%20Console/managing-hostnames/#organization-custom-hostnames","title":"Organization Custom Hostnames","text":"<p>Organization Custom Hostnames are available in NetBox Cloud Professional and Enterprise plans, and if you would like to set one up please raise a support ticket by emailing the NetBox Labs Support Team. </p> <p>Note</p> <p>Organization Custom Hostnames are not available for Starter plans. For more information about pricing plans click here </p>"},{"location":"Administration%20Console/netbox-cloud-plugins/","title":"NetBox Cloud Plugins","text":"<p>From within the NetBox Labs Console, you can easily view installed NetBox Cloud Plugins, along with their Scope and Version number. Simply follow these steps: </p> <ol> <li> <p>From within the NetBox Labs Console click on the three dots in the top right corner of the NetBox Instance panel, and click manage </p> <p></p> </li> <li> <p>Click on Plugins to view the installed Plugins:</p> <p></p> </li> <li> <p>View the list of installed Plugins, their scopes and version numbers: </p> <p></p> <p>Info</p> <p>There are two types of plugin scope - public for any plugins that are publicly available and organization for custom plugins.</p> </li> </ol>"},{"location":"Administration%20Console/okta-group-mapping/","title":"Group Mapping For Okta Single Sign-On (SSO)","text":"<p>Upgrade your Single Sign-On experience with Group Mapping for Okta SSO \u2013 a smarter, more secure way to manage user access. The Group Mapping feature for Okta Single Sign-On, streamlines the synchronization of group memberships from Okta to groups in NetBox Cloud, allowing you to align your user access efficiently and accurately. </p> <p>Changes in Okta groups are reflected in NetBox Cloud, ensuring up-to-date access management and enhanced security. You can tailor the group mapping to your organizational needs while maintaining strict security and compliance standards.</p> <p>If you are already securing access to NetBox Cloud using Okta for SSO, and would like use the Group Mapping feature it's easy to get set up. Simply create your groups and permissions in NetBox Cloud, then set up your groups in Okta and reach out to the support team at NetBox Labs and we will take care of the group mappings for you to suit your requirements. </p> <p>\u2139\ufe0f Note</p> <p>This feature is only available in Pro/Enterprise tiers.</p>"},{"location":"Administration%20Console/okta-group-mapping/#how-it-works","title":"How it Works","text":"<p>Group mappings are based on the name of the group in Okta, which is mapped to a group in NetBox Cloud, and that group could have permissions assigned to it. For example, this group called CircuitManager in NetBox Cloud has permissions assigned to it that allows members of the group to manage all of the Circuit and  Provider object types: </p> <p></p> <p></p> <p>Optionally, members of the Okta groups can also be members of the NetBox built-in groups Staff which allows access to the NetBox admin interface, and Superuser which has all permissions without explicitly assigning them.</p> <p>The NetBox Labs support team will map your Okta group names to your NetBox Cloud groups, for example: </p> Okta Group Name NetBox Cloud Group Staff Super User NetBox-Circuit-Mgrs Circuit Manager Yes No"},{"location":"Administration%20Console/okta-group-mapping/#how-do-i-get-it-set-up","title":"How Do I Get it Set Up?","text":"<p>Simply provide us with your requirements in terms of Okta group names and NetBox groups and we will take care of the rest. </p> <p>If you have any questions about Group Mapping for Okta Sign-On (SSO), please raise a support ticket by emailing the NetBox Labs Support Team.</p>"},{"location":"Administration%20Console/okta-sso-setup/","title":"Okta SSO Setup","text":"<p>This guide explains how to configure single sign-on (SSO) support for NetBox Cloud using Okta as an authentication backend.</p>"},{"location":"Administration%20Console/okta-sso-setup/#okta-configuration","title":"Okta Configuration","text":"<p>Note that Okta offers free developer accounts</p> <ol> <li> <p>Create a test user (optional) Create a new user in the Okta admin portal to be used for testing. You can skip this step if you already have a suitable account created.</p> </li> <li> <p>Create an app registration Within the Okta administration dashboard, navigate to Applications &gt; Applications, and click the \"Create App Integration\" button. Select \"OIDC\" as the sign-in method, and \"Web application\" for the application type.</p> <p></p> <p>On the next page, give the app integration a name (e.g. \"NetBox Cloud\") and specify the sign-in and sign-out URIs. These URIs should follow the formats below:</p> <ul> <li>Sign-in URI:   https://{your-domain}.cloud.netboxapp.com/oauth/complete/okta-openidconnect/</li> <li>Sign-out URI:  https://{your-domain}.cloud.netboxapp.com/oauth/disconnect/okta-openidconnect/</li> </ul> <p></p> <p>Under \"Assignments,\" select the controlled access setting most appropriate for your organization. Click \"Save\" to complete the creation.</p> <p>Once finished, note the following parameters. These will be used to configured NetBox Cloud.</p> <ul> <li>Client ID</li> <li>Client secret</li> <li>Okta domain</li> </ul> <p></p> </li> </ol>"},{"location":"Administration%20Console/okta-sso-setup/#netbox-cloud-configuration","title":"NetBox Cloud Configuration","text":"<p>Securely share the following configuration parameters with NetBox Labs Support, substituting your own values:</p> <p>REMOTE_AUTH_BACKEND = 'social_core.backends.okta_openidconnect.OktaOpenIdConnect' SOCIAL_AUTH_OKTA_OPENIDCONNECT_KEY = '{Client ID}' SOCIAL_AUTH_OKTA_OPENIDCONNECT_SECRET = '{Client secret}' SOCIAL_AUTH_OKTA_OPENIDCONNECT_API_URL = 'https://{Okta domain}/oauth2/'</p> <p>The support team will add these parameters to your NetBox Cloud instance and confirm when this is ready for testing.</p>"},{"location":"Administration%20Console/okta-sso-setup/#testing","title":"Testing","text":"<p>Log out of NetBox Cloud if already authenticated, and click the \"Log In\" button at top right. You should see the normal login form as well as an option to authenticate using Okta. Click that link.</p> <p></p> <p>You should be redirected to Okta's authentication portal. Enter the username/email and password of your test account to continue. You may also be prompted to grant this application access to your account.</p> <p></p> <p>If successful, you will be redirected back to the NetBox Cloud UI, and will be logged in as the Okta user. You can verify this by navigating to your profile (using the button at top right).</p> <p>This user account has been replicated locally to NetBox Cloud, and can now be assigned groups and permissions within the NetBox Cloud admin UI.</p>"},{"location":"Administration%20Console/prefix-lists/","title":"Prefix Lists","text":"<p>You can secure access to your NetBox Cloud instance by adding IPv4 and IPv6 addresses and ranges to Prefix Lists, which can then be applied to NetBox instances to control which source IPs your instances will accept connections from. </p> <p>The following features are available in the NetBox Labs Admin Console when working with prefix lists: </p> <ul> <li>Create, Edit and Delete prefix lists</li> <li>Synchronize prefix lists from a NetBox instance using tags</li> </ul> <p>There is also large list support (~15K prefixes) and separate prefixes can be applied to the NetBox Cloud UI, API and GraphQL interfaces. </p> <p>Note</p> <p>When you have built your prefix lists in the Admin Console, raise a support ticket by emailing the NetBox Labs Support Team and we will apply them to your NetBox Cloud instances. </p> <p>Watch this quick video or follow the steps outlined below to start managing your prefix lists:</p>"},{"location":"Administration%20Console/prefix-lists/#create-a-prefix-list-not-synchronized-with-a-netbox","title":"Create a Prefix List (not synchronized with a NetBox)","text":"<ol> <li> <p>From within the Admin Console, navigate to Settings in the left-hand menu</p> <p></p> </li> <li> <p>Scroll down and click to expand the Prefix List section, and then click on Create Prefix List on the right hand side to start the wizard: </p> <p></p> </li> <li> <p>Give the prefix list a name and then click CREATE PREFIX LIST:</p> <p></p> </li> <li> <p>Enter the first prefix and give it a description. If you wish to add additional prefixes then you can also do that here by clicking + ADD ADDITIONAL PREFIX, then when you are happy click CREATE PREFIXES.</p> <p>Note - if you wish to add the IP address that you are currently using then click Use Current IP Address and this will add it to the prefix list: </p> <p></p> </li> <li> <p>You can then view the prefix list from within Settings &gt; Prefix List: </p> <p></p> </li> </ol>"},{"location":"Administration%20Console/prefix-lists/#create-a-prefix-list-synchronized-with-a-netbox","title":"Create a Prefix List (synchronized with a NetBox)","text":"<ol> <li> <p>From within the Admin Console, navigate to Settings in the left-hand menu</p> <p></p> </li> <li> <p>Scroll down and click to expand the Prefix List section, and then click on Create Prefix List on the right hand side to start the wizard: </p> <p></p> </li> <li> <p>Give the prefix list a name and then select the Yes radio button to sync the prefix list from a NetBox. Then select the NetBox instance you wish to sync from, specify the NetBox Tag that you wish to use, and then click CREATE PREFIX LIST:    </p> <p></p> </li> <li> <p>Switch to your NetBox instance, and go to Customization &gt; Tags and create the required tag(s) to be applied to any prefixes that are to be synchronized to the Prefix List: </p> <p></p> </li> <li> <p>Under IPAM &gt; Prefixes add the prefixes, give them a description and tag them with the appropriate tag: </p> <p></p> </li> <li> <p>You can then view the prefixes in NetBox under IPAM &gt; Prefixes (Tip - filter on the tag): </p> <p></p> </li> <li> <p>Switch back to the Admin Console to view the prefix list from within Settings &gt; Prefix List. Note - it can take a few minutes for the prefix list to be fully synchronized from NetBox. </p> <p></p> </li> </ol>"},{"location":"Administration%20Console/prefix-lists/#edit-a-prefix-list","title":"Edit a Prefix List","text":"<p>Note - this only works for prefix lists that are not synchronized with a NetBox. To edit NetBox synchronized prefix lists you should make the edits within NetBox. </p> <ol> <li> <p>From within the Admin Console, navigate to Settings in the left-hand menu, and then scroll down and click to expand the Prefix List section. Then click on the name of the prefix list you wish to edit: </p> <p></p> </li> <li> <p>To add more prefixes to the list, click on Create Prefix and then follow the wizard again to add more prefixes. </p> </li> <li> <p>To edit a prefix, click EDIT and then make your required changes and then click EDIT PREFIX to save your changes: </p> <p></p> </li> <li> <p>To delete a prefix, click DELETE and then if you are sure you wish to delete the prefix, click DELETE PREFIX when prompted: </p> <p></p> </li> </ol>"},{"location":"Administration%20Console/prefix-lists/#delete-a-prefix-list","title":"Delete a Prefix List","text":"<p>Note - in order for a prefix list to be deleted it must first be detached from any NetBox instances that it is securing. You will need to contact support and request this before you can delete it. </p> <ol> <li> <p>From within the Admin Console, navigate to Settings in the left-hand menu, and then scroll down and click to expand the Prefix List section. Then click on the name of the prefix list you wish to delete, and click DELETE PREFIX LIST:</p> <p></p> </li> <li> <p>If you are sure you wish to delete the prefix list then click DELETE PREFIX LIST when you are prompted to confirm the deletion: </p> <p></p> </li> </ol> <p>If you encounter any issues while working with the IP Allow List raise a support ticket by emailing the NetBox Labs Support Team</p>"},{"location":"Administration%20Console/public-ip-addressing/","title":"NetBox Cloud Public IP Addresses","text":""},{"location":"Administration%20Console/public-ip-addressing/#traffic-originating-from-netbox-cloud","title":"Traffic Originating From NetBox Cloud","text":"<p>The Public IP addresses that outbound traffic from your NetBox Cloud instance (eg. webhooks) will be seen to be originating from are listed below. This will vary depending on the region that your instance is located in.   </p> <p>You can whitelist these IP ranges so that inbound access from your NetBox Cloud instance(s) is restricted to just these addresses: </p>"},{"location":"Administration%20Console/public-ip-addressing/#us-east-1","title":"US-EAST-1","text":"<p>IPv4 <pre><code>3.225.69.195\n3.233.255.24\n34.231.51.53\n</code></pre></p> <p>IPv6 <pre><code>2600:1f18:462e:4c00::/56\n</code></pre></p>"},{"location":"Administration%20Console/public-ip-addressing/#eu-west-1","title":"EU-WEST-1","text":"<p>IPv4 <pre><code>108.128.2.233\n3.252.161.89\n46.51.185.39\n</code></pre></p> <p>IPv6</p> <pre><code>2a05:d018:1128:7a00::/56\n</code></pre>"},{"location":"Administration%20Console/public-ip-addressing/#eu-west-2","title":"EU-WEST-2","text":"<p>IPv4 <pre><code>13.42.148.73\n18.132.136.73\n18.132.221.240\n</code></pre></p> <p>IPv6 <pre><code>2a05:d01c:11e:a800::/56\n</code></pre></p>"},{"location":"Administration%20Console/public-ip-addressing/#dedicated-public-ip-addresses-for-accessing-netbox-cloud-instances","title":"Dedicated Public IP Addresses for Accessing NetBox Cloud Instances","text":"<p>For NetBox Cloud Enterprise customers we offer dedicated IP addresses for accessing the UI and API. Please speak to your account representative for more information.</p> <p> Please don\u2019t hesitate to reach out to the NetBox Labs Support Team if you have any questions about this or anything else regarding NetBox Cloud.</p>"},{"location":"Administration%20Console/retrieving-nbc-credentials/","title":"Retrieving the NetBox Cloud Admin Credentials","text":"<p>To log into a NetBox Cloud instance with the admin username and password, you first need to login to the NetBox Labs Console and then retrieve the credentials. Follow these steps: </p> <ol> <li> <p>Login to NetBox Labs Console and you will see (and be able to administer) all the NetBox Cloud instances running under your Organization.</p> <p></p> </li> <li> <p>To retrieve the credentials for the admin user of a NetBox Cloud instance, either click to reveal or copy them from the Credentials section: </p> <p></p> </li> <li> <p>Then click the on either of the two links to open the URL of the instance in a new browser window:</p> <p></p> </li> <li> <p>Lastly, login to the NetBox Cloud UI with the username and password you have copied from step 2: </p> <p></p> </li> </ol>"},{"location":"Administration%20Console/set_up_2fa/","title":"Setting up Two-Factor Authentication for the Admin Console","text":"<p>From within the NetBox Labs Console you can easily enable and disable two-factor authentication (2FA) on a per-user basis. </p> <p>Watch this quick video or follow the steps outlined below: </p>"},{"location":"Administration%20Console/set_up_2fa/#enable-two-factor-authentication","title":"Enable Two-Factor Authentication","text":"<ol> <li> <p>Login to the NetBox Labs Console and then click on the down arrow (top-right) and select Setup Two-Factor.</p> <p></p> </li> <li> <p>Follow the on-screen instructions and scan the QR code with your Authenticator App of choice (eg. Google Authenticator):</p> <p></p> </li> <li> <p>Enter the code from your authenticator app and click confirm:</p> <p></p> </li> <li> <p>Click on the X in the top-right corner to close the dialog box: </p> <p></p> </li> <li> <p>Click on the down arrow (top-right) and select Sign Out:</p> <p> </p> </li> <li> <p>Log back into the console with your username and password and then when prompted, enter the TOTP code generated by your authenticator app, and click Confirm</p> <p> </p> </li> </ol>"},{"location":"Administration%20Console/set_up_2fa/#disable-two-factor-authentication","title":"Disable Two-Factor Authentication","text":"<ol> <li> <p>Login to the NetBox Labs Console and then click on the down arrow (top-right) and select Setup Two-Factor.</p> <p></p> </li> <li> <p>Enter the TOTP Code from your authenticator app and click Disable.</p> <p></p> </li> <li> <p>In the dialog box, note that Two-factor authentication is now disabled and close the dialog box.  </p> <p></p> </li> </ol> <p>If you encounter any issues while working with two-factor authentication, please raise a support ticket by emailing the NetBox Labs Support Team</p>"},{"location":"Administration%20Console/upgrading-nbc/","title":"Upgrading NetBox Cloud","text":"<p>To safely and easily upgrade your NetBox Cloud instance without worrying about any Plugin compatibility issues, follow the steps outlined below or watch the video instructions: </p> <ol> <li> <p>In the NetBox Labs Console, click on the three dots in the top right corner of the instance you wish to upgrade and click Manage. Note the current NetBox version in this example is 3.5.1.  </p> <p></p> </li> <li> <p>Then click on the down arrow next to Plugins and note any installed plugins and their versions: </p> <p></p> </li> <li> <p>Next, click on the down arrow next to Version Upgrade:</p> <p></p> </li> <li> <p>The Safe Upgrade tool will present you with the potential and recommended versions you can upgrade to. You will see the version number, the status, and the whether or not installed plugins are compatible with the target NetBox version, plus a link to the release notes for that version.  </p> <p></p> <p>Note that in this case the NetBox BGP and NetBox Topology Views plugins are at a version that is compatible with NetBox version 3.5.9. All versions higher than this (up to 3.6.6) will require an upgrade to the plugins also, but don't worry the safe upgrade tool will handle all of that for you. </p> <p>Also note that we could upgrade to any of the other potential options, but that the Safe Upgrade tool is recommending an upgrade to version 3.6.6, and if we select this option, both the plugins will be automatically upgraded to compatible versions as part of the upgrade process.</p> <p>Note too that if a plugin is not compatible with a certain NetBox version then you will see a warning like this: </p> <p></p> <p>In this case you would not be able to upgrade to this version, and the tool will not let you select it. In these cases it can mean that the plugin developer has not yet released an updated version of the plugin that is compatible with that particular version of NetBox. </p> </li> <li> <p>Next, select the version you wish to upgrade to, and in this example we will select the recommended version 3.6.6, and then click on UPGRADE VERSION:</p> <p></p> </li> <li> <p>Click on Continue if you are sure you want to go ahead with the upgrade: </p> <p></p> </li> <li> <p>You will then see a dialog box confirming the upgrade is in progress: </p> <p></p> </li> <li> <p>A few seconds later you will see that your NetBox Cloud upgrade is now complete and you will see the new version number: </p> <p></p> </li> <li> <p>Finally, if you check Plugins again, you will now see the updated versions of the plugins: </p> <p></p> </li> </ol> <p>If you encounter any issues while performing the upgrades or have any questions, please raise a support ticket by emailing the NetBox Labs Support Team</p>"},{"location":"Administration%20Console/working_with_database_backups/","title":"Working with NetBox Cloud Database Backups","text":"<p>Within the NetBox Labs Console you can access the backups of your NetBox Cloud database, and are able to perform the following actions:  </p> <ul> <li>View a list of all available database backups</li> <li>Take an 'On Demand' backup at any time</li> <li>Download a local copy of a specific backup file  </li> <li>Restore your NetBox Cloud instance from a database backup</li> </ul> <p>Watch this quick video or follow the steps outlined below to get started: </p>"},{"location":"Administration%20Console/working_with_database_backups/#view-a-list-of-available-database-backups","title":"View a List of Available Database Backups","text":"<ol> <li> <p>Login to the NetBox Labs Console and then click on the three dots in the top-right corner of the instance you wish to manage and click Manage:</p> <p></p> </li> <li> <p>Scroll down to the Backup and Restore panel expand it to view the list of available backups:</p> <p></p> </li> </ol>"},{"location":"Administration%20Console/working_with_database_backups/#take-an-on-demand-database-backup","title":"Take an 'On Demand' Database Backup","text":"<ol> <li> <p>From within the Backup and Restore panel click on Back Up Now, on the right-hand side: </p> <p></p> </li> <li> <p>Click CONTINUE to confirm that you want to backup of the current version of NetBox Cloud</p> <p></p> </li> <li> <p>After a short while you will see the On Demand backup you just created appear in the list of available backups: </p> <p></p> </li> </ol>"},{"location":"Administration%20Console/working_with_database_backups/#download-a-local-copy-of-a-backup-file","title":"Download a Local Copy of a Backup File","text":"<ol> <li> <p>Locate the backup file you wish to retrieve, and click on the Download icon:</p> <p></p> </li> <li> <p>The download will then be prepared: </p> <p></p> </li> <li> <p>Once the backup file has been prepared it will automatically be downloaded into the Downloads directory on your local computer's file system. Note the file is a gzip compressed archive of the SQL database file so it will end in <code>.sql.gz</code>.</p> </li> </ol>"},{"location":"Administration%20Console/working_with_database_backups/#restore-from-a-database-backup-file","title":"Restore From a Database Backup File","text":"<ol> <li> <p>Identify the database backup you wish to restore from, and click Restore:</p> <p></p> </li> <li> <p>Click CONTINUE if you are sure you wish to restore the selected backup:</p> <p></p> </li> <li> <p>The restore process will take place in the background, and depending on the size of the database should take no longer than a few minutes to complete. Once the restore has completed, you can click on See Restore History to view the list of database restores, and you will see your completed restore listed:</p> <p></p> <p></p> </li> <li> <p>Your database restore is now complete. </p> </li> </ol> <p>Info</p> <p>Once the database restore is complete your NetBox Cloud instance will restart, and you may briefly see a <code>503 - Service Unavailable</code> message when you browse to the Web interface. This is normal and will clear after a short while, after which you can log in again. </p> <p>Also, please be aware that the NetBox changelog will be empty when you first log in after a database restore.</p> <p>If you encounter any issues while working with database backups raise a support ticket by emailing the NetBox Labs Support Team</p>"},{"location":"NetBox%20Cloud/getting-started-with-nbc/","title":"Getting Started With NetBox Cloud","text":"<p>This document will help you get up and running with NetBox Cloud quickly. It highlights all the unique features provided by NetBox Cloud.</p>"},{"location":"NetBox%20Cloud/getting-started-with-nbc/#about-netbox-cloud","title":"About NetBox Cloud","text":"<p>NetBox Cloud is a managed deployment of the open source NetBox application, extended to improve user experience and maintained by NetBox Labs. NetBox Cloud provides all the power of NetBox without the burden of installation and long-term maintenance.</p>"},{"location":"NetBox%20Cloud/getting-started-with-nbc/#netbox-cloud-features","title":"NetBox Cloud Features","text":"<p>All the NetBox Cloud features within the user interface (UI) are found under the \"Cloud\" heading of the navigation menu:</p> <p> </p>"},{"location":"NetBox%20Cloud/getting-started-with-nbc/#netbox-configuration","title":"NetBox Configuration","text":"<p>NetBox supports many configuration parameters that affect how it functions. There are two areas of the UI in which these parameters can be adjusted.</p>"},{"location":"NetBox%20Cloud/getting-started-with-nbc/#administrative-configuration","title":"Administrative Configuration","text":"<p>The first area is under the administrative interface. To access this interface, you must be logged into NetBox as a user with administrator privileges. Navigate to the admin UI by expanding the user menu at top right and clicking the \"Admin\" link. Then, navigate to <code>Extras &gt; Config revisions &gt; Add</code>.</p> <p> </p> <p>This form will allow you to set various configuration parameters. Once the desired configurations have been made, you may optionally provide a comment as to why the changes were made, and click the \"Save\" button. This will create a new revision of NetBox's configuration.</p> <p>Configuration changes made via the admin UI take effect immediately. If you would like to revert your changes at any point, you can do so within the admin UI by locating the desired previous revision and clicking the \"Restore\" button to its right.</p>"},{"location":"NetBox%20Cloud/getting-started-with-nbc/#netbox-cloud-configuration","title":"NetBox Cloud Configuration","text":"<p>You may notice that some configuration parameters are not present from the configuration form in the admin UI. This is because these are not supported by NetBox as dynamic configuration parameters: They can be modified only by altering NetBox's configuration file. Such settings include: - User authentication (including SSO) - Enabling &amp; configuring plugins - Time &amp; date formatting</p> <p>NetBox Cloud exposes these configuration parameters through its own interface, which can be reached by navigating to <code>Cloud &gt; Administration &gt; Configuration</code>.</p> <p> </p> <p>Once the desired configuration parameters have been set, click the \"Save &amp; Restart\" button. Note that the application of these changes does require a restart of some NetBox Cloud services, and access to the NetBox Cloud UI and API may be interrupted briefly.</p>"},{"location":"NetBox%20Cloud/getting-started-with-nbc/#single-sign-on-sso","title":"Single Sign-On (SSO)","text":"<p>NetBox Cloud currently supports single sign-on (SSO) authentication for the following providers:</p> <ul> <li>Microsoft Azure AD</li> <li>Okta (via OpenID Connect)</li> </ul> <p>We are implementing support for additional backends as customers request them. If you have a need for a specific authentication backend, please let us know.</p> <p>To enable SSO, select the desired backend and provide the required configuration parameters under the appropriate tab. For information on configuring your specific backend service, you can consult the SSO configuration guides in the NetBox documentation, or contact NetBox Labs for assistance.</p>"},{"location":"NetBox%20Cloud/migrating-to-netbox-cloud/","title":"Migrating to NetBox Cloud","text":"<p>Migrating from an on-premises NetBox open source instance to a NetBox Labs NetBox Cloud environment is a straightforward process. Since NetBox Cloud is built using the same open source software you\u2019re already using, most imports can be completed quickly for a timely cutover. This checklist will walk you through the steps, highlighting mandatory and optional points in the process.</p>"},{"location":"NetBox%20Cloud/migrating-to-netbox-cloud/#1-record-your-current-netbox-version","title":"1 - Record your current NetBox version","text":"<p>Navigate to your NetBox portal login page to view the version of NetBox you are running. You can also find this information within the application. This helps the NetBox team understand which upgrade path is required for your data.</p>"},{"location":"NetBox%20Cloud/migrating-to-netbox-cloud/#2-export-your-existing-netbox-database","title":"2 - Export your existing NetBox database","text":"<p>Use the following command to export your existing NetBox database:</p> <pre><code>pg_dump --no-owner --no-privileges --username [netbox] --password --host [localhost] [netbox] &gt; [netbox.sql] \n</code></pre> <p>Warning Inform the NetBox Labs team if you used any additional flags for the pg_dump command, or if you exported the data to a different format.</p>"},{"location":"NetBox%20Cloud/migrating-to-netbox-cloud/#3-optional-archive-your-media-directory","title":"3 - (Optional) Archive your /media directory","text":"<p>Optionally, if you are storing images inside NetBox, use the command below to archive your media directory. Note that the example below shows the default file path. Update the path if you have changed the location of these files.</p> <pre><code>tar -czf netbox_media.tar.gz /opt/netbox/netbox/media/\n</code></pre>"},{"location":"NetBox%20Cloud/migrating-to-netbox-cloud/#4-optional-archive-your-scripts-directory","title":"4 - (Optional) Archive your /scripts directory","text":"<p>Optionally, if you have uploaded custom scripts to NetBox, use the command below to archive your scripts directory. Note that the example below shows the default file path. Update the path if you have changed the location of these files.</p> <pre><code>tar -czf netbox_scripts.tar.gz /opt/netbox/netbox/scripts/\n</code></pre>"},{"location":"NetBox%20Cloud/migrating-to-netbox-cloud/#5-optional-archive-your-reports-directory","title":"5 - (Optional) Archive your /reports directory","text":"<p>Optionally, if you have uploaded custom reports to NetBox, use the command below to archive your reports directory. Note that the example below shows the default file path. Update the path if you have changed the location of these files.</p> <pre><code>tar -czf netbox_scripts.tar.gz /opt/netbox/netbox/reports/\n</code></pre>"},{"location":"NetBox%20Cloud/migrating-to-netbox-cloud/#6-upload-the-files-to-a-shared-location","title":"6 - Upload the files to a shared location","text":"<p>Upload the files created in the steps above to a shareable location such as FTP, Dropbox, Box, or Google Drive. If necessary, the NetBox Labs team can create a secure, dedicated location for you to use.</p>"},{"location":"cloud-connectivity/aws-direct-connect-multi-region-setup/","title":"Aws direct connect multi region setup","text":""},{"location":"cloud-connectivity/aws-direct-connect-multi-region-setup/#coming-soon","title":"Coming Soon","text":""},{"location":"cloud-connectivity/aws-direct-connect-multi-region/","title":"AWS Direct Connect (Multi-Region)","text":"<p>Delivery via AWS Direct Connect in two regions, with replicated NetBoxes, Single (or Dual) Direct Connect in each region. Customer IP space (2 x /25's) is assigned for the VPCs. This is to host load balancers and proxies within the dedicated customer Account/VPC. Internally we will allocate a /27 per availability zone for each of the 3 availability zones.</p> <p>The connections do not have to be dedicated, a VLAN can be added to an existing layer 2 fabric provider, such as Equinix Fabric. In terms of bandwidth requirements, 50Mbps is fine.</p> <p></p>"},{"location":"cloud-connectivity/aws-direct-connect-setup/","title":"Aws direct connect setup","text":""},{"location":"cloud-connectivity/aws-direct-connect-setup/#coming-soon","title":"Coming Soon","text":""},{"location":"cloud-connectivity/aws-direct-connect/","title":"AWS Direct Connect (Single Region)","text":"<p>AWS Direct Connect is available via hosted connections from BT, Equinix Fabric, MegaPort, Optus, PCCW, Zayo etc. VLAN hand-off is with BGP and Single or Dual Direct Connect services are available. Customer IP space (/24 or /25) is assigned for the VPC, as this is required to host load balancers and proxies within the dedicated customer Account/VPC. Internally we will allocate a /27 per availability zone for each of the 3 availability zones.</p> <p>The connection does not have to be dedicated, a VLAN can be added to an existing layer 2 fabric provider, such as Equinix Fabric. In terms of bandwidth requirements, 50Mbps is fine.</p> <p></p>"},{"location":"cloud-connectivity/aws-private-link-setup/","title":"Aws private link setup","text":""},{"location":"cloud-connectivity/aws-private-link-setup/#coming-soon","title":"Coming Soon","text":""},{"location":"cloud-connectivity/aws-private-link/","title":"AWS Private Link (Single Region)","text":"<p>Delivery via Private Link between a customer\u2019s existing AWS account and the NetBox Labs AWS account, with VPC endpoints using private IPs. This option has fast turn-up times and standard Internet delivery can optionally be disabled.</p> <p></p>"},{"location":"cloud-connectivity/cloud-connectivity-faq/","title":"Frequently Asked Questions","text":""},{"location":"cloud-connectivity/cloud-connectivity-faq/#ipsec-vpn-tunnels","title":"IPSEC VPN Tunnels","text":"<p>Q. Why 2 tunnels? A. The AWS VPN Gateway product provides 2 tunnels by default for resilience. Each terminates in a different availability zone.</p>"},{"location":"cloud-connectivity/cloud-connectivity-faq/#ipsec-vpn-tunnels-direct-connect","title":"IPSEC VPN Tunnels + Direct Connect","text":"<p>Q. Why /24 or /25? A.  This is to host load balancers and proxies within the dedicated customer Account/VPC. Internally we will allocate a /27 per availability zone for each of the 3 availability zones.</p>"},{"location":"cloud-connectivity/cloud-connectivity-faq/#direct-connect","title":"Direct Connect","text":"<p>Q. Does the connection have to be dedicated? A.  No, a VLAN can be added to an existing layer 2 fabric provider, such as Equinix Fabric.</p> <p>Q. How much bandwidth for hosted connections? A.  50Mbps is fine.</p>"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/","title":"Do I Need Cloud Connectivity Options?","text":"<p>Internet Delivery (Single Region) is the standard product offering for NetBox Cloud. It comes with extensive security features (see below) and is suitable for the majority of use cases and environments.</p> <p>If you have special connectivity needs, there are several options available. However, in many cases where cloud connectivity options seem necessary, NetBox Cloud offers features that can address your needs without additional setup cost. This guide explores some of those features.</p>"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#netbox-cloud-security-features","title":"NetBox Cloud Security Features","text":"<p>Security and convenience are always in focus in the NetBox Cloud Platform and we understand that with any application, getting the balance right between security and convenience is crucial. At NetBox Labs, we believe that you shouldn\u2019t have to compromise in either area. Just a few of the Security features the NetBox Cloud platform offers are:</p> <ul> <li>Securing Access with Prefix Lists</li> <li>mTLS and Dedicated IP Addresses</li> <li>Database Backup and Restore</li> <li>Safe Upgrade Tool</li> <li>Two-Factor Authentication for the NetBox Labs Admin Console</li> <li>SSO Options for NetBox Cloud</li> </ul> <p>Read more about all of these features in this blog or watch an on-demand webinar to learn how these NetBox Cloud features are designed to make the lives of the network team easier, whilst at the same time enhancing the security of NetBox Cloud.</p>"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#crud-createupdatedelete-access-to-the-netbox-data-model-via-rest-and-graphql-api","title":"CRUD (Create/Update/Delete) Access to the NetBox Data Model via REST and GraphQL API","text":"<p>Out of the box NetBox Cloud allows you to programmatically interact with the NetBox Database to perform CRUD operations. This can be via the REST API or GraphQL interface.</p>"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#rest-api","title":"REST API","text":"<p>REST stands for Representational State Transfer. It's a particular type of API which employs HTTP requests and JavaScript Object Notation (JSON) to facilitate create, retrieve, update, and delete (CRUD) operations on objects within an application.</p> <p>Info</p> <p>To read more about how to get started with the REST API, check out the NetBox docs or this video from the NetBox Zero to Hero training course.</p>"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#graphql-api","title":"GraphQL API","text":"<p>NetBox provides a read-only GraphQL API to complement its REST API. This API is powered by Strawberry Django. GraphQL enables the client to specify an arbitrary nested list of fields to include in the response. All queries are made to the root /graphql API endpoint.</p> <p>Info</p> <p>To read more about how to get started with the GraphQL API, check out the NetBox docs.</p>"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#streaming-change-events-with-webhooks-and-event-streams","title":"Streaming Change Events with Webhooks and Event Streams","text":"<p>Events in NetBox can trigger calls to other systems with Webhooks, or other systems can subscribe to Event Streams, and in either case this can trigger other systems to take action based on the event.</p>"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#netbox-webhooks","title":"NetBox Webhooks","text":"<p>NetBox can be configured via Event Rules to transmit outgoing webhooks to remote systems in response to internal object changes. The receiver can act on the data in these webhook messages to perform related tasks.</p> <p>For example, suppose you want to automatically configure a monitoring system to start monitoring a device when its operational status is changed to active, and remove it from monitoring for any other status. You can create a webhook in NetBox for the device model and craft its content and destination URL to effect the desired change on the receiving system. Webhooks will be sent automatically by NetBox whenever the configured constraints are met.</p> <p>Info</p> <p>To read more about how to get started with the Webhooks, check out the NetBox docs.</p>"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#netbox-event-streams","title":"NetBox Event Streams","text":"<p>NetBox Event Streams unlock event-driven architectures by enabling teams to easily subscribe to network state and management events from the NetBox Cloud Platform, feeding events to other systems or triggering automations. This capability spans various types of events, from operational updates like the addition of new devices, to security-oriented alerts such as unauthorized access attempts.</p> <p>Info</p> <p>To learn more about NetBox Event Streams you can sign up for an on-demand webinar or read our blog about how NetBox Event Streams integrated with SIEM tools like Splunk Enterprise and ElasticSearch, is setting a new standard for how networks are managed and secured.</p>"},{"location":"cloud-connectivity/internet-delivery/","title":"Internet Delivery (Single Region)","text":"<p>Internet Delivery (Single Region) is the standard product offering for NetBox Cloud. It comes with extensive security features (see below) and is suitable for the majority of use cases and environments:</p> <p></p>"},{"location":"cloud-connectivity/internet-delivery/#netbox-cloud-security-features","title":"NetBox Cloud Security Features","text":"<p>Below are just a few of the Security features available on the NetBox Cloud platform. All of these can be enabled over our standard Internet Delivery option:</p> <ul> <li>Securing Access with Prefix Lists</li> <li>mTLS and Dedicated IP Addresses</li> <li>Database Backup and Restore</li> <li>Safe Upgrade Tool</li> <li>Two-Factor Authentication for the NetBox Labs Admin Console</li> <li>SSO Options for NetBox Cloud</li> </ul> <p>Info</p> <p>Read more about all of these features in this blog or watch an on-demand webinar to learn how these NetBox Cloud features are designed to make the lives of the network team easier, whilst at the same time enhancing the security of NetBox Cloud.</p>"},{"location":"cloud-connectivity/ipsec-vpn-tunnels-setup/","title":"Ipsec vpn tunnels setup","text":""},{"location":"cloud-connectivity/ipsec-vpn-tunnels-setup/#coming-soon","title":"Coming Soon","text":""},{"location":"cloud-connectivity/ipsec-vpn-tunnels/","title":"IPSEC VPN Tunnels (Single Region)","text":"<p>In this solution NetBox Cloud is securely delivered over an IPSEC VPN. You have single or dual tunnel options, and use a static route or the preferred option of BGP routing. Customer IP space (/24 or /25) is assigned for the VPC as this is required to host load balancers and proxies within the dedicated customer Account/VPC.</p> <p>Internally we will allocate a /27 per availability zone for each of the 3 availability zones. The AWS VPN Gateway product provides 2 tunnels by default for resilience, and each terminates in a different availability zone.</p> <p></p>"},{"location":"cloud-connectivity/ipsec-vpn-tunnels/#redundancy-options","title":"Redundancy options","text":"<p>With the IPSEC VPN solution there are options for Single, Active/Passive and Active/Active Firewalls:</p> <p></p>"},{"location":"cloud-connectivity/which-connectivity-option/","title":"Which Cloud Connectivity Option is Right for Me?","text":"<p>In many cases where cloud connectivity options seem necessary, NetBox Cloud offers features that can address your needs without additional setup. In the majority of cases Internet Delivery (Single Region) is the most appropriate connectivity option, but there are some general recommendations depending on your use case:</p>"},{"location":"cloud-connectivity/which-connectivity-option/#recommendations-by-use-case","title":"Recommendations By Use Case","text":"Use Case Recommendation Reason General Use Internet Delivery (Single Region) Standard product, easy setup, and sufficient security for most use cases. AWS-Centric Environments AWS Private Link (Single Region) Fast setup, private IPs, and good integration with AWS infrastructure. Secure, Site-to-Site Connections IPSEC VPN Tunnels (Single Region) High flexibility and security with VPN tunnels and routing options. High-Performance Needs (Single Region) AWS Direct Connect (Single Region) Low latency, high performance, suitable for demanding applications. High-Performance, Multi-Region Needs AWS Direct Connect (Multi-Region) Highest performance, redundancy, and scalability across multiple regions."},{"location":"cloud-connectivity/which-connectivity-option/#detailed-breakdown","title":"Detailed Breakdown","text":"<p>This matrix should help you identify the most suitable NetBox Cloud connectivity option based on your specific requirements and priorities:</p> Criteria Internet Delivery (Single Region) AWS Private Link (Single Region) IPSEC VPN Tunnels (Single Region) AWS Direct Connect (Single Region) AWS Direct Connect (Multi-Region) Ease of Setup Standard product, easy setup Fast turn-up times Requires VPN configuration Requires Direct Connect setup Requires Direct Connect setup Redundancy Single region. Multiple AZs Single region. Multiple AZs Single region. Multiple AZs. Single or dual tunnels Single region. Multiple AZs. Single or dual Direct Connect options Multi Region. Multiple AZs. Replicated NetBoxes Cost Included Low, due to Private Link Medium, dependent on VPN set up Medium, due to Direct Connect Highest, due to multi-region setup Performance Standard internet performance Low latency due to Private Link Variable, dependent on VPN quality High performance, low latency Highest performance, low latency Management Complexity Low Medium High Medium High Recommended For General use AWS-centric environments Secure, site-to-site connections High-performance needs, single region High-performance, multi-region needs"},{"location":"netbox-enterprise/deploying-netbox-enterprise/","title":"Deploying netbox enterprise","text":""},{"location":"netbox-enterprise/deploying-netbox-enterprise/#multiple-deployment-models-to-suit-your-environment","title":"Multiple deployment models to suit your environment","text":"<p>NetBox Enterprise supports different deployment models to best address varying requirements and environments. For a fully managed, hands-off experience, we support an Embedded Cluster (EC) installation that takes care of everything, including deploying and managing the underlying Kubernetes cluster. All that\u2019s needed is a bare Linux operating system running on adequately sized compute resources. EC deployments deliver all the components and dependencies required to install and operate NetBox, including databases, application servers, application load balancers, and object stores. EC deployments also provide the option of leveraging external components, such as a cloud PostgreSQL cluster or an S3 Object Store.</p> <p>For customers who are already operating their own Kubernetes clusters, we also support a Kubernetes Off-The-Shelf (KOTS) installation that deploys NetBox Enterprise on your k8s cluster. KOTS deployments include all the same components and take care of all the dependencies just like EC deployments. They also provide the same flexibility in leveraging external database and object store components.</p>"},{"location":"netbox-enterprise/deploying-netbox-enterprise/#walking-through-a-fully-contained-netbox-enterprise-installation","title":"Walking through a fully contained NetBox Enterprise installation","text":"<p>Let\u2019s walk through an Embedded Cluster (EC) install to see just how easy it is to get started with NetBox Enterprise!</p> <ol> <li> <p>Download the deployment package and license file to your Linux host:     <pre><code>curl https://replicated.app/embedded/netbox-enterprise/stable -o netbox-enterprise-stable.tgz\n</code></pre></p> </li> <li> <p>After uncompressing the package, simply launch the installation:     <pre><code>sudo ./netbox-enterprise install --license license.yaml\n</code></pre>     You\u2019ll be requested to create a password for the NetBox Enterprise admin console and the cluster will be deployed, ready to host all the NetBox application components. The deployment of the cluster is complete when you see this message:</p> <p>Visit the Admin Console to configure and install netbox-enterprise: http://my.netbox-enterprise.host:30000</p> </li> <li> <p>Access the NetBox Enterprise admin console and configure NetBox     Open the provided URL in your browser. You\u2019ll be prompted for the password you created in Step 2:</p> <p></p> <p>You\u2019ll then be guided to configure NetBox for your environment:</p> <p></p> <p>You\u2019ll be able to configure:</p> <ul> <li>Version of NetBox that you want to install:</li> </ul> <p></p> <ul> <li>Whether to use a built-in or external PostgreSQL:</li> </ul> <p></p> <ul> <li>Whether to use a built-in or external S3-Compatible object store:</li> </ul> <p></p> <ul> <li>And finally, advanced settings to configure plugins and SSO remote authentication:</li> </ul> <p></p> <p>The deployment of NetBox Enterprise will then proceed:</p> <p></p> <p>The <code>Unavailable</code> status will change to <code>Ready</code> once the deployment is complete and NetBox has fully initialized:</p> <p></p> </li> <li> <p>That\u2019s it! You\u2019re ready to get started with NetBox</p> <p></p> <p></p> </li> </ol>"},{"location":"netbox-enterprise/nbe-backups/","title":"NetBox Enterprise Backups","text":"<p>Much like the NetBox software itself, NetBox Enterprise uses 2 main datastores: PostgreSQL, and Redis.</p> <p>PostgreSQL is used for the primary model data in NetBox, including sites, facilities, racks, and so on. Redis is used for caching, the task queue, and some other data including stored scripts.</p> <p>Additionally, NetBox Enterprise uses an S3-compatible store for some specific resources, most notably image uploads. NOTE: The built-in S3-compatible store keeps its data in Redis, so it is not necessary to back it up separately.</p> <p>For each type of datastore you can choose to use a built-in deployment, or configure NetBox Enterprise to use an existing external resource already in your environment.</p>"},{"location":"netbox-enterprise/nbe-backups/#external-databases","title":"External Databases","text":"<p>Info</p> <p>If you are providing your own database(s) for use by NetBox Enterprise, it is expected that you have your own processes for high availability, backup, and restore.</p>"},{"location":"netbox-enterprise/nbe-backups/#using-disaster-recovery-for-backups","title":"Using Disaster Recovery for Backups","text":"<p>A disaster recovery backup will preserve the complete state of your NetBox Enterprise install, from allocated volumes to databases to custom configuration.</p> <p>This feature is included in Embedded Cluster installs, and can be enabled by installing some extra dependencies to your cluster for KOTS installs.</p>"},{"location":"netbox-enterprise/nbe-backups/#backing-up-the-embedded-cluster","title":"Backing Up the Embedded Cluster","text":"<ol> <li>Navigate to the backup configuration by clicking the Backup settings link in the Disaster Recovery section of the admin console.    </li> <li>Input your S3 bucket, credentials, endpoint, and region. </li> <li>Click Update storage settings -- it will spend a few moments validating that your settings work. </li> <li>Perform a backup by clicking the Backups tab, and then clicking Start backup. </li> </ol>"},{"location":"netbox-enterprise/nbe-backups/#restoring-the-embedded-cluster","title":"Restoring the Embedded Cluster","text":"<ol> <li>Download the latest embedded cluster installer following the same instructions you did for a new install, if you haven't already.</li> <li>Run: <code>./netbox-enterprise restore</code></li> <li>Enter the same S3 credentials you use for backups. </li> <li>Next, it will take a few minutes to bring up the node.    When it's complete, you will be prompted to continue the restore: </li> <li>Enter <code>Y</code> to continue, and the restore will launch the cluster.</li> <li>(Optional) If you plan to have more than one node in the new cluster, you can go to the admin console and configure them when prompted.</li> <li>Enter <code>continue</code> to finish bringing the NetBox Enterprise application up. </li> <li>It will take a few more minutes to finish bringing the application up, and then you will see \"Application restored!\"     NetBox Enterprise and the Admin Console should now be completely restored and available as normal.</li> </ol>"},{"location":"netbox-enterprise/nbe-backups/#manual-backup-and-restore","title":"Manual Backup and Restore","text":"<p>Besides disaster recovery, it is also a good idea to keep backups of your data in case you want to view, partially restore, or move your data to another system.</p> <p>NetBox Enterprise Namespace</p> <p>The default namespace for KOTS installs is <code>netbox-enterprise</code>, and the Embedded Cluster default is <code>kotsadm</code>.</p> <p>The instructions below default to <code>kotsadm</code>, but you can change the <code>NETBOX_NAMESPACE</code> export to match your system.</p>"},{"location":"netbox-enterprise/nbe-backups/#backing-up-your-data","title":"Backing Up Your Data","text":"<p>Backing up NetBox Enterprise's data manually is reasonably simple, and Kubernetes makes it easy to access them from the command-line.</p> <p>Before You Back Up: Accessing Your Cluster</p> <p>Before you can back anything up, you must first make sure you can access the cluster on the command line.</p> <p>See the advanced tools documentation for details on connecting to your NetBox Enterprise cluster.</p>"},{"location":"netbox-enterprise/nbe-backups/#media-scripts-and-reports","title":"Media, Scripts, and Reports","text":"<p>Media, scripts, and reports are stored in a volume accessible from the NetBox containers. To back them up, you can run this:</p> <pre><code>export NETBOX_NAMESPACE=\"kotsadm\" &amp;&amp; \\\nNETBOX_MAIN_POD=\"$(kubectl get pod \\\n  -o name \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -l 'app.kubernetes.io/component=netbox' \\\n  | head -n 1 \\\n  )\" &amp;&amp; \\\nkubectl exec \"${NETBOX_MAIN_POD}\" \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -c netbox \\\n  -- /bin/sh -c ' \\\n      cd /opt/netbox/netbox &amp;&amp; \\\n      find media scripts reports -type f &gt; /tmp/files.txt &amp;&amp; \\\n      tar -czf - \\\n      --owner=0 \\\n      --group=0 \\\n      -T /tmp/files.txt' &gt; netbox-data.tar.gz\n</code></pre>"},{"location":"netbox-enterprise/nbe-backups/#built-in-postgresql","title":"Built-In PostgreSQL","text":"<p>The built-in PostgreSQL is deployed using the CrunchyData Postgres Operator.</p> <p>Since the PostgreSQL CLI tools are already available inside the cluster, all we need to do to dump the database is to call into the correct container and run a <code>pg_dump</code> there.</p> <p>To perform a database dump, run these commands:</p> <pre><code>export NETBOX_NAMESPACE=\"kotsadm\" &amp;&amp; \\\nPOSTGRESQL_MAIN_POD=\"$(kubectl get pod \\\n  -o name \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -l 'postgres-operator.crunchydata.com/role=master' \\\n  | head -n 1 \\\n  )\" &amp;&amp; \\\nkubectl exec \"${POSTGRESQL_MAIN_POD}\" \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -c database \\\n  -- \\\n    pg_dump netbox &gt; netbox.pgsql\n</code></pre> <p>This will create a <code>netbox.pgsql</code> file in your local directory. Save it somewhere safe for future restores.</p> <p>For more details on backing up NetBox databases, see the official NetBox documentation.</p>"},{"location":"netbox-enterprise/nbe-backups/#built-in-redis","title":"Built-In Redis","text":"<p>The built-in Redis is deployed using the Bitnami Redis Helm chart.</p> <p>Backing up Redis is straightforward, since it does its work in memory and then writes checkpoints to the filesystem atomically.</p> <p>First, make sure that AOF rewrite isn't enabled, and confirm that a rewrite isn't in-process before you start backing up:</p> <pre><code>export NETBOX_NAMESPACE=\"kotsadm\" &amp;&amp; \\\nexport REDIS_MAIN_POD=\"$(kubectl get pod \\\n  -o name \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -l 'app.kubernetes.io/component=master,app.kubernetes.io/name=redis' \\\n  | head -n 1 \\\n  )\" &amp;&amp; \\\nfor COMMAND in \\\n  \"CONFIG SET auto-aof-rewrite-percentage 0\" \\\n  \"SAVE\" \\\n  \"INFO persistence\"; do\n    kubectl exec ${REDIS_MAIN_POD} \\\n      -n \"${NETBOX_NAMESPACE}\" \\\n      -i \\\n      -c redis \\\n      -- bash -c \\\n        \"REDISCLI_AUTH=\\$REDIS_PASSWORD redis-cli ${COMMAND}\" \\\n    | grep 'aof_rewrite_in_progress'\ndone\n</code></pre> <p>Make sure that those commands output <code>aof_rewrite_in_progress:0</code>, then you're ready to proceed. Otherwise, just run them again until it says 0.</p> <p>Next, all that's necessary to back up the data in your Redis install is a basic tar command to create an archive from the <code>/data</code> directory in the same shell:</p> <pre><code>kubectl exec ${REDIS_MAIN_POD} \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -c redis \\\n  -- /bin/sh -c ' \\\n      cd /data &amp;&amp; \\\n      find * -type f &gt; /tmp/files.txt &amp;&amp; \\\n      tar -czf - \\\n      --owner=0 \\\n      --group=0 \\\n      -T /tmp/files.txt' &gt; redis-data.tar.gz\n</code></pre> <p>Finally, turn AOF rewrites back on:</p> <pre><code>kubectl exec ${REDIS_MAIN_POD} \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -c redis \\\n  -- bash -c \\\n    'REDISCLI_AUTH=$REDIS_PASSWORD \\\n    redis-cli \\\n    CONFIG SET auto-aof-rewrite-percentage 100'\n</code></pre>"},{"location":"netbox-enterprise/nbe-backups/#restoring-your-backups","title":"Restoring Your Backups","text":"<p>Restoring is almost as simple as backing up. You just need to put NetBox Enterprise into restore mode first.</p>"},{"location":"netbox-enterprise/nbe-backups/#enabling-and-disabling-restore-mode","title":"Enabling and Disabling Restore Mode","text":"<ol> <li>Put NetBox Enterprise into \"Restore Mode\" by going to the Config tab and checking the Enable Restore Mode checkbox.    </li> <li>Click the \"Save config\" button at the bottom of the form, and then when the admin console prompts you, click \"go to updated version\". </li> <li>Confirm that the New version available at the top denotes it's a config change, and if so click the \"Deploy\" button.    </li> </ol> <p>This will shut down NetBox (and the built-in Redis, if you are using it) but leave the other NetBox Enterprise infrastructure up, so you can safely restore.</p> <p>When you are done restoring your data, just follow the same steps, unchecking Enable Restore Mode and deploying the updated configuration.</p>"},{"location":"netbox-enterprise/nbe-backups/#media-scripts-and-reports_1","title":"Media, Scripts, and Reports","text":"<p>To restore media, scripts, and reports, you just need to unpack them into the correct directory inside a NetBox container.</p> <p>Note</p> <p>The backup instructions above back up all three of the <code>media/</code>, <code>scripts/</code>, and <code>reports/</code> subdirectories in one file.</p> <p>If you are restoring a backup from another NetBox instance, you might need to change the name of the tarball and the path after the <code>-C</code> at the end of this command to unpack your backup into the right location.</p> <pre><code>export NETBOX_NAMESPACE=\"kotsadm\" &amp;&amp; \\\nexport NETBOX_RESTORE_POD=\"$(kubectl get pod \\\n  -o name \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -l 'app.kubernetes.io/component=restore-mode' \\\n  | head -n 1 \\\n  )\" &amp;&amp; \\\ncat netbox-data.tar.gz | kubectl exec ${NETBOX_RESTORE_POD} \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -i \\\n  -- tar -xvzf - \\\n    --no-same-owner \\\n    --no-same-permission \\\n    -C /opt/netbox/netbox\n</code></pre>"},{"location":"netbox-enterprise/nbe-backups/#built-in-postgresql_1","title":"Built-In PostgreSQL","text":"<p>To restore from a dump file, pipe the <code>netbox.pgsql</code> created during backup into <code>psql</code> in the PostgreSQL pod:</p> <pre><code>export NETBOX_NAMESPACE=\"kotsadm\"\nPOSTGRESQL_MAIN_POD=\"$(kubectl get pod \\\n  -o name \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -l 'postgres-operator.crunchydata.com/role=master' \\\n  | head -n 1 \\\n  )\" &amp;&amp; \\\nkubectl exec \"${POSTGRESQL_MAIN_POD}\" \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -c database \\\n  -- dropdb --if-exists --force netbox &amp;&amp; \\\nkubectl exec \"${POSTGRESQL_MAIN_POD}\" \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -c database \\\n  -- createdb -E UTF8 netbox &amp;&amp; \\\ncat netbox.pgsql | kubectl exec \"${POSTGRESQL_MAIN_POD}\" \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -i \\\n  -c database \\\n  -- psql -d netbox -f-\n</code></pre> <p>Following this run the below to ensure all database permissions are correct:</p> <pre><code>export NETBOX_NAMESPACE=\"kotsadm\"\nPOSTGRESQL_MAIN_POD=\"$(kubectl get pod \\\n  -o name \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -l 'postgres-operator.crunchydata.com/role=master' \\\n  | head -n 1 \\\n  )\" &amp;&amp; \\\n  kubectl exec \"${POSTGRESQL_MAIN_POD}\" \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -i \\\n  -c database \\\n  -- psql -c \"ALTER DATABASE netbox OWNER TO netbox;\" &amp;&amp; \\\nkubectl exec \"${POSTGRESQL_MAIN_POD}\" \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -i \\\n  -c database \\\n  -- psql -d netbox -c \"GRANT CREATE ON SCHEMA public TO netbox;\"\n</code></pre>"},{"location":"netbox-enterprise/nbe-backups/#built-in-redis_1","title":"Built-In Redis","text":"<p>Since Redis isn't running in restore mode, there is no need to disable and re-enable append mode. All that is necessary is to unpack the files back into place.</p> <pre><code>export NETBOX_NAMESPACE=\"kotsadm\" &amp;&amp; \\\nexport REDIS_MAIN_POD=\"$(kubectl get pod \\\n  -o name \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -l 'app.kubernetes.io/component=master,app.kubernetes.io/name=redis' \\\n  | head -n 1 \\\n  )\" &amp;&amp; \\\ncat redis-data.tar.gz | kubectl exec ${REDIS_MAIN_POD} \\\n  -n \"${NETBOX_NAMESPACE}\" \\\n  -i \\\n  -c redis \\\n  -- tar -xvzf - \\\n    --no-same-owner \\\n    --no-same-permission \\\n    -C /data\n</code></pre>"},{"location":"netbox-enterprise/nbe-ec-installation/","title":"NetBox Enterprise Embedded Cluster Installation","text":""},{"location":"netbox-enterprise/nbe-ec-installation/#conventional-installation","title":"Conventional Installation","text":"<p>You should be able to follow these instructions for installing the Embedded Cluster in most environments. If you are in a more restrictive environment, see the Advanced Installation section below.</p>"},{"location":"netbox-enterprise/nbe-ec-installation/#deploying-the-cluster","title":"Deploying the cluster","text":"<p>The following steps are required for an Embedded Cluster (EC) installation of NetBox Enterprise.</p> <ol> <li>Download the deployment package and license file to your host (the <code>Authorization</code> token should be provided by NetBox Labs):</li> </ol> <p><pre><code>curl https://replicated.app/embedded/netbox-enterprise/stable -H \"Authorization: &lt;provided by NetBox Labs&gt;\" -o netbox-enterprise-stable.tgz\n</code></pre> 2. Uncompress the package and launch the installation:</p> <pre><code>tar -xvzf netbox-enterprise-unstable.tgz\nsudo ./netbox-enterprise install --license license.yaml\n</code></pre> <p>You\u2019ll be requested to create a password for the NetBox Enterprise admin console. A Kubernetes cluster will then be deployed, ready to host all the NetBox application components. The deployment of the cluster is complete with this message:</p> <pre><code>Visit the Admin Console to configure and install netbox-enterprise: http://my.netbox-enterprise.host:30000\n</code></pre>"},{"location":"netbox-enterprise/nbe-ec-installation/#deploying-netbox","title":"Deploying NetBox","text":"<p>Access the NetBox Enterprise admin console and configure NetBox.</p> <p>Open the provided URL in a browser. A prompt will require the password created in Step 2:</p> <p></p> <p>A wizard will guide the configuration of NetBox for the environment:</p> <p></p> <p>Configuration information includes:</p> <ul> <li> <p>Built-in or external PostgreSQL:   </p> </li> <li> <p>Built-in or external S3-Compatible object store:   </p> </li> <li> <p>Built-in or external Redis object store:   </p> </li> <li> <p>Advanced settings to configure plugins and SSO remote authentication, and IPv4/IPv6 compatibility:   </p> </li> </ul> <p>Finally, accept the terms of service by writing \"ACCEPT\" (case-insensitive) and you can proceed to the deployment.</p> <p></p>"},{"location":"netbox-enterprise/nbe-ec-installation/#finish-the-deployment","title":"Finish the Deployment","text":"<p>Once you have accepted the terms of service and continued on to the main admin console, deployment will start. The first deployment will take some time, as it brings up all subsystems and runs migrations to initialize the database.</p> <p></p> <p>The <code>Unavailable</code> status will change to <code>Ready</code> once the deployment is complete and NetBox has fully initialized:</p> <p></p>"},{"location":"netbox-enterprise/nbe-ec-installation/#verify-the-deployment","title":"Verify the Deployment","text":"<p>Once you see <code>Ready</code>, NetBox Enterprise is fully deployed, and available on ports <code>80</code> and <code>443</code>.</p>"},{"location":"netbox-enterprise/nbe-ec-installation/#advanced-installation","title":"Advanced Installation","text":""},{"location":"netbox-enterprise/nbe-ec-installation/#firewalld","title":"Firewalld","text":"<p>If you are using Firewalld (commonly found on RHEL installations, among others), you will need to create a zone for the cluster before installing.</p> <ol> <li>Determine any host IP addresses or networks (external or otherwise) that might need access to the cluster.</li> <li>Create a file called <code>/etc/firewalld/zones/embedded-cluster.xml</code> with the following contents:    <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;zone target=\"ACCEPT\"&gt;\n  &lt;short&gt;embedded-cluster&lt;/short&gt;\n  &lt;description&gt;Zone for Embedded Cluster communication&lt;/description&gt;\n  &lt;!-- HOST IP ADDRESSES GO HERE --&gt;\n  &lt;source address=\"10.244.0.0/17\"/&gt;\n  &lt;source address=\"10.244.128.0/17\"/&gt;\n  &lt;port protocol=\"tcp\" port=\"2380\"/&gt;\n  &lt;port protocol=\"udp\" port=\"4789\"/&gt;\n  &lt;port protocol=\"tcp\" port=\"6443\"/&gt;\n  &lt;port protocol=\"tcp\" port=\"7443\"/&gt;\n  &lt;port protocol=\"tcp\" port=\"9091\"/&gt;\n  &lt;port protocol=\"tcp\" port=\"9443\"/&gt;\n  &lt;port protocol=\"tcp\" port=\"10249\"/&gt;\n  &lt;port protocol=\"tcp\" port=\"10250\"/&gt;\n  &lt;port protocol=\"tcp\" port=\"10256\"/&gt;\n  &lt;port protocol=\"tcp\" port=\"30000\"/&gt;\n  &lt;port protocol=\"tcp\" port=\"22\"/&gt;\n&lt;/zone&gt;\n</code></pre></li> <li>In the spot where it says <code>&lt;!-- HOST IP ADDRESSES GO HERE --&gt;</code>, add a <code>&lt;source /&gt;</code> tag for each host or network you want to allow.    For example, if your external IP is <code>1.2.3.4</code>, and you also have a private class C network <code>192.168.123.0</code>, you would add two lines:    <pre><code>&lt;source address=\"1.2.3.4/32\" /&gt;\n&lt;source address=\"192.168.123.0/24\" /&gt;\n</code></pre></li> <li>Run <code>sudo firewall-cmd --reload</code> to load the zone configuration.</li> </ol>"},{"location":"netbox-enterprise/nbe-ec-installation/#selinux","title":"SELinux","text":"<p>There are two steps to installing with SELinux enabled with enforcement turned on.</p> <p>First, before you install the Embedded Cluster, run: <pre><code>setenforce 0\n</code></pre></p> <p>...this will temporarily disable SELinux enforcement until you reenable it, or reboot.</p> <p>Next, follow the normal instructions for Conventional Installation above.</p> <p>Finally, run the following commands to make sure your Embedded Cluster installation is accessible with enforcement enabled:</p> <pre><code>export EC_DIR=\"/var/lib/embedded-cluster\"\nexport KUBE_DIR=\"${EC_DIR}/k0s\"\n\nsudo semanage fcontext -a -t container_var_lib_t \"${EC_DIR}\"\nsudo restorecon -R -v \"${EC_DIR}\"\n\nsudo semanage fcontext -a -t container_runtime_exec_t \"${KUBE_DIR}/bin/containerd.*\"\nsudo semanage fcontext -a -t container_runtime_exec_t \"${KUBE_DIR}/bin/runc\"\nsudo restorecon -R -v \"${KUBE_DIR}/bin\"\n\nsudo semanage fcontext -a -t container_var_lib_t \"${KUBE_DIR}/containerd(/.*)?\"\nsudo semanage fcontext -a -t container_ro_file_t \"${KUBE_DIR}/containerd/io.containerd.snapshotter.*/snapshots(/.*)?\"\nsudo restorecon -R -v ${KUBE_DIR}/containerd\n</code></pre>"},{"location":"netbox-enterprise/nbe-ec-requirements/","title":"NetBox Enterprise Embedded Cluster Requirements","text":""},{"location":"netbox-enterprise/nbe-ec-requirements/#host-system-requirements","title":"Host system requirements","text":""},{"location":"netbox-enterprise/nbe-ec-requirements/#recommended","title":"Recommended","text":"<p>The following are the recommended system requirements for a production deployment of NetBox Enterprise running two replicas. For larger environments with more replicas, additional resources should be allocated.</p> <ul> <li>8 Virtual CPU (vCPU)</li> <li>24 GB Memory (RAM)</li> <li>100 GB SSD free disk space in <code>/var/lib</code></li> </ul> <p>Note</p> <p>For non-production deployments of NetBox Enterprise, the minimum system requirements can be reduced to 4 Virtual CPU (vCPU) and 16 GB Memory (RAM). All other requirements remain the same.</p>"},{"location":"netbox-enterprise/nbe-ec-requirements/#host-operating-system","title":"Host operating system","text":"<ul> <li>Linux (Kernel versions 4.3 and above)</li> </ul>"},{"location":"netbox-enterprise/nbe-ec-requirements/#architecture","title":"Architecture","text":"<ul> <li>x86-64</li> </ul>"},{"location":"netbox-enterprise/nbe-kots-installation/","title":"NetBox Enterprise KOTS Installation","text":""},{"location":"netbox-enterprise/nbe-kots-installation/#kubernetes-dependencies","title":"Kubernetes dependencies","text":"<p>Ensure you have the following Kubernetes dependencies installed. Please refer to the instructions for your operating system to install them.</p> <ul> <li>kubectl: general tool for interacting with Kubernetes clusters</li> <li>helm: a \"package manager\" for Kubernetes</li> </ul>"},{"location":"netbox-enterprise/nbe-kots-installation/#install-kots","title":"Install KOTS","text":"<p>KOTS is a kubectl plugin and admin console to help manage Kubernetes Off-The-Shelf software from one or more Helm charts. To install, run the following command:</p> <pre><code>curl https://kots.io/install | bash\n</code></pre>"},{"location":"netbox-enterprise/nbe-kots-installation/#install-the-netbox-enterprise-helm-chart","title":"Install the NetBox Enterprise Helm chart","text":"<p>Install the chart into the cluster: <pre><code>kubectl kots install netbox-enterprise\n</code></pre></p> <p>You will be prompted to create a namespace to deploy to: <pre><code>Enter the namespace to deploy to:\n</code></pre></p> <p>You will also be prompted to create a password for the Admin Console: <pre><code>Enter a new password for the admin console (6+ characters):\n</code></pre></p> <p>The helm chart was successfully installed when you see this: <pre><code>  \u2022 Deploying Admin Console\n    \u2022 Creating namespace \u2713\n    \u2022 Waiting for datastore to be ready \u2713\n  \u2022 Waiting for Admin Console to be ready \u2713\n\n  \u2022 Press Ctrl+C to exit\n  \u2022 Go to http://localhost:8800 to access the Admin Console\n</code></pre></p>"},{"location":"netbox-enterprise/nbe-kots-installation/#install-netbox","title":"Install NetBox","text":""},{"location":"netbox-enterprise/nbe-kots-installation/#connect-to-the-admin-console","title":"Connect to the Admin Console","text":"<p>Access the NetBox Enterprise Admin Console by opening the provided URL in a browser.</p> <p>Tip</p> <p>If you are connecting to the cluster over the network, you might need to configure port forwarding to connect to the Admin Console: <code>kubectl port-forward -n &lt;namespace&gt; svc/kotsadm --address 0.0.0.0  3000:3000</code></p> <p>Once connected, you will be prompted for the password you created earlier:</p> <p></p> <p>You will then be prompted to provide your license file. Your license file should have been provided to you by NetBox Labs.</p> <p></p>"},{"location":"netbox-enterprise/nbe-kots-installation/#configure-netbox","title":"Configure NetBox","text":"<p>You will now be presented with a form to configure NetBox for your environment:</p> <p></p> <p>You can configure the following NetBox configuration parameters:</p> <ul> <li>Version of NetBox to deploy</li> <li>NetBox superuser name and password</li> <li>Number of NetBox replicas to run</li> <li>(Optional) External PostgreSQL</li> <li>(Optional) External S3-compatible storage</li> <li>(Optional) External Redis cache</li> <li>Advanced settings: plugins, remote authentication (SSO) and user group sync</li> </ul> <p>You'll also need to accept the NetBox Labs Terms of Service by entering <code>ACCEPT</code> before proceeding:</p> <p></p>"},{"location":"netbox-enterprise/nbe-kots-installation/#deploy-netbox","title":"Deploy NetBox","text":"<p>The deployment of NetBox Enterprise will then proceed:</p> <p></p> <p>The <code>Unavailable</code> status will change to <code>Ready</code> once the deployment is complete and NetBox has fully initialized:</p> <p></p> <p>NetBox Enterprise should now be fully deployed.</p> <p>Tip</p> <p>Although deployment is complete, you may still need to configure your ingress controller before you can connect without having to use port-forwarding. NetBox Enterprise is configured to expose a ClusterIP service with the name netbox-enterprise on port 80.</p>"},{"location":"netbox-enterprise/nbe-kots-requirements/","title":"NetBox Enterprise KOTS Requirements","text":""},{"location":"netbox-enterprise/nbe-kots-requirements/#system-requirements","title":"System requirements","text":"<p>To install NetBox Enterprise on an existing cluster, the cluster must meet the following requirements:</p>"},{"location":"netbox-enterprise/nbe-kots-requirements/#recommended-cluster-requirements","title":"Recommended cluster requirements","text":"<p>The following are the recommended system requirements for a production deployment of NetBox Enterprise running two replicas. For larger environments with more replicas, additional resources should be allocated.</p> <ul> <li>8 Virtual CPU (vCPU)</li> <li>24 GB Memory (RAM)</li> <li>100 GB SSD free disk space in <code>/var/lib</code></li> </ul> <p>Note</p> <p>For non-production deployments of NetBox Enterprise, the minimum system requirements can be reduced to 4 Virtual CPU (vCPU) and 16 GB Memory (RAM). All other requirements remain the same.</p>"},{"location":"netbox-enterprise/nbe-kots-requirements/#supported-operating-systems","title":"Supported operating systems","text":"<p>The following are the supported operating systems for nodes:</p> <ul> <li>Linux AMD64</li> </ul>"},{"location":"netbox-enterprise/nbe-kots-requirements/#available-storageclass","title":"Available StorageClass","text":"<p>The cluster must have an existing StorageClass available. KOTS creates the required stateful components using the default StorageClass in the cluster.</p>"},{"location":"netbox-enterprise/nbe-kots-requirements/#kubernetes-version-compatibility","title":"Kubernetes version compatibility","text":"<p>KOTS installation of NetBox Enterprise is supported on most common Kubernetes clusters, running v1.27 or higher.</p>"},{"location":"netbox-enterprise/nbe-kots-requirements/#port-forwarding","title":"Port forwarding","text":"<p>To support port forwarding, Kubernetes clusters require that the SOcket CAT (socat) package is installed on each node.</p>"},{"location":"netbox-enterprise/nbe-kots-requirements/#rbac-requirements","title":"RBAC Requirements","text":"<p>The user that runs the installation command must have at least the minimum role-based access control (RBAC) permissions that are required by KOTS. If the user does not have the required RBAC permissions, then an error message displays: <code>Current user has insufficient privileges to install Admin Console</code>.</p> <p>The required RBAC permissions vary depending on if the user attempts to install KOTS with cluster-scoped access or namespace-scoped access:</p> <ul> <li>Cluster-scoped RBAC Requirements (Default)</li> <li>Namespace-scoped RBAC Requirements</li> </ul>"},{"location":"netbox-enterprise/nbe-kots-requirements/#cluster-scoped-rbac-requirements-default","title":"Cluster-scoped RBAC Requirements (Default)","text":"<p>By default, KOTS requires cluster-scoped access. With cluster-scoped access, a Kubernetes ClusterRole and ClusterRoleBinding are created that grant KOTS access to all resources across all namespaces in the cluster.</p> <p>To install KOTS with cluster-scoped access, the user must meet the following RBAC requirements:</p> <ul> <li>The user must be able to create workloads, ClusterRoles, and ClusterRoleBindings.</li> <li>The user must have cluster-admin permissions to create namespaces and assign RBAC roles across the cluster.</li> </ul>"},{"location":"netbox-enterprise/nbe-kots-requirements/#namespace-scoped-rbac-requirements","title":"Namespace-scoped RBAC Requirements","text":"<p>KOTS can be installed with namespace-scoped access rather than the default cluster-scoped access. With namespace-scoped access, a Kubernetes Role and RoleBinding are automatically created that grant KOTS permissions only in the namespace where it is installed. Please contact us for more details.</p>"},{"location":"netbox-enterprise/nbe-overview/","title":"NetBox Enterprise","text":""},{"location":"netbox-enterprise/nbe-overview/#overview","title":"Overview","text":"<p>NetBox Enterprise is a distribution of NetBox built by NetBox Labs for organizations deploying NetBox in their own infrastructure. NetBox Enterprise users gain a simplified installation and upgrade process, as well as advanced features and integrations not available in the community editon of NetBox.</p>"},{"location":"netbox-enterprise/nbe-overview/#deployment-models","title":"Deployment models","text":"<p>NetBox Enterprise supports two different deployment models to best address varying requirements and environments. </p>"},{"location":"netbox-enterprise/nbe-overview/#embedded-cluster-installation","title":"Embedded Cluster installation","text":"<p>The Embedded Cluster (EC) installation provides a fully managed, hands-off installation experience for installing NetBox Enterprise, including deploying and managing an underlying Kubernetes cluster. A bare Linux operating system with adequately sized compute resources is the only requirement. Embedded Cluster deployments deliver all the components and dependencies required to deploy and operate NetBox, including databases, application servers, application load balancers, and object stores. Embedded Cluster deployments still provide the flexibility of leveraging external components, such as a PostgreSQL cluster or an S3 Object Store.</p> <p>See the NetBox Enterprise Embedded Cluster Installation guide for more details.</p>"},{"location":"netbox-enterprise/nbe-overview/#kots-installation","title":"KOTS installation","text":"<p>The Kubernetes Off-The-Shelf (KOTS) installation provides a more customizable installation experience of NetBox Enterprise. For organizations that are  operating their own Kubernetes environments, the KOTS installation enables them to deploy NetBox in their own k8s cluster. KOTS deployments include all the necessary components and take care of all the dependencies just like the Embedded Cluster deployments. They also provide the same flexibility in leveraging external components, such as a PostgreSQL cluster or an S3 Object Store.</p> <p>See the NetBox Enterprise KOTS Installation guide for more details.</p>"},{"location":"netbox-enterprise/nbe-release-notes/","title":"NetBox Enterprise 1.x Release Notes","text":""},{"location":"netbox-enterprise/nbe-release-notes/#140","title":"1.4.0","text":"<p>Adds support for supplying custom environment variables (eg, for LDAP config). It also contains a small auth change to allow curly braces and spaces in the new password validator.</p> <p>A number of included plugins were updated to their latest compatible versions: * <code>netbox_bgp</code> was updated to 0.13.3 * <code>netbox_floorplan_plugin</code> was updated to 0.4.1 * <code>netbox_plugin_dns</code> was updated to 1.1.3 * <code>netbox_topology_views</code> was updated to 4.0.1 * <code>slurpit_netbox</code> was updated to 0.9.84</p>"},{"location":"netbox-enterprise/nbe-release-notes/#130","title":"1.3.0","text":"<p>Compatible with any standard Kubernetes ingress controller now in KOTS installs, rather than only Nginx. Also fixes a potential data loss issue with uploaded images, as well as enabling script and report uploads.</p>"},{"location":"netbox-enterprise/nbe-release-notes/#120","title":"1.2.0","text":"<p>Improves ingress configuration, adds support for inheriting the TLS configuration from the Embedded Cluster, and adds a \"restore mode\" for restoring manual backup data, plus many dependency updates and internal improvements.</p>"},{"location":"netbox-enterprise/nbe-release-notes/#110","title":"1.1.0","text":"<p>Simplifies the firewall configuration necessary for installation by making sure all initialization downloads go through our proxy domain.</p>"},{"location":"netbox-enterprise/nbe-release-notes/#106","title":"1.0.6","text":"<p>Adds support for NetBox resource usage adjustment and some improvements to startup time on a first install.</p> <p>It also adds support for backup and restore in the Embedded Cluster and KOTS installs, depending on your environment and license.</p>"},{"location":"netbox-enterprise/nbe-release-notes/#105","title":"1.0.5","text":"<p>Adds support for KOTS installs to scrape Prometheus metrics from NetBox, as well as the embedded PostgreSQL, Redis, and SeaweedFS if they are enabled.</p> <p>Updated to support NetBox v4.0.9, and includes additional bug fixes and startup time improvements.</p>"},{"location":"netbox-enterprise/nbe-release-notes/#104","title":"1.0.4","text":"<p>Adds OWASP password complexity validation to NetBox, and includes dependency updates.</p>"},{"location":"netbox-enterprise/nbe-release-notes/#103","title":"1.0.3","text":"<p>Fixes issues with preflight checks, and includes minor dependency updates.</p>"},{"location":"netbox-enterprise/nbe-release-notes/#102","title":"1.0.2","text":"<p>Provides a number of dependency updates and bug fixes, and includes initial support for backups of built-in Redis and PostgreSQL.</p>"},{"location":"netbox-enterprise/nbe-release-notes/#101","title":"1.0.1","text":"<p>Provides bug fixes encountered during the initial rollout of the NetBox Enterprise application.</p>"},{"location":"netbox-enterprise/nbe-release-notes/#100","title":"1.0.0","text":"<p>Provides final cleanup of the Beta stream in preparation for the wider release.</p> <p>Provides a number of internal changes, and includes fixes for an issue where annotations could render improperly and cause problems with upgrades. Updated to support NetBox v4.0.7.</p>"},{"location":"netbox-enterprise/nbe-tls-ingress/","title":"TLS and Ingress: Accessing NetBox Enterprise","text":""},{"location":"netbox-enterprise/nbe-tls-ingress/#embedded-cluster-installs","title":"Embedded Cluster Installs","text":""},{"location":"netbox-enterprise/nbe-tls-ingress/#ingress","title":"Ingress","text":"<p>The Embedded Cluster provides its own ingress controller. No additional configuration is required to reach NetBox on HTTP and HTTPS.</p>"},{"location":"netbox-enterprise/nbe-tls-ingress/#tls","title":"TLS","text":""},{"location":"netbox-enterprise/nbe-tls-ingress/#configuration","title":"Configuration","text":"<p>When you first install the Embedded Cluster and log into the Admin Console, it asks you to configure the TLS certificate. By default, it will generate a self-signed certificate, but you are able to instead upload private key and certificate chain files.</p> <p>This key and certificate chain are used for any TLS connections to the Embedded Cluster, whether it's the Admin Console (on port 30000) or the main NetBox interface (on port 443).</p>"},{"location":"netbox-enterprise/nbe-tls-ingress/#key-replacementrotation","title":"Key Replacement/Rotation","text":"<p>If you configured your Admin Console to use a self-signed certificate on install and wish to replace it with your own key, or if you have an existing custom key that needs rotation, you can follow these steps to do so.</p> <p>Note</p> <p>Ensure you have your private key and a full certificate chain in PEM format. If you're using Let's Encrypt, this will be the <code>privkeyXX.pem</code> and <code>fullchainXX.pem</code> files. For other certificate providers, consult their documentation.</p> <p>First, access the Embedded Cluster's shell:</p> <pre><code>/var/lib/embedded-cluster/bin/netbox-enterprise shell\n</code></pre> <p>Then, delete the old secret and create the new one, providing the path to your chain and key files:</p> <pre><code>kubectl -n kotsadm delete secret kotsadm-tls &amp;&amp; \\\nkubectl -n kotsadm create secret tls kotsadm-tls --cert=/path/to/cert.pem --key=/path/to/key.pem\n</code></pre> <p>Finally, delete the proxy and ingress pods, so they relaunch with the new configuration:</p> <pre><code>NGINX_POD=\"$(kubectl -n ingress-nginx get pods --selector='app.kubernetes.io/name=ingress-nginx' -o name)\"\nPROXY_POD=\"$(kubectl -n kotsadm get pods --selector='app==kurl-proxy-kotsadm' -o name)\"\nkubectl -n ingress-nginx delete \"${NGINX_POD}\" &amp;&amp; \\\nkubectl -n kotsadm delete \"${PROXY_POD}\"\n</code></pre>"},{"location":"netbox-enterprise/nbe-tls-ingress/#kots-installs","title":"KOTS Installs","text":""},{"location":"netbox-enterprise/nbe-tls-ingress/#ingress_1","title":"Ingress","text":"<p>Since NetBox Enterprise will be installed into an existing cluster when using a KOTS install, it is expected that ingress (and TLS configuration) will be provided by your environment.</p> <p>By default, NetBox Enterprise publishes an <code>Ingress</code> resource which is picked up automatically by a Kubernetes ingress controller.</p>"},{"location":"netbox-enterprise/nbe-tls-ingress/#tls_1","title":"TLS","text":"<p>As long as your ingress controller provides a TLS endpoint, there are no special changes necessary in the NetBox Enterprise configuration.</p> <p>For example, if you are using the <code>ingress-nginx</code> controller Helm chart, your NetBox instance will be available on HTTP and HTTPS if you set a default certificate like so:</p> values.yaml<pre><code>controller:\n  service:\n    type: NodePort\n    nodePorts:\n      http: \"80\"\n      https: \"443\"\n    extraArgs:\n      default-ssl-certificate: \"&lt;NAMESPACE&gt;/&lt;SECRETNAME&gt;\"\n</code></pre> <p>The <code>default-ssl-certificate</code> line should point to the cluster location of your secret containing the certificate and key information, tagged with the type <code>kubernetes.io/tls</code>. For details, see the official Kubernetes documentation.</p>"},{"location":"netbox-enterprise/nbe-troubleshooting/","title":"Advanced Tools and Troubleshooting","text":"<p>NetBox Enterprise is designed to harness the power of Kubernetes while minimizing the amount of work the average person needs to manage it. However, sometimes it's still useful or necessary to peek under the hood.</p>"},{"location":"netbox-enterprise/nbe-troubleshooting/#applications","title":"Applications","text":"<p>The following applications are used for various facets of administration:</p> <ul> <li>kubectl*: CLI for interacting with clusters.</li> <li>preflight*: CLI for manually running preflight validation checks.   Install by running: <code>curl https://krew.sh/preflight | bash</code></li> <li>support-bundle*: CLI for manually generating support bundles.   Install by running: <code>curl https://krew.sh/support-bundle | bash</code></li> <li>k9s: a TUI for managing and viewing cluster resources.</li> </ul> <p>* provided by the Embedded Cluster install</p>"},{"location":"netbox-enterprise/nbe-troubleshooting/#accessing-your-cluster-from-the-command-line","title":"Accessing Your Cluster from the Command Line","text":""},{"location":"netbox-enterprise/nbe-troubleshooting/#embedded-cluster","title":"Embedded Cluster","text":"<p>If you are running the Embedded Cluster, you will need to first execute a command to get a shell environment that knows how to interact with it.  To do this, run:</p> <pre><code>/var/lib/embedded-cluster/bin/netbox-enterprise shell\n</code></pre>"},{"location":"netbox-enterprise/nbe-troubleshooting/#kots-install","title":"KOTS Install","text":"<p>If you are running your own cluster and have installed using KOTS, make sure you have <code>kubectl</code> in your <code>PATH</code> and that it is able to access your cluster.</p> <p>The specifics will depend on the type of cluster and where you are accessing it from.</p>"},{"location":"netbox-enterprise/nbe-troubleshooting/#accessing-your-cluster-from-the-web","title":"Accessing Your Cluster from the Web","text":""},{"location":"netbox-enterprise/nbe-troubleshooting/#embedded-cluster_1","title":"Embedded Cluster","text":"<p>On the embedded cluster, the admin console is always available at <code>https://your-cluster-host-or-ip:30000/</code></p>"},{"location":"netbox-enterprise/nbe-troubleshooting/#kots-install_1","title":"KOTS Install","text":"<p>To access the admin console in a KOTS install, run:</p> <pre><code>kubectl kots admin-console --namespace netbox-enterprise\n</code></pre> <p>This will create a port-forward into the cluster and provide you with a link to reach the console.</p>"},{"location":"netbox-enterprise/nbe-troubleshooting/#generating-a-support-bundle","title":"Generating a Support Bundle","text":""},{"location":"netbox-enterprise/nbe-troubleshooting/#command-line","title":"Command-Line","text":"<p>Access your cluster from the shell.  If you haven't installed the <code>support-bundle</code> package, do so now.</p> <p>Run: <pre><code>kubectl support-bundle /var/lib/embedded-cluster/support/host-support-bundle.yaml --load-cluster-specs\n</code></pre></p> <p>This will run a series of tests and provide a short summary of what it found, much like the preflights that run during install and when deploying. When complete, the TUI will display, like so: </p> <p>Typing <code>s</code> to save will save a short summary <code>.txt</code> file of the output you can see in the TUI. Typing <code>q</code> to quit will quit without saving the summary. In both cases, a <code>.tar.gz</code> support bundle will also be created in the current directory. This file can be used by NetBox Labs to troubleshoot your system.</p>"},{"location":"netbox-extensions/branching/","title":"NetBox Branching","text":"<p>NetBox is the world's leading source of truth for network infrastructure, featuring an extensive and complex data model. But sometimes it can be challenging to orchestrate changes, especially when working within a large team. This plugin introduces a new paradigm for NetBox to help overcome these challenges: branching.</p> <p>If you're familiar with git or similar version control systems, the concept of branching should be familiar. Essentially, this plugin allows you to make copies of NetBox's data model and alter them independently. Your changes will be reflected only within the branch you're working on, until you decide to merge your branch into the main data model.</p> <p>This allows you and your colleagues to stage changes within isolated environments and avoid interfering with one another's work or pushing changes to the network prematurely. Each branch can be synchronized as needed to keep up to date with external changes, and merged when needed.</p>"},{"location":"netbox-extensions/branching/#features","title":"Features","text":"<ul> <li> <p>Users can create new branches and switch between them seamlessly while navigating the web UI.</p> </li> <li> <p>Each branch exists in isolation from its peers: Changes made within one branch won't affect any other branches.</p> </li> <li> <p>Standard NetBox permissions are employed to control which users can perform branch operations.</p> </li> <li> <p>Branches can be created, synchronized, merged, reverted, and deleted through the REST API.</p> </li> <li> <p>No external dependencies! This plugin requires only NetBox v4.1 or later and a conventional PostgreSQL database (v12.0 or later).</p> </li> </ul>"},{"location":"netbox-extensions/branching/#terminology","title":"Terminology","text":"<ul> <li> <p>Main is shorthand for the primary NetBox state. Any changes made outside the context of a specific branch are made here.</p> </li> <li> <p>The creation, modification, or deletion of an object is a change.</p> </li> <li> <p>A branch is an independent copy of the NetBox data model which diverges from main at a set point in time. Any changes to main after that time will not be reflected in the branch. Likewise, changes made within the branch will not be reflected in main.</p> </li> <li> <p>Branches are provisioned automatically upon creation. The initial state of a branch is identical to the state of main at the time it was provisioned. </p> </li> <li> <p>Changes in main can be synchronized at any time into a branch. Branches are independent of one another: Changes must be synchronized into each branch individually. This ensures complete isolation among branches.</p> </li> <li> <p>Once the work within a branch has been completed, it can be merged into main. Once a branch has been merged, it is generally no longer used.</p> </li> <li> <p>Merged changes can be reverted provided the branch has not yet been deleted. This effectively replays the changes in reverse order to undo the relevant changes.</p> </li> </ul>"},{"location":"netbox-extensions/branching/#workflow","title":"Workflow","text":"<p>The first step is to create a new branch. Upon creation, a background job is automatically queued to provision a dedicated PostgreSQL schema for the branch. When provisioning is complete, the branch's status is updated to \"ready.\"</p> <p>Users can now activate the branch and begin making changes within it. These changes will be contained to the branch, and will not impact main. Likewise, any changes to main will not be reflected in the branch until it has been synchronized by a user. A branch may be synchronized repeatedly to keep it up to date with main over time.</p> <p>Once work in the branch has been completed, it can be merged into main.</p> <pre><code>sequenceDiagram\n    actor User B\n    participant Main\n    participant Branch\n    actor User A\n    Main-&gt;&gt;Branch: Provision new branch\n    User A-&gt;&gt;Branch: Make changes\n    User B-&gt;&gt;Main: Make unrelated changes\n    Main-&gt;&gt;Branch: Synchronize changes\n    User A-&gt;&gt;Branch: Make more changes\n    Branch-&gt;&gt;Main: Merge branch</code></pre> <p>In the event a branch should not have been merged, it can be reverted. Previously merged changes to main will be unwound and the branch will be restored to its pre-merge state. The branch is again marked as ready for additional changes, if needed, and can be merged again.</p> <pre><code>sequenceDiagram\n    participant Main\n    participant Branch\n    actor User A\n    Main-&gt;&gt;Branch: Provision new branch\n    User A-&gt;&gt;Branch: Make changes\n    Branch-&gt;&gt;Main: Merge branch\n    Note left of Main: Error detected!\n    Main-&gt;&gt;Branch: Revert changes\n    User A-&gt;&gt;Branch: Correct error\n    Branch-&gt;&gt;Main: Merge branch</code></pre>"},{"location":"netbox-extensions/branching/#getting-started","title":"Getting Started","text":""},{"location":"netbox-extensions/branching/#database-preparation","title":"Database Preparation","text":"<p>Before installing this plugin, ensure that the PostgreSQL user as which NetBox authenticates has permission to create new schemas in the database. This can be achieved by issuing the following command in the PostgreSQL shell (substituting <code>$database</code> and <code>$user</code> with their respective values):</p> <pre><code>GRANT CREATE ON DATABASE $database TO $user;\n</code></pre>"},{"location":"netbox-extensions/branching/#plugin-installation","title":"Plugin Installation","text":""},{"location":"netbox-extensions/branching/#1-virtual-environment","title":"1. Virtual Environment","text":"<p>The plugin can be installed from PyPI. First, activate the Python virtual environment used by NetBox (which is typically located at <code>/opt/netbox/venv/</code>):</p> <pre><code>source /opt/netbox/venv/bin/activate\n</code></pre> <p>Note</p> <p>You may need to modify the <code>source</code> command above if your virtual environment has been installed in a different location.</p>"},{"location":"netbox-extensions/branching/#2-python-package","title":"2. Python Package","text":"<p>Use <code>pip</code> to install the Python package:</p> <pre><code>pip install netboxlabs-netbox-branching\n</code></pre>"},{"location":"netbox-extensions/branching/#3-enable-plugin","title":"3. Enable Plugin","text":"<p>Add <code>netbox_branching</code> to the end of the <code>PLUGINS</code> list in <code>configuration.py</code>.</p> <pre><code>PLUGINS = [\n    # ...\n    'netbox_branching',\n]\n</code></pre> <p>Warning</p> <p><code>netbox_branching</code> must be the last (or only) plugin in the list. Branching support will not be registered for models provided by any plugin appearing later in the list.</p> <p>Note</p> <p>If there are no plugins already installed, you might need to create this parameter. If so, be sure to define <code>PLUGINS</code> as a list containing the plugin name as above, rather than just the name.</p>"},{"location":"netbox-extensions/branching/#4-configuration","title":"4. Configuration","text":"<p>This plugin employs dynamic schema resolution, which requires that we override two low-level Django settings. First, we'll wrap NetBox's configured <code>DATABASE</code> parameter with <code>DynamicSchemaDict</code> to support dynamic schemas. Second, we'll employ the plugin's custom database router.</p> <p>Create a new file named <code>local_settings.py</code> in the same directory as <code>configuration.py</code>, and add the content below.</p> <pre><code>from netbox_branching.utilities import DynamicSchemaDict\nfrom .configuration import DATABASE\n\n# Wrap DATABASES with DynamicSchemaDict for dynamic schema support\nDATABASES = DynamicSchemaDict({\n    'default': DATABASE,\n})\n\n# Employ our custom database router\nDATABASE_ROUTERS = [\n    'netbox_branching.database.BranchAwareRouter',\n]\n</code></pre>"},{"location":"netbox-extensions/branching/#5-database-migrations","title":"5. Database Migrations","text":"<p>Run the included database migrations:</p> <pre><code>cd /opt/netbox/netbox\n./manage.py migrate\n</code></pre>"},{"location":"netbox-extensions/branching/#known-limitations","title":"Known Limitations","text":"<p>There are currently a few limitations to the functionality provided by this plugin that are worth highlighting. We hope to address these in future releases.</p> <ul> <li> <p>Branches may not persist across minor version upgrades of NetBox. Users are strongly encouraged to merge or remove all open branches prior to upgrading to a new minor release of NetBox (e.g. from v4.1 to v4.2). This is because database migrations introduced by the upgrade will not be applied to branch schemas, potentially resulting in an invalid state. However, it should be considered safe to upgrade to new patch releases (e.g. v4.1.0 to v4.1.1) with open branches.</p> </li> <li> <p>Open branches will not reflect newly installed plugins. Any branches created before installing a new plugin will not be updated to support its models. Note, however, that installing a new plugin will generally not impede the use of existing branches. Users are encouraged to install all necessary plugins prior to creating branches. (This also applies to database migrations introduced by upgrading a plugin.)</p> </li> </ul>"},{"location":"netbox-extensions/branching/changelog/","title":"Change Log","text":""},{"location":"netbox-extensions/branching/changelog/#v051","title":"v0.5.1","text":""},{"location":"netbox-extensions/branching/changelog/#enhancements","title":"Enhancements","text":"<ul> <li>#123 - Introduce template tags for branch action buttons</li> <li>#129 - Implement pre-event signals for branch actions</li> </ul>"},{"location":"netbox-extensions/branching/changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#119 - Fix the dynamic selection of related objects in forms while a branch is active</li> <li>#120 - <code>max_branches</code> config parameter should disregard archived branches</li> </ul>"},{"location":"netbox-extensions/branching/changelog/#v050","title":"v0.5.0","text":""},{"location":"netbox-extensions/branching/changelog/#enhancements_1","title":"Enhancements","text":"<ul> <li>#83 - Add a \"share\" button under object views when a branch is active</li> <li>#84 - Introduce the <code>max_working_branches</code> configuration parameter</li> <li>#88 - Add branching support for NetBox's graphQL API</li> <li>#90 - Introduce the ability to archive &amp; deprovision merged branches without deleting them</li> <li>#97 - Introduce the <code>exempt_models</code> config parameter to disable branching support for plugin models</li> <li>#116 - Disable branching support for applicable core models</li> </ul>"},{"location":"netbox-extensions/branching/changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#81 - Fix event rule triggering for the <code>branch_reverted</code> event</li> <li>#91 - Disregard the active branch (if any) when alerting on changes under object views</li> <li>#94 - Fix branch merging after modifying an object with custom field data</li> <li>#101 - Permit (but warn about) database queries issued before branching support has been initialized</li> <li>#102 - Record individual object actions in branch job logs</li> </ul>"},{"location":"netbox-extensions/branching/changelog/#v040","title":"v0.4.0","text":""},{"location":"netbox-extensions/branching/changelog/#enhancements_2","title":"Enhancements","text":"<ul> <li>#52 - Introduce the <code>max_branches</code> config parameter</li> <li>#71 - Ensure the consistent application of logging messages</li> <li>#76 - Validate required configuration items on initialization</li> </ul>"},{"location":"netbox-extensions/branching/changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#57 - Avoid recording ChangeDiff records for unsupported object types</li> <li>#59 - <code>BranchAwareRouter</code> should consider branching support for model when determining database connection to use</li> <li>#61 - Fix transaction rollback when performing a dry run sync</li> <li>#66 - Capture object representation on ChangeDiff when creating a new object within a branch</li> <li>#69 - Represent null values for ChangeDiff fields consistently in REST API</li> <li>#73 - Ensure all relevant branch diffs are updated when an object is modified in main</li> </ul>"},{"location":"netbox-extensions/branching/changelog/#v031","title":"v0.3.1","text":""},{"location":"netbox-extensions/branching/changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#42 - Fix exception raised when viewing custom scripts</li> <li>#44 - Handle truncated SQL sequence names to avoid exceptions during branch provisioning</li> <li>#48 - Ensure background job is terminated in the event branch provisioning errors</li> <li>#50 - Branch state should remain as \"merged\" after dry-run revert</li> </ul>"},{"location":"netbox-extensions/branching/changelog/#v030","title":"v0.3.0","text":""},{"location":"netbox-extensions/branching/changelog/#enhancements_3","title":"Enhancements","text":"<ul> <li>#2 - Enable the ability to revert a previously merged branch</li> <li>#3 - Require review &amp; acknowledgment of conflicts before syncing or merging a branch</li> <li>#4 - Include a three-way diff summary in the REST API representation of a modified object</li> <li>#13 - Add a link to the active branch in the branch selector dropdown</li> <li>#15 - Default to performing a \"dry run\" for branch sync &amp; merge</li> <li>#17 - Utilize NetBox's <code>JobRunner</code> class for background jobs</li> <li>#29 - Register a branch column on NetBox's global changelog table</li> <li>#36 - Run the branch provisioning process within an isolated transaction</li> </ul>"},{"location":"netbox-extensions/branching/changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#10 - Fix branch merge failure when deleted object was modified in another branch</li> <li>#11 - Fix quick search functionality for branch diffs tab</li> <li>#16 - Fix support for many-to-many assignments</li> <li>#24 - Correct the REST API schema for the sync, merge, and revert branch endpoints</li> <li>#30 - Include only unmerged branches with relevant changes in object view notifications</li> <li>#31 - Prevent the deletion of a branch in a transitional state</li> </ul>"},{"location":"netbox-extensions/branching/changelog/#v020","title":"v0.2.0","text":"<ul> <li>Initial private release</li> </ul>"},{"location":"netbox-extensions/branching/configuration/","title":"Configuration Parameters","text":""},{"location":"netbox-extensions/branching/configuration/#exempt_models","title":"<code>exempt_models</code>","text":"<p>Default: <code>[]</code> (empty list)</p> <p>A list of models provided by other plugins which should be exempt from branching support. (Only models which support change logging need be listed; all other models are ineligible for branching support.)</p> <p>Warning</p> <p>A model may not be exempted from branching support if it has one or more relationships to models for which branching is supported. Branching must be supported consistently for all inter-related models; otherwise, data corruption can occur. Configure this setting only if you have a specific need to disable branching for certain models provided by plugins.</p> <p>Models must be specified by app label and model name, as such:</p> <pre><code>exempt_models = (\n    'my_plugin.foo',\n    'my_plugin.bar',\n)\n</code></pre> <p>It is also possible to exclude all models from within a plugin by substituting an asterisk (<code>*</code>) for the model name:</p> <pre><code>exempt_models = (\n    'my_plugin.*',\n)\n</code></pre>"},{"location":"netbox-extensions/branching/configuration/#max_working_branches","title":"<code>max_working_branches</code>","text":"<p>Default: None</p> <p>The maximum number of operational branches that can exist simultaneously. This count excludes branches which have been merged or archived.</p>"},{"location":"netbox-extensions/branching/configuration/#max_branches","title":"<code>max_branches</code>","text":"<p>Default: None</p> <p>The maximum total number of branches that can exist simultaneously, including merged branches that have not been deleted. It may be desirable to limit the total number of provisioned branches to safeguard against excessive database size.</p>"},{"location":"netbox-extensions/branching/configuration/#schema_prefix","title":"<code>schema_prefix</code>","text":"<p>Default: <code>branch_</code></p> <p>The string to prefix to the unique branch ID when provisioning the PostgreSQL schema for a branch. Per the PostgreSQL documentation, this string must begin with a letter or underscore.</p> <p>Note that a valid prefix is required, as the randomly-generated branch ID alone may begin with a digit, which would not qualify as a valid schema name.</p>"},{"location":"netbox-extensions/branching/rest-api/","title":"Using the REST API","text":"<p>This plugin includes support for activating and deactivating branches via the REST API in addition to conventional creation, modification, and deletion operations.</p> <p>API Token Required</p> <p>You'll need a valid NetBox REST API token to follow any of the examples shown here. API tokens can be provisioned by navigating to the API tokens list in the user menu.</p>"},{"location":"netbox-extensions/branching/rest-api/#creating-a-branch","title":"Creating a Branch","text":"<p>Branches are created in a manner similar to most objects in NetBox. A <code>POST</code> request (including a valid authentication token) is sent to the <code>branches/</code> API endpoint with the desired attributes, such as name and description:</p> Request<pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://netbox:8000/api/plugins/branching/branches/ \\\n--data '{\"name\": \"Branch 1\", \"description\": \"My new branch\"}'\n</code></pre> Response<pre><code>{\n    \"id\": 2,\n    \"url\": \"http://netbox:8000/api/plugins/branching/branches/2/\",\n    \"display\": \"Branch 1\",\n    \"name\": \"Branch 1\",\n    \"status\": \"new\",\n    \"owner\": {\n        \"id\": 1,\n        \"url\": \"http://netbox:8000/api/users/users/1/\",\n        \"display\": \"admin\",\n        \"username\": \"admin\"\n    },\n    \"description\": \"My new branch\",\n    \"schema_id\": \"td5smq0f\",\n    \"last_sync\": null,\n    \"merged_time\": null,\n    \"merged_by\": null,\n    \"comments\": \"\",\n    \"tags\": [],\n    \"custom_fields\": {},\n    \"created\": \"2024-08-12T17:07:46.196956Z\",\n    \"last_updated\": \"2024-08-12T17:07:46.196970Z\"\n}\n</code></pre> <p>Once a new branch has been created, it will be provisioned automatically, just as when one is created via the web UI. The branch's status will show \"ready\" when provisioning has completed.</p> <p>Once provisioned, branches can be modified and deleted via the <code>/api/plugins/branching/branches/&lt;id&gt;/</code> endpoint, similar to most objects in NetBox.</p>"},{"location":"netbox-extensions/branching/rest-api/#activating-a-branch","title":"Activating a Branch","text":"<p>Unlike the web UI, where a user's selected branch remains active until it is changed, the desired branch must be specified with each REST API request. This is accomplished by including the <code>X-NetBox-Branch</code> HTTP header specifying the branch's schema ID.</p> <pre><code>X-NetBox-Branch: $SCHEMA_ID\n</code></pre> <p>Schema IDs</p> <p>The schema ID for a branch can be found in its REST API representation or on its detail view in the web UI. This is a pseudorandom eight-character alphanumeric identifier generated automatically when a branch is created. Note that the value passed to the HTTP header does not include the <code>branch_</code> prefix, which comprises part of the schema's name in the underlying database.</p> <p>The example below returns all site objects that exist within the branch with schema ID <code>td5smq0f</code>:</p> Request<pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\n-H \"X-NetBox-Branch: td5smq0f\" \\\nhttp://netbox:8000/api/dcim/sites/\n</code></pre> <p>The branch is effectively \"deactivated\" for future API requests by simply omitting the header.</p> <p>Note</p> <p>The <code>X-NetBox-Branch</code> header is required only when making changes to NetBox objects within the context of an active branch. It is not required when creating, modifying, or deleting a branch itself.</p>"},{"location":"netbox-extensions/branching/rest-api/#syncing-merging-branches","title":"Syncing &amp; Merging Branches","text":"<p>Several REST API endpoints are provided to handle synchronizing, merging, and reverting branches:</p> Endpoint Description <code>/api/plugins/branching/branches/&lt;id&gt;/sync/</code> Synchronize changes from main to the branch <code>/api/plugins/branching/branches/&lt;id&gt;/merge/</code> Merge a branch into main <code>/api/plugins/branching/branches/&lt;id&gt;/revert/</code> Revert a previously merged branch <p>To synchronize updates from main into a branch, send a <code>POST</code> request to the desired branch's <code>sync/</code> endpoint.</p> <p>This endpoint requires a <code>commit</code> argument: Setting this to <code>false</code> effects a dry-run, where the changes to the branch are automatically rolled back at the end of the job. (This can be helpful to check for potential errors before committing to a set of changes.)</p> Request<pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://netbox:8000/api/plugins/branching/branches/2/sync/ \\\n--data '{\"commit\": true}'\n</code></pre> <p>If successful, this will return data about the background job that has been enqueued to handle the synchronization of data. This job can be queried to determine the progress of the synchronization.</p> Response<pre><code>{\n    \"id\": 4,\n    \"url\": \"http://netbox:8000/api/core/jobs/4/\",\n    \"display_url\": \"http://netbox:8000/core/jobs/4/\",\n    \"display\": \"f0c6dea2-d5bb-4683-851e-2ac705510af4\",\n    \"object_type\": \"netbox_branching.branch\",\n    \"object_id\": 2,\n    \"name\": \"Sync branch\",\n    \"status\": {\n        \"value\": \"pending\",\n        \"label\": \"Pending\"\n    },\n    \"created\": \"2024-08-12T17:27:57.448405Z\",\n    \"scheduled\": null,\n    \"interval\": null,\n    \"started\": null,\n    \"completed\": null,\n    \"user\": {\n        \"id\": 1,\n        \"url\": \"http://netbox:8000/api/users/users/1/\",\n        \"display\": \"admin\",\n        \"username\": \"admin\"\n    },\n    \"data\": null,\n    \"error\": \"\",\n    \"job_id\": \"f0c6dea2-d5bb-4683-851e-2ac705510af4\"\n}\n</code></pre> <p>This same pattern can be followed to merge and revert branches via their respective API endpoints, listed above.</p>"},{"location":"netbox-extensions/branching/models/branch/","title":"Branches","text":"<p>A branch represents a divergent state from the main database.</p>"},{"location":"netbox-extensions/branching/models/branch/#fields","title":"Fields","text":""},{"location":"netbox-extensions/branching/models/branch/#name","title":"Name","text":"<p>The branch's unique name.</p>"},{"location":"netbox-extensions/branching/models/branch/#owner","title":"Owner","text":"<p>The NetBox user who created the branch.</p>"},{"location":"netbox-extensions/branching/models/branch/#schema-id","title":"Schema ID","text":"<p>The unique, randomly-generated identifier of the PostgreSQL schema which houses the branch in the database.</p>"},{"location":"netbox-extensions/branching/models/branch/#status","title":"Status","text":"<p>The current status of the branch. This must be one of the following values.</p> Status Description New Not yet provisioned in the database Provisioning A job is running to provision the branch's PostgreSQL schema Ready The branch is healthy and ready to be synchronized or merged Syncing A job is running to synchronize changes from main into the branch Merging A job is running to merge changes from the branch into main Reverting A job is running to revert previously merged changes in main Merged Changes from this branch have been successfully merged into main Archived A merged branch which has been deprovisioned in the database Failed Provisioning the schema for this branch has failed"},{"location":"netbox-extensions/branching/models/branch/#last-sync","title":"Last Sync","text":"<p>The time at which this branch was most recently synchronized with main. This value will be null if the branch has never been synchronized.</p> <p>Tip</p> <p>Reference the <code>synced_time</code> attribute on a branch to return either the branch's <code>last_sync</code> time or, if null, its creation time.</p>"},{"location":"netbox-extensions/branching/models/branch/#merged-time","title":"Merged Time","text":"<p>The time at which the branch was merged into main. This value will be null if the branch has not been merged.</p>"},{"location":"netbox-extensions/branching/models/branch/#merged-by","title":"Merged By","text":"<p>The NetBox user who merged the branch. This value will be null if the branch has not been merged.</p>"},{"location":"netbox-extensions/branching/models/branchevent/","title":"Branch Events","text":"<p>Branch operations, such as syncing and merging, are tracked as events. This record of events serves as a history for each branch.</p>"},{"location":"netbox-extensions/branching/models/branchevent/#fields","title":"Fields","text":""},{"location":"netbox-extensions/branching/models/branchevent/#time","title":"Time","text":"<p>The time at which the event occurred.</p>"},{"location":"netbox-extensions/branching/models/branchevent/#branch","title":"Branch","text":"<p>The branch to which this event pertains.</p>"},{"location":"netbox-extensions/branching/models/branchevent/#user","title":"User","text":"<p>The NetBox user responsible for triggering this event. This field may be null if the event was triggered by an internal process.</p>"},{"location":"netbox-extensions/branching/models/branchevent/#type","title":"Type","text":"<p>The type of event. This must be one of the following:</p> Type Description Provisioned The branch's schema was provisioned in the database Synced Changes from main were synchronized into the branch Merged Changes from the branch were merged into main Reverted Previously merged changes were reverted"},{"location":"netbox-extensions/branching/models/changediff/","title":"Change Diffs","text":"<p>A change diff summarized all changes to particular NetBox object within a branch. It serves to simplify the process of reviewing changes within a branch, and avoids the need to review successive individual changes which might otherwise prove tedious.</p>"},{"location":"netbox-extensions/branching/models/changediff/#fields","title":"Fields","text":""},{"location":"netbox-extensions/branching/models/changediff/#branch","title":"Branch","text":"<p>The branch to which this change pertains.</p>"},{"location":"netbox-extensions/branching/models/changediff/#object","title":"Object","text":"<p>The NetBox object to which this change pertains.</p>"},{"location":"netbox-extensions/branching/models/changediff/#action","title":"Action","text":"<p>The type of change. This must be one of the following:</p> <ul> <li>Created</li> <li>Updated</li> <li>Deleted</li> </ul>"},{"location":"netbox-extensions/branching/models/changediff/#original-data","title":"Original Data","text":"<p>A snapshot of the object prior to the change.</p>"},{"location":"netbox-extensions/branching/models/changediff/#modified-data","title":"Modified Data","text":"<p>A snapshot of the object as it has been modified within the branch.</p>"},{"location":"netbox-extensions/branching/models/changediff/#current-data","title":"Current Data","text":"<p>A snapshot of the object as it currently exists in main.</p>"},{"location":"netbox-extensions/branching/models/changediff/#conflicts","title":"Conflicts","text":"<p>A list of attributes with conflicting values. For example, if a site's status has been changed to different values in both main and in the branch, this will be flagged as a conflict: Adopting the new value from either version would overwrite the other.</p>"},{"location":"netbox-extensions/branching/models/objectchange/","title":"Object Changes","text":"<p>This model serves as a proxy for NetBox's native <code>ObjectChange</code> model.</p> <p>It does not introduce any new database fields. Rather, it implements several functions which assist in the application and reversal of changes from a branch (namely <code>apply()</code> and <code>undo()</code>).</p> <p>Tip</p> <p>There is typically no need to employ this model in external code. Use the NetBox's native <code>ObjectChange</code> model instead.</p>"},{"location":"netbox-extensions/branching/using-branches/creating-a-branch/","title":"Creating a Branch","text":"<p>First, navigate to Branching &gt; Branches to view the list of any existing branches. Click the \"Add\" button at top right to create a new branch.</p> <p>Note</p> <p>If you don't see this button, check that you have permission to create a branch.</p> <p>Pick a unique name for your branch, and add a description if you like.</p> <p></p> <p>When a branch is first created, its status will show as \"new,\" indicating that its corresponding PostgreSQL schema has not yet been provisioned in the database. A background job is queued automatically to perform this task, which my take a few seconds to several minutes, depending on the size of your database.</p> <p>Tip</p> <p>You can check on the status of the provisioning job under the \"Jobs\" tab of the branch view.</p> <p>Once the branch's schema has been provisioned, the status will be updated to \"ready,\" and the branch will become available to activate. You can activate a branch by selecting it from the dropdown menu at top right.</p> <p></p> <p>When a branch is active, any changes you make in NetBox (aside from system resources such as users, permissions, etc.) will be reflected only within that branch. For example, if you create a new site when a branch is active, and then switch back to the main branch, the site will no longer appear. Switch back to the original branch, and the site will appear again.</p>"},{"location":"netbox-extensions/branching/using-branches/creating-a-branch/#branch-details","title":"Branch Details","text":"<p>Within the branch view, you'll notice several tabs. Each of these pertains to a set of changes related to the branch.</p> <ul> <li>Diff - This tab provides a summary of all the objects that have been created, updated, or deleted within the branch.</li> <li>Changes Behind - This tab lists all changes that have been made in main since the branch was last synchronized. Synchronizing the branch will update it to include these changes.</li> <li>Changes Ahead - This tab lists all changes made within your branch. Merging the branch will replicate these changes into main.</li> <li>Merged Changes - Once a branch has been merged, this tab lists all changes that have been applied from the branch. (This tab appears only for merged branches.)</li> </ul>"},{"location":"netbox-extensions/branching/using-branches/reverting-a-branch/","title":"Reverting a Branch","text":"<p>Once a branch has been merged, it is generally no longer needed, and can no longer be activated. However, occasionally you may find it necessary to undo the changes from a branch (due to an error or an otherwise undesired state). This can be done by reverting the branch. Only merged branches can be reverted.</p> <p>Warning</p> <p>Only branches which have not yet been archived or deleted can be reverted. Once a branch's schema has been deprovisioned, it can no longer be reverted.</p> <p>Before reverting a branch, review the changes listed under its \"Merged Changes\" tab. NetBox will attempt to undo these specific changes when reverting the branch.</p> <p>To revert a merged branch, click the \"Revert\" button. You will be asked to review the changes and to acknowledge any conflicts before executing the reversion. Continuing with the merge will queue a background job to carry out reverting the changes. When the job is running, the branch's status will show \"reverting.\"</p> <p>Tip</p> <p>You can check on the status of the reversion job under the \"Jobs\" tab of the branch view.</p> <p>Once the reversion has completed, the branch will be returned to its pre-merge status, and will again be available to activate. Its event history will show that the branch has been reverted.</p>"},{"location":"netbox-extensions/branching/using-branches/reverting-a-branch/#a-note-on-change-logging","title":"A Note on Change Logging","text":"<p>Reverting a merged branch does not erase any records from the global change log. The original changes resulting from the initial branch merge will be retained, and new change records signifying the inverse of those changes will be added. So, if you're hoping to cover your tracks after doing something foolish, reverting a branch won't help you. But it does provide a convenient path for backing out an undesirable change.</p> <p>For example, suppose you made three changes within a branch before merging it:</p> <ol> <li>Create site A</li> <li>Change the description of device B from \"foo\" to \"bar\"</li> <li>Delete tenant C</li> </ol> <p>Reverting the branch will apply the following changes, in this order:</p> <ol> <li>Create tenant C with its original attributes</li> <li>Change the description of device B from \"bar\" to \"too\"</li> <li>Delete site A</li> </ol> <p>After reverting the branch, the global change log will include a record for each of the six discrete changes.</p>"},{"location":"netbox-extensions/branching/using-branches/syncing-merging/","title":"Syncing &amp; Merging Changes","text":""},{"location":"netbox-extensions/branching/using-branches/syncing-merging/#syncing-a-branch","title":"Syncing a Branch","text":"<p>Synchronizing a branch replicates all recent changes from main into the branch. These changes can be reviewed under the \"Changes Behind\" tab under the branch view.</p> <p>To synchronize a branch, click the \"Sync\" button. (If this button is not visible, verify that the branch status shows \"ready\" and that you have permission to synchronize the branch.)</p> <p>While a branch is being synchronized, its status will show \"synchronizing.\"</p> <p>Tip</p> <p>You can check on the status of the syncing job under the \"Jobs\" tab of the branch view.</p>"},{"location":"netbox-extensions/branching/using-branches/syncing-merging/#merging-a-branch","title":"Merging a Branch","text":"<p>Merging a branch replicates all its changes into main, and updates the branch's status to \"merged.\" These changes can be reviewed under the \"Changes Ahead\" tab under the branch view. Typically, once a branch has been merged, it is no longer used.</p> <p>To merge a branch, click the \"Merge\" button. (If this button is not visible, verify that the branch status shows \"ready\" and that you have permission to merge the branch.)</p> <p>While a branch is being merged, its status will show \"merging.\"</p> <p>Tip</p> <p>You can check on the status of the merging job under the \"Jobs\" tab of the branch view.</p> <p>Once a branch has been merged, it can be reverted, archived, or deleted. Archiving a branch removes its associated schema from the PostgreSQL database to deallocate space. An archived branch cannot be restored, however the branch record is retained for future reference.</p>"},{"location":"netbox-extensions/branching/using-branches/syncing-merging/#dealing-with-conflicts","title":"Dealing with Conflicts","text":"<p>In the event an object has been modified in both your branch and in main in a diverging manner, this will be flagged as a conflict. For example, if both you and another user have modified the description of an interface to two different values in main and in the branch, this represents a conflict.</p> <p></p> <p>The good news is that you will be able to proceed with synchronizing or merging your branch even if conflicts exist, however you will need to acknowledge each such conflict to ensure that overwriting the relevant data in your branch with the data from main is acceptable. Do this by selecting each conflict before continuing with the merge.</p> <p>Alternatively, if the conflicting changes are problematic, you can go back and make the necessary changes in main to avoid overwriting data within your branch.</p>"},{"location":"netbox-extensions/branching/using-branches/syncing-merging/#dry-runs","title":"Dry Runs","text":"<p>By default, NetBox will perform a \"dry run\" when synchronizing or merging a branch. This means that it will replicate all the relevant changes to check for errors before ultimately aborting the change and returning the branch to its original state.  To permanently apply these changes instead, check the \"commit changes\" checkbox.</p>"},{"location":"netbox-extensions/diode/","title":"Diode","text":"<p>Currently in Public Preview</p> <p>The Diode project is currently in Public Preview. Please see NetBox Labs Product and Feature Lifecycle for more details.</p>"},{"location":"netbox-extensions/diode/#overview","title":"Overview","text":"<p>Diode is a NetBox data ingestion service that aims to simplify and enhance the process to add and update network data in NetBox. The guiding principle behind Diode is to make it as easy as possible to get data into NetBox by removing as much burden as possible from the user while shifting that effort to technology.</p> <p>Diode is a sidecar service to NetBox that provides a gRPC/protobuf API designed for ingestion of common NetBox data models. Diode reduces the need to preprocess data to make it conform to the strict object hierarchy imposed by the NetBox data model. This allows data to be sent to NetBox in a more freeform manner, in blocks that are intuitive for network engineers such as by device or by interface. Related information is treated as attributes or properties of these blocks. Diode takes care of the heavy lifting of transforming this data to make it align with NetBox\u2019s structured and comprehensive data model. Diode will create placeholder objects to compensate for missing information, allowing fragmented or incomplete information about the network to be collected.</p>"},{"location":"netbox-extensions/diode/#supported-versions-of-netbox","title":"Supported versions of NetBox","text":"<p>Diode has been tested with NetBox versions 3.7.2 and above.</p>"},{"location":"netbox-extensions/diode/#diode-components","title":"Diode components","text":"<p>There are three required components to the Diode service:</p> <ol> <li>Diode NetBox plugin - This component provides API key management and ORM integration into NetBox for the Diode server. See how to install the Diode plugin.</li> <li>Diode server - This component provides the ingestion and reconciliation services that process the incoming data. See how to run the Diode server.</li> <li>Diode client - This component receives the data to be ingested and forwards that data as gRPC/protobuf to the Diode server. It is implemented as an SDK and can be embedded in scripts and integrations. See how to install the Diode Python SDK.</li> </ol>"},{"location":"netbox-extensions/diode/#additional-resources","title":"Additional resources","text":"<p>Additional resources including example scripts can be found in the NetBox Labs NetBox Learning repository.</p>"},{"location":"netbox-extensions/diode/diode-agent/","title":"Diode Agent","text":"<p>The Diode Agent is a lightweight network device discovery tool that uses NAPALM to streamline data entry into NetBox through the Diode ingestion service. The following is a basic set of instructions to get started using Diode Agent on a local machine.</p>"},{"location":"netbox-extensions/diode/diode-agent/#requirements","title":"Requirements","text":"<p>The Diode NAPALM Agent requires a Python runtime environment and has the following requirements:</p> <ul> <li>Diode service - see the Get started guide</li> <li>Diode SDK - see the Installing the Diode client SDK guide</li> <li>Python 3.10 or greater</li> </ul>"},{"location":"netbox-extensions/diode/diode-agent/#install-the-agent","title":"Install the agent","text":"<p>Clone the agent repository: <pre><code>cd /opt\ngit clone https://github.com/netboxlabs/diode-agent.git\ncd /opt/diode-agent/\n</code></pre></p> <p>Create a Python virtual environment and install the agent: <pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install /opt/diode-agent/diode-napalm-agent --no-cache-dir\n</code></pre></p>"},{"location":"netbox-extensions/diode/diode-agent/#create-a-discovery-configuration-file","title":"Create a discovery configuration file","text":"<p>The agent requires a configuration file to provide an inventory of devices to be discovered. A sample configuration file is provided with the agent. </p> <p>Create a copy of the sample configuration file: <pre><code>cp /opt/diode-agent/diode-napalm-agent/config.sample.yaml /opt/diode-agent/config.yaml\n</code></pre></p> <p>Edit the <code>config.yaml</code> to suit the environment:</p> <ul> <li>The <code>config</code> section needs to be updated to reflect the Diode server environment </li> <li>The <code>data</code> section should include a list of all devices (and their credentials) to be discovered</li> </ul> <pre><code>diode:\n  config:\n    target: grpc://localhost:8081\n    api_key: ${DIODE_API_KEY}\n  policies:\n    discovery_1:\n      config:\n        netbox:\n          site: New York NY\n      data:\n        - hostname: 192.168.0.32\n          username: ${USER}\n          password: admin\n        - driver: eos\n          hostname: 127.0.0.1\n          username: admin\n          password: ${ARISTA_PASSWORD}\n          optional_args:\n            enable_password: ${ARISTA_PASSWORD}\n</code></pre> <p>Tip</p> <p>Variables (using <code>${ENV}</code> syntax) can be referenced in the configuration file from environmental variables or from a provided <code>.env</code> file.</p> <p>Tip</p> <p>The <code>driver</code> device attribute is optional. If not specified, the agent will attempt to find a match from NAPALM supported drivers.</p> <p>Note</p> <p>Detailed information about <code>optional_args</code> can be found in the NAPALM documentation.</p>"},{"location":"netbox-extensions/diode/diode-agent/#supported-network-device-drivers","title":"Supported network device drivers","text":"<p>The default supported drivers are the natively supported NAPALM drivers:</p> <ul> <li>Arista EOS (\"eos\")</li> <li>Cisco IOS (\"ios\")</li> <li>Cisco IOS-XR (\"iosxr\")</li> <li>Cisco NX-OS (\"nxos\")</li> <li>Juniper JunOS (\"junos\")</li> </ul>"},{"location":"netbox-extensions/diode/diode-agent/#run-the-agent","title":"Run the agent","text":"<p>The agent must be run in the Python virtual environment created earlier. To run the agent with the discovery configuration file: <pre><code>diode-napalm-agent -c config.yaml\n</code></pre></p>"},{"location":"netbox-extensions/diode/diode-agent/#verify","title":"Verify","text":"<p>The Diode agent is successfully installed if the command <code>diode-napalm-agent</code> returns: <pre><code>usage: diode-napalm-agent [-h] [-V] -c config.yaml [-e .env] [-w N]\n\nDiode Agent for NAPALM\n\noptions:\n  -h, --help            show this help message and exit\n  -V, --version         Display Diode Agent, NAPALM and Diode SDK versions\n  -c config.yaml, --config config.yaml\n                        Agent yaml configuration file\n  -e .env, --env .env   File containing environment variables\n  -w N, --workers N     Number of workers to be used\n</code></pre></p>"},{"location":"netbox-extensions/diode/diode-client/","title":"Installing the Diode client SDK","text":"<p>The Diode SDK is a Python library for sending data to the Diode server over gRPC/protbuf for ingestion in to NetBox.</p>"},{"location":"netbox-extensions/diode/diode-client/#requirements","title":"Requirements","text":"<p>The Diode SDK requires Python version 3.10 or greater.</p>"},{"location":"netbox-extensions/diode/diode-client/#install-the-diode-sdk","title":"Install the Diode SDK","text":"<p>Create a virtual environment and activate it:</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre> <p>Upgrade pip:</p> <pre><code>python3 -m pip install --upgrade pip\n</code></pre> <p>Install the SDK package:</p> <pre><code>pip install netboxlabs-diode-sdk\n</code></pre>"},{"location":"netbox-extensions/diode/diode-client/#configure-the-client","title":"Configure the client","text":"<p>Set the following environment variable with the <code>DIODE_API_KEY</code> API key from the plugin installation:</p> <pre><code>export DIODE_API_KEY=&lt;API key from Diode plugin installation&gt;\n</code></pre>"},{"location":"netbox-extensions/diode/diode-client/#verify","title":"Verify","text":"<p>The Diode client is successfully installed if the <code>pip freeze</code> command returns:</p> <p><pre><code>pip freeze | grep diode\n</code></pre> <pre><code>netboxlabs-diode-sdk==0.1.0\n</code></pre></p>"},{"location":"netbox-extensions/diode/diode-client/#next-step","title":"Next step","text":"<p>The next step is to explore and download example Diode scripts or to install and run the Diode discovery agent.</p>"},{"location":"netbox-extensions/diode/diode-get-started/","title":"Get started","text":""},{"location":"netbox-extensions/diode/diode-get-started/#components","title":"Components","text":"<p>Diode runs as a sidecar service to NetBox and can run anywhere with network connectivity to NetBox. To get started, the following components need to be installed and running:</p> <ol> <li>Installing the Diode plugin - installed on the NetBox host</li> <li>Running the Diode server - installed anywhere where Docker is available</li> <li>Installing the Diode client - installed on the client where data will be ingested</li> </ol>"},{"location":"netbox-extensions/diode/diode-plugin/","title":"Installing the Diode plugin","text":"<p>Info</p> <p>The following instructions assume you have installed NetBox in the <code>/opt/netbox</code> directory. Adjust instructions as necessary if you've installed NetBox in a different directory. </p>"},{"location":"netbox-extensions/diode/diode-plugin/#install-the-plugin","title":"Install the plugin","text":"<p>Source the NetBox Python virtual environment:</p> <pre><code>cd /opt/netbox\nsource venv/bin/activate\n</code></pre> <p>Install the plugin in the Python virtual environment:</p> <pre><code>pip install netboxlabs-diode-netbox-plugin\n</code></pre>"},{"location":"netbox-extensions/diode/diode-plugin/#configure-netbox","title":"Configure NetBox","text":"<p>Edit the NetBox <code>configuration.py</code> file and add the <code>netbox_diode_plugin</code> to the <code>PLUGINS</code> list. The default location for this file is <code>/opt/netbox/netbox/netbox/configuration.py</code>.</p> <pre><code>PLUGINS = [\n    \"netbox_diode_plugin\",\n]\n</code></pre> <p>Restart NetBox to load the plugin:</p> <pre><code>sudo systemctl restart netbox netbox-rq\n</code></pre>"},{"location":"netbox-extensions/diode/diode-plugin/#configure-the-plugin","title":"Configure the plugin","text":"<p>Diode requires three API keys that must be passed as environment variables to function. These API keys are random 40 character long alphanumeric strings and can be generated and set to the appropriate environment variables with the following commands:</p> <pre><code># API key for the Diode service to interact with NetBox\nexport DIODE_TO_NETBOX_API_KEY=$(head -c20 &lt;/dev/urandom|xxd -p); env | grep DIODE_TO_NETBOX_API_KEY\n# API key for the NetBox service to interact with Diode\nexport NETBOX_TO_DIODE_API_KEY=$(head -c20 &lt;/dev/urandom|xxd -p); env | grep NETBOX_TO_DIODE_API_KEY\n# API key for Diode SDKs to ingest data into Diode\nexport DIODE_API_KEY=$(head -c20 &lt;/dev/urandom|xxd -p); env | grep DIODE_API_KEY\n</code></pre> <p>Warning</p> <p>Store the API key strings in a safe place as they will be needed to configure the Diode server</p> <p>Run migrations to configure the plugin to use generated API keys:</p> <pre><code>cd /opt/netbox/netbox\n./manage.py migrate netbox_diode_plugin\n</code></pre>"},{"location":"netbox-extensions/diode/diode-plugin/#verify","title":"Verify","text":"<p>The plugin is successfully installed and configured:</p> <ul> <li>The NetBox Labs DIODE plugin is visible in the right-hand navigation bar</li> <li>Three NetBox users and three corresponding API keys have been created:<ul> <li><code>DIODE</code></li> <li><code>DIODE_TO_NETBOX</code></li> <li><code>NETBOX_TO_DIODE</code></li> </ul> </li> </ul>"},{"location":"netbox-extensions/diode/diode-plugin/#next-step","title":"Next step","text":"<p>The next step is to configure and run the Diode server</p>"},{"location":"netbox-extensions/diode/diode-server/","title":"Running the Diode server","text":""},{"location":"netbox-extensions/diode/diode-server/#requirements","title":"Requirements","text":"<p>The Diode server requires a Docker environment (and <code>docker compose</code>), version 27.0.3 or above.</p>"},{"location":"netbox-extensions/diode/diode-server/#configure-the-diode-server","title":"Configure the Diode server","text":"<p>The Diode server is configured using a configuration file and an environment file:</p> <ul> <li><code>docker-compose.yml</code> - configures and run the Diode server docker containers</li> <li><code>.env</code> - stores the specific environmental settings for the environmnet</li> </ul> <p>In a clean directory:</p> <pre><code>mkdir /opt/diode\ncd /opt/diode\n</code></pre> <p>Download the default <code>docker-compose.yml</code> and <code>.env</code> files from the Diode project repository:</p> <pre><code>curl -o docker-compose.yml https://raw.githubusercontent.com/netboxlabs/diode/develop/diode-server/docker/docker-compose.yaml\ncurl -o .env https://raw.githubusercontent.com/netboxlabs/diode/develop/diode-server/docker/sample.env\n</code></pre> <p>Edit the <code>.env</code> to match the environment:</p> <ul> <li><code>NETBOX_DIODE_PLUGIN_API_BASE_URL</code>: URL for NetBox, appended with <code>/api/plugins/diode</code></li> <li><code>DIODE_TO_NETBOX_API_KEY</code>: API key from Diode plugin installation</li> <li><code>DIODE_API_KEY</code>: API key from Diode plugin installation</li> <li><code>NETBOX_TO_DIODE_API_KEY</code>: API key from Diode plugin installation</li> </ul>"},{"location":"netbox-extensions/diode/diode-server/#run-the-diode-server","title":"Run the Diode server","text":"<p>From the <code>/opt/diode</code> directory, download and run the Diode server containers:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"netbox-extensions/diode/diode-server/#verify","title":"Verify","text":"<p>The Diode server is successfully configured and running if the command <code>docker compose ps</code> returns the following four containers with a <code>STATUS</code> of <code>Up</code>:</p> <p><pre><code>docker compose ps\n</code></pre> <pre><code>NAME                       IMAGE                                STATUS\ndiode-diode-ingester-1     netboxlabs/diode-ingester:latest     Up \ndiode-diode-reconciler-1   netboxlabs/diode-reconciler:latest   Up \ndiode-diode-redis-1        redis/redis-stack-server:latest      Up \ndiode-ingress-nginx-1      nginx:latest                         Up \n</code></pre></p>"},{"location":"netbox-extensions/diode/diode-server/#next-step","title":"Next step","text":"<p>The next step is to install the Diode client</p>"},{"location":"netbox-integrations/netbox-ansible-collection/","title":"NetBox Integrations","text":""},{"location":"netbox-integrations/netbox-ansible-collection/#netbox-ansible-collection-quick-start","title":"NetBox Ansible Collection - Quick Start","text":"<p>A short guide to getting started with the Ansible Collection for Netbox. </p> <p></p> <p>The collection is available from Ansible Galaxy, and NetBox Labs and Red Hat customers can access the certified and supported collection, via Ansible Automation Hub. This doc is based on the Galaxy installation and shows how to use the collection from the command line, rather than from within Ansible Automation Hub.</p>"},{"location":"netbox-integrations/netbox-ansible-collection/#code-examples","title":"Code Examples","text":"<p>All code used in the examples below can be found in the NetBox Learning git repository, in the directory <code>netbox-ansible-collection-quick-start</code>.</p>"},{"location":"netbox-integrations/netbox-ansible-collection/#collection-overview","title":"Collection Overview","text":"<p>The NetBox Ansible project provides an Ansible collection for interacting with NetBox, the leading solution for modeling and documenting modern networks. By combining the traditional disciplines of IP address management (IPAM) and datacenter infrastructure management (DCIM) with powerful APIs and extensions, NetBox provides the ideal \"source of truth\" to power network automation.</p> <p>This Ansible collection consists of a set of modules to define the intended network state in NetBox, along with plugins to drive automation of the network using data from NetBox.</p>"},{"location":"netbox-integrations/netbox-ansible-collection/#requirements","title":"Requirements","text":"<ul> <li>You must be running one of the two most recent releases of NetBox</li> <li>A NetBox write-enabled API token when using modules or a read-only token for the <code>nb_lookup</code> and <code>nb_inventory</code> plugins.</li> <li>Python 3.10+</li> <li>Python modules:</li> <li>pytz</li> <li>pynetbox</li> <li>Ansible 2.15+</li> </ul> <p>Note</p> <p>This guide assumes you have a working NetBox installation, populated with some device data of your own. The easiest way to do this is to set up a NetBox Cloud Free Plan instance, and you can be up an running in seconds. The NetBox instance used in this example has 2 sites with some devices already added:</p> <p></p>"},{"location":"netbox-integrations/netbox-ansible-collection/#getting-started-with-the-collection","title":"Getting Started with the Collection","text":""},{"location":"netbox-integrations/netbox-ansible-collection/#installation-and-setup","title":"Installation and Setup","text":"<ol> <li>Clone the Git repo and change into the <code>netbox-ansible-collection-quick-start</code> directory:     <pre><code>git clone https://github.com/netboxlabs/netbox-learning.git\ncd netbox-learning/netbox-ansible-collection-quick-start\n</code></pre></li> <li>Create and activate a Python 3 virtual environment:     <pre><code>python3 -m venv ./venv\nsource venv/bin/activate\n</code></pre></li> <li>Install Python Modules and Ansible    <pre><code>pip install pytz\npip install pynetbox\npip install ansible\n</code></pre></li> <li>Install the NetBox Ansible Collection.</li> </ol> <p>Before using this collection, you need to install it with the Ansible Galaxy command-line tool:</p> <p><pre><code>ansible-galaxy collection install netbox.netbox\n</code></pre> 5. Set environment variables for your NetBox API token and URL of your NetBox instance:     <pre><code>export NETBOX_API=&lt;YOUR_NETBOX_URL&gt; (note - must include http:// or https://)\nexport NETBOX_TOKEN=&lt;YOUR_NETBOX_API_TOKEN&gt;\n</code></pre></p>"},{"location":"netbox-integrations/netbox-ansible-collection/#use-case-1-netbox-as-a-dynamic-inventory-source-for-ansible","title":"Use Case 1 - NetBox as a Dynamic Inventory Source for Ansible","text":"<p>The Inventory Plugin component of the collection is used to dynamically generate the inventory from NetBox to be used in Ansible playbooks.</p> <p>In the example <code>ansible.cfg</code> file we are specifying that the inventory should be sourced from the file <code>netbox_inv.yml</code>:</p> <pre><code># ansible.cfg\n\n[defaults]\ninventory = ./netbox_inv.yml\n</code></pre> <p>The plugin is highly configurable in terms of defining returned hosts and groupings etc in the inventory, so please consult the docs.</p> <p>In this case we are grouping the returned hosts by the <code>device_roles</code> and <code>sites</code> as defined in the NetBox database:</p> <pre><code> # netbox_inv.yml\n\n plugin: netbox.netbox.nb_inventory\n validate_certs: False\n group_by:\n  - device_roles\n  - sites\n</code></pre> <p>To view a graph of the inventory retrieved from NetBox, you can run the <code>ansible-inventory</code> command and use the <code>-i</code> flag to specify the <code>netbox_inv.yml</code> file as the source, followed by <code>--graph</code>:</p> <pre><code>ansible-inventory -i netbox_inv.yml --graph\n</code></pre> <p>From the returned output we can see that our NetBox instance has returned the data expected grouped the devices by <code>device_roles</code> and <code>sites</code>: <pre><code>@all:\n  |--@device_roles_access:\n  |  |--sw3\n  |  |--sw4\n  |--@device_roles_access_switch:\n  |  |--SWITCH-1\n  |--@device_roles_distribution:\n  |  |--sw1\n  |  |--sw2\n  |--@device_roles_security_appliance:\n  |  |--SEC-APP-1\n  |--@device_roles_wireless_ap:\n  |  |--AP-1\n  |--@sites_cisco_devnet:\n  |  |--sw1\n  |  |--sw2\n  |  |--sw3\n  |  |--sw4\n  |--@sites_meraki_sandbox:\n  |  |--AP-1\n  |  |--SEC-APP-1\n  |  |--SWITCH-1\n  |--@ungrouped:\n</code></pre></p> <p>To list all the devices in the inventory, use the same command, but with the <code>--list</code> suffix: <pre><code>ansible-inventory -i netbox_inv.yml --list\n</code></pre></p> <p>The output below has been shortened to show the inventory data returned for a single device, and all of this can be used in further playbooks to automate operations against the target device:</p> <pre><code>\"sw1\": {\n     \"ansible_host\": \"10.10.20.175\",\n     \"custom_fields\": {\n         \"ccc_device_id\": \"32446e0a-032b-4724-93e9-acbbab47371b\",\n         \"cisco_catalyst_center\": \"sandboxdnac.cisco.com\"\n     },\n     \"device_roles\": [\n         \"distribution\"\n     ],\n     \"device_types\": [\n         \"c9kv-uadp-8p\"\n     ],\n     \"is_virtual\": false,\n     \"local_context_data\": [\n         null\n     ],\n     \"locations\": [],\n     \"manufacturers\": [\n         \"cisco\"\n     ],\n     \"platforms\": [\n         \"ios-xe\"\n     ],\n     \"primary_ip4\": \"10.10.20.175\",\n     \"regions\": [],\n     \"serial\": \"9SB9FYAFA2O\",\n     \"services\": [],\n     \"site_groups\": [],\n     \"sites\": [\n         \"cisco-devnet\"\n     ],\n     \"status\": {\n         \"label\": \"Active\",\n         \"value\": \"active\"\n     },\n     \"tags\": []\n}\n</code></pre> <p>To run a playbook that uses the dynamic inventory, specify the inventory file when you run the playbook:</p> <pre><code>ansible-playbook -i netbox_inv.yml &lt;PLAYBOOK NAME&gt;\n</code></pre> <p>To target hosts or groups from the inventory in your playbook, reference the hosts or groups as normal in the playbook: <pre><code>---\n- name: Playbook using NetBox Inventory Plugin for Ansible\n  hosts: device_roles_distribution, device_roles_access\n</code></pre></p>"},{"location":"netbox-integrations/netbox-ansible-collection/#use-case-2-define-intended-network-state-in-netbox","title":"Use Case 2 - Define Intended Network State in NetBox","text":"<p>Define the intended state of your network in NetBox, by interacting with the NetBox database to define objects and their associated state in the following ways:</p> <ul> <li>Make sure objects exit</li> <li>Update objects if they do exist</li> <li>Remove objects if they do not not exist</li> </ul> <p>For example, to make sure a new aggregate network prefix exists: <pre><code>tasks:\n    - name: Create aggregate within NetBox with only required information\n      netbox.netbox.netbox_aggregate:\n        netbox_url: http://netbox.local\n        netbox_token: thisIsMyToken\n        data:\n          prefix: 192.168.0.0/16\n          rir: Test RIR\n        state: present\n</code></pre></p> <p>The example playbook <code>populate_netbox_ipam.yml</code> will ensure that the <code>RFC1918</code> IPv4 aggregates exist in NetBox, as well as some predefined Prefix and VLAN Roles: <pre><code># populate_netbox_ipam.yml\n\n---\n- name: PLAY 1 - Create RIRs\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  roles:\n    - role: create_rirs\n      tags: rirs\n\n- name: PLAY 2 - Create Aggregates\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  roles:\n    - role: create_aggregates\n      tags: aggregates\n\n- name: PLAY 3 - Create Prefix and VLAN Roles\n  connection: local\n  hosts: localhost\n  gather_facts: False\n\n  roles:\n    - role: create_prefix_and_vlan_roles\n      tags: prefix_and_roles\n</code></pre></p> <p>The playbook is modularized using <code>roles</code>, for example the file <code>roles/create_aggregates/tasks/main.yml</code> loops over the list of aggregates defined in the file <code>roles/create_aggregates/vars/main.yml</code>: <pre><code># roles/create_aggregates/tasks/main.yml\n\n---\n- name: Create Aggregates within NetBox\n  netbox.netbox.netbox_aggregate:\n    netbox_url: \"{{ lookup('ansible.builtin.env', 'NETBOX_API') }}\"\n    netbox_token: \"{{ lookup('ansible.builtin.env', 'NETBOX_TOKEN') }}\"\n    data: \"{{ aggregate }}\"\n    state: present\n  loop: \"{{ ipam_aggregates }}\"\n  loop_control:\n    loop_var: aggregate\n    label: \"{{ aggregate['prefix']}}\"\n</code></pre></p> <pre><code># roles/create_aggregates/vars/main.yml\n---\nipam_aggregates:\n\n  - prefix: 10.0.0.0/8\n    rir: RFC 1918\n\n  - prefix: 172.16.0.0/12\n    rir: RFC 1918\n\n  - prefix: 192.168.0.0/16\n    rir: RFC 1918\n</code></pre> <p>Running the playbook results in the following output:</p> <p><pre><code>ansible-playbook populate_netbox_ipam.yml\n</code></pre> <pre><code>PLAY [PLAY 1 - Create RIRs] ***********************************************************************************************************************************\n\nTASK [create_rirs : Create RIRs] ******************************************************************************************************************************\nok: [localhost] =&gt; (item=RFC 1918)\n\nPLAY [PLAY 2 - Create Aggregates] *****************************************************************************************************************************\n\nTASK [create_aggregates : Create Aggregates within NetBox] ****************************************************************************************************\nok: [localhost] =&gt; (item=10.0.0.0/8)\nok: [localhost] =&gt; (item=172.16.0.0/12)\nok: [localhost] =&gt; (item=192.168.0.0/16)\n\nPLAY [PLAY 3 - Create Prefix and VLAN Roles] ******************************************************************************************************************\n\nTASK [create_prefix_and_vlan_roles : Create Prefix and VLAN Roles within NetBox] ******************************************************************************\nok: [localhost] =&gt; (item=Branch_Data)\nok: [localhost] =&gt; (item=Branch_Voice)\nok: [localhost] =&gt; (item=Branch_WiFi)\nok: [localhost] =&gt; (item=Guest_WiFi)\nok: [localhost] =&gt; (item=Network_Management)\nok: [localhost] =&gt; (item=Point_to_Point)\n\nPLAY RECAP ****************************************************************************************************************************************************\nlocalhost                  : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n</code></pre></p>"},{"location":"netbox-integrations/netbox-ansible-collection/#use-case-3-query-and-return-elements-from-netbox","title":"Use Case 3 - Query and Return Elements from NetBox","text":"<p>Use the Lookup Plugin to query NetBox and return data to drive network automation, such as lists of devices, device configurations, prefixes and IP addresses etc.</p> <p>In the example playbook <code>lookup_site_and_device_data.yml</code> we first of all query the NetBox <code>sites</code> API endpoint and then print a list of all the sites. Then we query the <code>devices</code> API endpoint, filter on the site <code>cisco-devnet</code> and print a list of the devices at that site:</p> <pre><code># lookup_site_and_device_data.yml\n---\n- name: Lookup NetBox Site and Device Data\n  hosts: localhost\n  gather_facts: no\n\n  vars:\n    netbox_url: \"{{ lookup('ansible.builtin.env', 'NETBOX_API') }}\"\n    netbox_token: \"{{ lookup('ansible.builtin.env', 'NETBOX_TOKEN') }}\"\n\n  tasks:\n\n  - name: \"Query NetBox for all sites\"\n    set_fact:\n      sites: \"{{ query('netbox.netbox.nb_lookup', 'sites', api_endpoint=netbox_url, token=netbox_token) }}\"\n\n  - name: \"Print the list of sites\"\n    debug:\n      msg: \"{{ sites | json_query('[*].value.name') }}\"\n\n  - name: \"Query NetBox for devices at the Cisco DevNet Site\"\n    set_fact:\n      devices: \"{{ query('netbox.netbox.nb_lookup', 'devices', api_filter='site=cisco-devnet', api_endpoint=netbox_url, token=netbox_token) }}\"\n\n  - name: \"Print a list of devices at Cisco DevNet Site\"\n    debug:\n      msg: \"{{ devices | json_query('[*].value.name') }}\"\n</code></pre> <p>The playbook run results in the following output:</p> <p><pre><code>ansible-playbook lookup_site_and_device_data.yml\n</code></pre> <pre><code>PLAY [Lookup NetBox Site and Device Data] *********************************************************************************************************************\n\nTASK [Query NetBox for all sites] *****************************************************************************************************************************\nok: [localhost]\n\nTASK [Print the list of sites] ********************************************************************************************************************************\nok: [localhost] =&gt;\n  msg:\n  - Cisco DevNet\n  - Meraki Sandbox\n\nTASK [Query NetBox for devices at the Cisco DevNet Site] ******************************************************************************************************\nok: [localhost]\n\nTASK [Print a list of devices at Cisco DevNet Site] ***********************************************************************************************************\nok: [localhost] =&gt;\n  msg:\n  - sw1\n  - sw2\n  - sw3\n  - sw4\n\nPLAY RECAP ****************************************************************************************************************************************************\nlocalhost                  : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n</code></pre></p>"},{"location":"netbox-integrations/netbox-ansible-collection/#references","title":"References","text":"<ul> <li>Collection on Ansible Galaxy</li> <li>Collection on Ansible Automation Hub</li> <li>Docs for NetBox Inventory Plugin</li> <li>Docs for NetBox Lookup Plugin</li> </ul>"},{"location":"netbox-integrations/pyats/","title":"Getting Started With NetBox, PyATS and Genie","text":"<p>Learn More</p> <p>You can view an on-demand Webinar Getting Started with Network Test Automation: NetBox + pyATS hosted by NetBox Labs. </p>"},{"location":"netbox-integrations/pyats/#code-examples","title":"Code Examples","text":"<p>All code used in the examples below can be found in the NetBox Learning git repository, in the directory <code>netbox-pyats-webinar</code>.</p>"},{"location":"netbox-integrations/pyats/#set-up-and-installation","title":"Set Up and Installation","text":"<ol> <li>Clone the Git repo and change into the <code>netbox-pyats-webinar</code> directory:     <pre><code>git clone https://github.com/netboxlabs/netbox-learning.git\ncd netbox-learning/netbox-pyats-webinar\n</code></pre></li> <li>Create and activate Python 3 virtual environment:     <pre><code>python3 -m venv ./venv\nsource venv/bin/activate\n</code></pre></li> <li>Upgrade pip:     <pre><code>python3 -m pip install --upgrade pip\n</code></pre></li> <li> <p>Install PyATS: </p> <p>As per the official documentation, there are a options to perform a minimal installation (option 1) or a full installation (opton 2).  </p> <p>Option 1 Minimal install that includes the Genie library and that allows you to use the interactive testbed creation command to create your testbed files from NetBox:  <pre><code>pip install pyats[library]\npip install pyats.contrib\n</code></pre></p> <p>Option 2 Full installation that includes all packages and libraries:  <pre><code>pip install pyats[full]\n</code></pre></p> <p>Tip</p> <p>If you are using Zsh on a Mac then you need to quote the install string.</p> <pre><code>pip install \"pyats[full]\"\n</code></pre> <p>Note</p> <p>If you plan to run the example script <code>ospf_neighbor_table.py</code> then you will also need to install the <code>prettytable</code> library with <code>pip install prettytable</code> or you can simply run the command <code>pip install -r requirements.txt</code> to install this along with pyATS, Genie and the <code>contrib</code> library. </p> <p>There is also a PyATS Docker Image. This command will pull down the container if you don't have it locally and drop you into a Bash shell:  <pre><code>docker run -it ciscotestautomation/pyats:latest /bin/bash\n</code></pre></p> </li> </ol>"},{"location":"netbox-integrations/pyats/#lab-network","title":"Lab Network","text":"<p>Our lab network consists of 2 x Cisco CSR100V routers and they are documented in NetBox under the Site <code>PyATS Webinar</code> and are directly connected to each other over port <code>GigabitEthernet2</code> on the <code>192.168.1.0/30</code> subnet. They are both running OSPF, and you can find the the configuration for this in the initial_device_configs.md file: </p> <p></p> <p></p>"},{"location":"netbox-integrations/pyats/#generating-the-testbed-file-dynamically-from-netbox-inventory","title":"Generating The testbed file Dynamically from NetBox Inventory","text":"<p>Option 1 Use the <code>pyats create testbed netbox</code> command to build your testbed file. Note that where a value is prefixed with <code>os.getenv</code> or <code>%ENV</code> then these values are being pulled in from the local environment variables that you need to set with the <code>export</code> command eg. <code>export NETBOX_URL=https://example.cloud.netboxapp.com/</code>, <code>export DEF_PYATS_USER=admin</code>: </p> <pre><code>pyats create testbed netbox \\\n--output testbed.yaml \\\n--netbox-url=${NETBOX_URL} \\\n--user-token=${NETBOX_USER_TOKEN} \\\n--def_user='%ENV{DEF_PYATS_USER}' \\\n--def_pass='%ENV{DEF_PYATS_PASS}' \\\n--url_filter='site=pyats-webinar' \\\n--topology\n</code></pre> <p>In this example we are generating a testbed file called <code>testbed.yaml</code> and filtering NetBox by the site name <code>pyats-webinar</code>. When you hit enter the output will look like this: </p> <p><pre><code>Begin retrieving data from netbox...\nConfiguring testbed default credentials.\nRetrieving associated data for CSR1...\nRetrieving associated data for CSR2...\nTestbed file generated: \ntestbed.yaml \n</code></pre> Option 2 Run the <code>generate_testbed_file.py</code> Python script. Note that where a value is prefixed with <code>os.getenv</code> or <code>%ENV</code> then these values are being pulled in from the local environment variables that you need to set with the <code>export</code> command eg. <code>export NETBOX_URL=https://example.cloud.netboxapp.com/</code>, <code>export DEF_PYATS_USER=admin</code>.</p> <p>In this script we are generating a testbed file called <code>testbed.yaml</code> and filtering NetBox by the site name <code>pyats-webinar</code>, but you could just as easily filter on other fields as in the examples commented out: </p> <pre><code># Description: This script generates a testbed file based on the Netbox data\n#              using the pyATS framework. It uses the Netbox class from the\n#              pyats.contrib.creators.netbox module to create the testbed file.\n\n# Import the necessary libraries\nfrom pyats.contrib.creators.netbox import Netbox\nimport yaml\nimport os\n\n# Define Netbox URL, user token, and default credentials\nnetbox_url = os.getenv('NETBOX_URL')\nuser_token = os.getenv('NETBOX_USER_TOKEN')\ndef_user = '%ENV{DEF_PYATS_USER}'\ndef_pass = '%ENV{DEF_PYATS_PASS}'\nurl_filter = 'site=pyats-webinar'\n# url_filter = 'site_id=68'\n# url_filter = 'site=pyats-webinar&amp;os=ios-xe'\n# url_filter = 'platform=ios-xe'\n\n# Create testbed object and build data structure\nnb_testbed = Netbox(\n    netbox_url=netbox_url,\n    user_token=user_token,\n    def_user=def_user,\n    def_pass=def_pass,\n    url_filter=url_filter,\n    ssl_verify=False,\n    topology=True\n)\n\n# Generate testbed file\ntb = nb_testbed._generate()\ntb_yaml = yaml.dump(tb)\nwith open(\"testbed.yaml\", \"w\") as f:\n    f.write(tb_yaml)\n</code></pre> <p>The resulting testbed file produced by either option will look something like this, depending on your network. Note that as we included the <code>--topology</code> switch the testbed file output includes the interfaces and connections from NetBox also:  <pre><code>devices:\n  CSR1:\n    alias: CSR1\n    connections:\n      cli:\n        ip: 10.90.0.35\n        protocol: ssh\n    credentials:\n      default:\n        password: '%ENV{DEF_PYATS_PASS}'\n        username: '%ENV{DEF_PYATS_USER}'\n    os: iosxe\n    platform: iosxe\n    type: CSR1000V\n  CSR2:\n    alias: CSR2\n    connections:\n      cli:\n        ip: 10.90.0.36\n        protocol: ssh\n    credentials:\n      default:\n        password: '%ENV{DEF_PYATS_PASS}'\n        username: '%ENV{DEF_PYATS_USER}'\n    os: iosxe\n    platform: iosxe\n    type: CSR1000V\ntestbed:\n  credentials:\n    default:\n      password: '%ENV{DEF_PYATS_PASS}'\n      username: '%ENV{DEF_PYATS_USER}'\ntopology:\n  CSR1:\n    interfaces:\n      GigabitEthernet1:\n        alias: CSR1_GigabitEthernet1\n        ipv4: 10.90.0.35/27\n        type: ethernet\n      GigabitEthernet2:\n        alias: CSR1_GigabitEthernet2\n        ipv4: 192.168.1.1/30\n        link: cable_num_34\n        type: ethernet\n      GigabitEthernet3:\n        alias: CSR1_GigabitEthernet3\n        type: ethernet\n      GigabitEthernet4:\n        alias: CSR1_GigabitEthernet4\n        type: ethernet\n      GigabitEthernet5:\n        alias: CSR1_GigabitEthernet5\n        type: ethernet\n  CSR2:\n    interfaces:\n      GigabitEthernet1:\n        alias: CSR2_GigabitEthernet1\n        ipv4: 10.90.0.36/27\n        type: ethernet\n      GigabitEthernet2:\n        alias: CSR2_GigabitEthernet2\n        ipv4: 192.168.1.2/30\n        link: cable_num_34\n        type: ethernet\n      GigabitEthernet3:\n        alias: CSR2_GigabitEthernet3\n        type: ethernet\n      GigabitEthernet4:\n        alias: CSR2_GigabitEthernet4\n        type: ethernet\n      GigabitEthernet5:\n        alias: CSR2_GigabitEthernet5\n        type: ethernet\n</code></pre></p>"},{"location":"netbox-integrations/pyats/#structured-data-vs-unstructured-data","title":"Structured Data Vs Unstructured Data","text":"<p>When you run a command at the CLI of a network device, you get unstructured data back as the response, which is just a blob of text:  <pre><code>CSR1#sh ip interface brief \nInterface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet1       10.0.0.15       YES manual up                    up      \nGigabitEthernet2       192.168.1.1     YES manual up                    up      \nLoopback0              1.1.1.1         YES manual up                    up  \n</code></pre></p> <p>This is great for humans, as we can read this, but a computer cannot understand this data. Also if the next version of the OS you are using makes a change to the way that the output is formatted then you will have a problem and have to re-write your scripts to handle this. This is where the Genie parser comes into play as it will parse the output into structured data. The data is then represented using key/value pairs in JSON format that can be used by a computer: </p> <pre><code>{\n  \"interface\": {\n    \"GigabitEthernet1\": {\n      \"interface_is_ok\": \"YES\",\n      \"ip_address\": \"10.0.0.15\",\n      \"method\": \"manual\",\n      \"protocol\": \"up\",\n      \"status\": \"up\"\n    },\n    \"GigabitEthernet2\": {\n      \"interface_is_ok\": \"YES\",\n      \"ip_address\": \"192.168.1.1\",\n      \"method\": \"manual\",\n      \"protocol\": \"up\",\n      \"status\": \"up\"\n    },\n    \"Loopback0\": {\n      \"interface_is_ok\": \"YES\",\n      \"ip_address\": \"1.1.1.1\",\n      \"method\": \"manual\",\n      \"protocol\": \"up\",\n      \"status\": \"up\"\n    }\n  }\n}\n</code></pre>"},{"location":"netbox-integrations/pyats/#running-your-first-tests-with-the-genie-cli","title":"Running Your First Tests With The Genie CLI","text":""},{"location":"netbox-integrations/pyats/#genie-parsing","title":"Genie Parsing","text":"<p>There are parsers available for a large number of network OS's (not just Cisco), and you can view the complete list here In this example we will run the <code>genie parse</code> command to parse the output of the <code>show ip ospf neighbor</code> command and limit it to just device <code>CSR1</code>: </p> <pre><code>genie parse 'show ip ospf neighbor' --testbed-file testbed.yaml --device CSR1\n  0%|                                                                                                                                                                | 0/1 [00:00&lt;?, ?it/s]{\n  \"interfaces\": {\n    \"GigabitEthernet2\": {\n      \"neighbors\": {\n        \"2.2.2.2\": {\n          \"address\": \"192.168.1.2\",\n          \"dead_time\": \"00:00:34\",\n          \"priority\": 1,\n          \"state\": \"FULL/DR\"\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>This will output the parsed data to your terminal, but if you want to save the output just append the directory you wish to save it to with the <code>--output</code> switch. This will save both the <code>_console</code> file (the unstructured data) and the <code>_parsed</code> file (the structured data), along with the <code>connection_</code> log (the raw output of the full connection process) into the chosen directory:</p> <pre><code>genie parse 'show ip ospf neighbor' --testbed-file testbed.yaml --device CSR1 --output csr1\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:01&lt;00:00,  1.01s/it]\n+==============================================================================+\n| Genie Parse Summary for CSR1                                                 |\n+==============================================================================+\n|  Connected to CSR1                                                           |\n|  -  Log: csr1/connection_CSR1.txt                                            |\n|------------------------------------------------------------------------------|\n|  Parsed command 'show ip ospf neighbor'                                      |\n|  -  Parsed structure: csr1/CSR1_show-ip-ospf-neighbor_parsed.txt             |\n|  -  Device Console:   csr1/CSR1_show-ip-ospf-neighbor_console.txt            |\n|------------------------------------------------------------------------------|\n</code></pre>"},{"location":"netbox-integrations/pyats/#genie-learning","title":"Genie Learning","text":"<p>In this example we will run the <code>genie learn</code> command to learn all about <code>routing</code> and <code>ospf</code> for both devices in our testbed file. We will also save the output into directory called <code>pre-change</code>. Genie will automagically create directories for us if they don't already exist. </p> <p>For reference if you run the <code>genie learn all</code> command then for IOS-XE devices the list of features learned is: </p> <pre><code>acl, arp, bgp, device, dot1x, eigrp, fdb, hsrp, igmp, interface, isis, lag, lisp, lldp, mcast, mld, msdp, nd, ntp, ospf, pim, platform, prefix_list, rip, route_policy, routing, static_routing, stp, terminal, utils, vlan, vrf, vxlan, config\n</code></pre> <pre><code>genie learn routing ospf --testbed-file testbed.yaml --output pre-change  \n\nLearning '['routing', 'ospf']' on devices '['CSR1', 'CSR2']'\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:11&lt;00:00,  5.85s/it]\n+==============================================================================+\n| Genie Learn Summary for device CSR1                                          |\n+==============================================================================+\n|  Connected to CSR1                                                           |\n|  -   Log: pre-change/connection_CSR1.txt                                     |\n|------------------------------------------------------------------------------|\n|  Learnt feature 'routing'                                                    |\n|  -  Ops structure:  pre-change/routing_iosxe_CSR1_ops.txt                    |\n|  -  Device Console: pre-change/routing_iosxe_CSR1_console.txt                |\n|------------------------------------------------------------------------------|\n|  Learnt feature 'ospf'                                                       |\n|  -  Ops structure:  pre-change/ospf_iosxe_CSR1_ops.txt                       |\n|  -  Device Console: pre-change/ospf_iosxe_CSR1_console.txt                   |\n|==============================================================================|\n\n\n+==============================================================================+\n| Genie Learn Summary for device CSR2                                          |\n+==============================================================================+\n|  Connected to CSR2                                                           |\n|  -   Log: pre-change/connection_CSR2.txt                                     |\n|------------------------------------------------------------------------------|\n|  Learnt feature 'routing'                                                    |\n|  -  Ops structure:  pre-change/routing_iosxe_CSR2_ops.txt                    |\n|  -  Device Console: pre-change/routing_iosxe_CSR2_console.txt                |\n|------------------------------------------------------------------------------|\n|  Learnt feature 'ospf'                                                       |\n|  -  Ops structure:  pre-change/ospf_iosxe_CSR2_ops.txt                       |\n|  -  Device Console: pre-change/ospf_iosxe_CSR2_console.txt                   |\n|==============================================================================|\n</code></pre>"},{"location":"netbox-integrations/pyats/#making-a-change-to-the-network","title":"Making a Change to The Network","text":"<p>Let's make a small change to the <code>CSR2</code> router in our test network, and remove the <code>network 2.2.2.2 0.0.0.0 area 0</code> statement from the OSPF configuration: </p> <pre><code>CSR2#conf t\nEnter configuration commands, one per line.  End with CNTL/Z.\nCSR2(config)#router ospf 1\nCSR2(config-router)#no network 2.2.2.2 0.0.0.0 area 0\n</code></pre> <p>Next lets re-learn <code>routing</code> and <code>ospf</code> for both devices in our testbed file. We will also save the output into directory called <code>post-change</code>: </p> <pre><code>genie learn routing ospf --testbed-file testbed.yaml --output post-change                  \n\nLearning '['routing', 'ospf']' on devices '['CSR1', 'CSR2']'\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:11&lt;00:00,  5.84s/it]\n+==============================================================================+\n| Genie Learn Summary for device CSR1                                          |\n+==============================================================================+\n|  Connected to CSR1                                                           |\n|  -   Log: post-change/connection_CSR1.txt                                    |\n|------------------------------------------------------------------------------|\n|  Learnt feature 'routing'                                                    |\n|  -  Ops structure:  post-change/routing_iosxe_CSR1_ops.txt                   |\n|  -  Device Console: post-change/routing_iosxe_CSR1_console.txt               |\n|------------------------------------------------------------------------------|\n|  Learnt feature 'ospf'                                                       |\n|  -  Ops structure:  post-change/ospf_iosxe_CSR1_ops.txt                      |\n|  -  Device Console: post-change/ospf_iosxe_CSR1_console.txt                  |\n|==============================================================================|\n\n\n+==============================================================================+\n| Genie Learn Summary for device CSR2                                          |\n+==============================================================================+\n|  Connected to CSR2                                                           |\n|  -   Log: post-change/connection_CSR2.txt                                    |\n|------------------------------------------------------------------------------|\n|  Learnt feature 'routing'                                                    |\n|  -  Ops structure:  post-change/routing_iosxe_CSR2_ops.txt                   |\n|  -  Device Console: post-change/routing_iosxe_CSR2_console.txt               |\n|------------------------------------------------------------------------------|\n|  Learnt feature 'ospf'                                                       |\n|  -  Ops structure:  post-change/ospf_iosxe_CSR2_ops.txt                      |\n|  -  Device Console: post-change/ospf_iosxe_CSR2_console.txt                  |\n|==============================================================================|\n</code></pre>"},{"location":"netbox-integrations/pyats/#genie-diff","title":"Genie Diff","text":"<p>Now let's use the <code>genie diff</code> command to tell us what changed in our network, and we will store the output in a directory called <code>routing-diff</code>: </p> <pre><code>genie diff pre-change post-change --output diff \n1it [00:00, 333.44it/s]\n+==============================================================================+\n| Genie Diff Summary between directories pre-change/ and post-change/          |\n+==============================================================================+\n|  File: routing_iosxe_CSR2_ops.txt                                            |\n|   - Identical                                                                |\n|------------------------------------------------------------------------------|\n|  File: ospf_iosxe_CSR1_ops.txt                                               |\n|   - Identical                                                                |\n|------------------------------------------------------------------------------|\n|  File: routing_iosxe_CSR1_ops.txt                                            |\n|   - Diff can be found at diff/diff_routing_iosxe_CSR1_ops.txt                |\n|------------------------------------------------------------------------------|\n|  File: ospf_iosxe_CSR2_ops.txt                                               |\n|   - Diff can be found at diff/diff_ospf_iosxe_CSR2_ops.txt                   |\n|------------------------------------------------------------------------------|\n</code></pre> <p>There are differences in the outputs of both the <code>routing_iosxe_CSR1_ops.txt</code> and <code>ospf_iosxe_CSR2_ops.txt</code> files and we can view the contents of those files to see what has changed: </p> <p><pre><code>cat diff/diff_routing_iosxe_CSR1_ops.txt \n--- pre-change/routing_iosxe_CSR1_ops.txt\n+++ post-change/routing_iosxe_CSR1_ops.txt\n info:\n  vrf:\n   default:\n    address_family:\n     ipv4:\n      routes:\n-      2.2.2.2/32:\n-       active: True\n-       metric: 2\n-       next_hop:\n-        next_hop_list:\n-         1:\n-          index: 1\n-          next_hop: 192.168.1.2\n-          outgoing_interface: GigabitEthernet2\n-          updated: 03:32:43\n-       route: 2.2.2.2/32\n-       route_preference: 110\n-       source_protocol: ospf\n-       source_protocol_codes: O%  \n</code></pre> <pre><code>cat diff/diff_ospf_iosxe_CSR2_ops.txt   \n--- pre-change/ospf_iosxe_CSR2_ops.txt\n+++ post-change/ospf_iosxe_CSR2_ops.txt\n info:\n  vrf:\n   default:\n    address_family:\n     ipv4:\n      instance:\n       1:\n        areas:\n         0.0.0.0:\n          interfaces:\n-          Loopback0:\n-           bfd:\n-            enable: False\n-           cost: 1\n-           demand_circuit: False\n-           enable: True\n-           interface_type: loopback\n-           name: Loopback0% \n</code></pre></p> <p>As we can see, CSR1 has lost the the route to the <code>2.2.2.2/32</code> prefix and on CSR2 the interface <code>lo0</code> has been removed from <code>OSPF area 0</code>.</p>"},{"location":"netbox-integrations/pyats/#pyats-and-python","title":"pyATS and Python","text":"<p>As you would expect, it is also very easy to work with pyATS and python. Type <code>python</code> in your terminal, and then start by importing the <code>load</code> module from the <code>genie.testbed</code> library and load the testbed file: </p> <p><pre><code>from genie.testbed import load\ntestbed = load('testbed.yaml') \n</code></pre> Then connect to the CSR1 device:  <pre><code>device = testbed.devices['CSR1']\ndevice.connect()\n</code></pre> Then parse the command <code>show ip interface brief</code> and print the output nicely using the <code>pprint</code> library: <pre><code>parsed_data = device.parse('show ip interface brief')\nfrom pprint import pprint \npprint(parsed_data)\n{'interface': {'GigabitEthernet1': {'interface_is_ok': 'YES',\n                                    'ip_address': '10.0.0.15',\n                                    'method': 'manual',\n                                    'protocol': 'up',\n                                    'status': 'up'},\n               'GigabitEthernet2': {'interface_is_ok': 'YES',\n                                    'ip_address': '192.168.1.1',\n                                    'method': 'manual',\n                                    'protocol': 'up',\n                                    'status': 'up'},\n               'Loopback0': {'interface_is_ok': 'YES',\n                             'ip_address': '1.1.1.1',\n                             'method': 'manual',\n                             'protocol': 'up',\n                             'status': 'up'}}}\n</code></pre> Lastly, close the connection to the device: <pre><code>device.disconnect()\n</code></pre></p> <p>As you can imagine, the possibilities are endless and you can see an example of a script that gets and prints OSPF Neighbor table for a given device in the file <code>ospf_neighbor_table.py</code>. Run the script and you will get a nicely formatted table of the OSPF neighbors for CRS1:</p> <pre><code>python ospf_neighbor_table.py\n\nOSPF Neighbor Table for CSR1\n+------------------+----------+-------------+---------+\n|    Interface     | Neighbor |   Address   |  State  |\n+------------------+----------+-------------+---------+\n| GigabitEthernet2 | 2.2.2.2  | 192.168.1.2 | FULL/DR |\n+------------------+----------+-------------+---------+\n</code></pre>"},{"location":"netbox-integrations/pyats/#pyats-test-scripts-and-jobs","title":"pyATS Test Scripts and Jobs","text":"<p>So far we have only scratched the surface of what you can do with pyATS, and test scripts will take your automated testing to the next level. Test scripts are written and executed with the AEtest Python package</p> <p>I have included an example test script called <code>connectivity_check.py</code>, which is adapted from the example script in the official documentation. This script tests that both CSR1 and CSR2 can ping each other's loopback addresses. Test scripts are structured Python files that contain/describe the testing you want to do. A clean, elegant test script is scalable, and generates easy-to-read test results and logs.</p> <p>To run the example test script, you must also specify the testbed file that is to be used, for example: </p> <pre><code>python connectivity_check.py --testbed testbed.yaml\n</code></pre> <p>Once the test script has been run then the results are displayed in the output: </p> <pre><code>2024-04-23T11:50:16: %AETEST-INFO: +------------------------------------------------------------------------------+\n2024-04-23T11:50:16: %AETEST-INFO: |                               Detailed Results                               |\n2024-04-23T11:50:16: %AETEST-INFO: +------------------------------------------------------------------------------+\n2024-04-23T11:50:16: %AETEST-INFO:  SECTIONS/TESTCASES                                                      RESULT   \n2024-04-23T11:50:16: %AETEST-INFO: --------------------------------------------------------------------------------\n2024-04-23T11:50:16: %AETEST-INFO: .\n2024-04-23T11:50:16: %AETEST-INFO: |-- common_setup                                                          PASSED\n2024-04-23T11:50:16: %AETEST-INFO: |   |-- check_topology                                                    PASSED\n2024-04-23T11:50:16: %AETEST-INFO: |   `-- establish_connections                                             PASSED\n2024-04-23T11:50:16: %AETEST-INFO: |       |-- Step 1: Connecting to CSR1                                    PASSED\n2024-04-23T11:50:16: %AETEST-INFO: |       `-- Step 2: Connecting to CSR2                                    PASSED\n2024-04-23T11:50:16: %AETEST-INFO: |-- PingTestcase[device=device1]                                          PASSED\n2024-04-23T11:50:16: %AETEST-INFO: |   |-- ping[destination=192.168.1.1]                                     PASSED\n2024-04-23T11:50:16: %AETEST-INFO: |   `-- ping[destination=192.168.1.2]                                     PASSED\n2024-04-23T11:50:16: %AETEST-INFO: |-- PingTestcase[device=device2]                                          PASSED\n2024-04-23T11:50:16: %AETEST-INFO: |   |-- ping[destination=192.168.1.1]                                     PASSED\n2024-04-23T11:50:16: %AETEST-INFO: |   `-- ping[destination=192.168.1.2]                                     PASSED\n2024-04-23T11:50:16: %AETEST-INFO: `-- common_cleanup                                                        PASSED\n2024-04-23T11:50:16: %AETEST-INFO:     `-- disconnect                                                        PASSED\n2024-04-23T11:50:16: %AETEST-INFO:         |-- Step 1: Disconnecting from CSR1                               PASSED\n2024-04-23T11:50:16: %AETEST-INFO:         `-- Step 2: Disconnecting from CSR2                               PASSED\n2024-04-23T11:50:16: %AETEST-INFO: +------------------------------------------------------------------------------+\n2024-04-23T11:50:16: %AETEST-INFO: |                                   Summary                                    |\n2024-04-23T11:50:16: %AETEST-INFO: +------------------------------------------------------------------------------+\n2024-04-23T11:50:16: %AETEST-INFO:  Number of ABORTED                                                            0 \n2024-04-23T11:50:16: %AETEST-INFO:  Number of BLOCKED                                                            0 \n2024-04-23T11:50:16: %AETEST-INFO:  Number of ERRORED                                                            0 \n2024-04-23T11:50:16: %AETEST-INFO:  Number of FAILED                                                             0 \n2024-04-23T11:50:16: %AETEST-INFO:  Number of PASSED                                                             4 \n2024-04-23T11:50:16: %AETEST-INFO:  Number of PASSX                                                              0 \n2024-04-23T11:50:16: %AETEST-INFO:  Number of SKIPPED                                                            0 \n2024-04-23T11:50:16: %AETEST-INFO:  Total Number                                                                 4 \n2024-04-23T11:50:16: %AETEST-INFO:  Success Rate                                                            100.0% \n2024-04-23T11:50:16: %AETEST-INFO: --------------------------------------------------------------------------------\n</code></pre> <p>pyATS Jobs take test scripts to another level and allow the execution of test scripts as tasks. This is beyond the scope of this document but you can read all about pyATS jobs in the official docs</p>"},{"location":"sdks/pynetbox/","title":"NetBox SDKs","text":""},{"location":"sdks/pynetbox/#pynetbox","title":"Pynetbox","text":"<p>Python API client library for NetBox.</p> <p>Note: Version 6.7 and later of the library only supports NetBox 3.3 and above.</p> <p>This guide will help you get started, but for more information, see the Pynetbox Git Repository</p>"},{"location":"sdks/pynetbox/#installation","title":"Installation","text":"<p>To install run <code>pip install pynetbox</code>.</p> <p>Alternatively, you can clone the repo and run <code>python setup.py install</code>.</p>"},{"location":"sdks/pynetbox/#quick-start","title":"Quick Start","text":"<p>The full pynetbox API is documented on Read the Docs, but the following should be enough to get started using it.</p> <p>To begin, import pynetbox and instantiate the API.</p> <pre><code>import pynetbox\nnb = pynetbox.api(\n    'http://localhost:8000',\n    token='d6f4e314a5b5fefd164995169f28ae32d987704f'\n)\n</code></pre> <p>The first argument the .api() method takes is the NetBox URL. There are a handful of named arguments you can provide, but in most cases none are required to simply pull data. In order to write, the <code>token</code> argument should to be provided.</p>"},{"location":"sdks/pynetbox/#queries","title":"Queries","text":"<p>The pynetbox API is setup so that NetBox's apps are attributes of the <code>.api()</code> object, and in turn those apps have attribute representing each endpoint. Each endpoint has a handful of methods available to carry out actions on the endpoint. For example, in order to query all the objects in the <code>devices</code> endpoint you would do the following:</p> <pre><code>&gt;&gt;&gt; devices = nb.dcim.devices.all()\n&gt;&gt;&gt; for device in devices:\n...     print(device.name)\n...\ntest1-leaf1\ntest1-leaf2\ntest1-leaf3\n&gt;&gt;&gt;\n</code></pre> <p>Note that the all() and filter() methods are generators and return an object that can be iterated over only once.  If you are going to be iterating over it repeatedly you need to either call the all() method again, or encapsulate the results in a <code>list</code> object like this: <pre><code>&gt;&gt;&gt; devices = list(nb.dcim.devices.all())\n</code></pre></p>"},{"location":"sdks/pynetbox/#threading","title":"Threading","text":"<p>pynetbox supports multithreaded calls for <code>.filter()</code> and <code>.all()</code> queries. It is highly recommended you have <code>MAX_PAGE_SIZE</code> in your Netbox install set to anything except <code>0</code> or <code>None</code>. The default value of <code>1000</code> is usually a good value to use. To enable threading, add <code>threading=True</code> parameter to the <code>.api</code>:</p> <pre><code>nb = pynetbox.api(\n    'http://localhost:8000',\n    threading=True,\n)\n</code></pre> <p>Alternative Library</p> <p>For those interested in a different approach, there is an alternative Python API client library available for NetBox called netbox-python. This library provides a thin Python wrapper over the NetBox API.</p> <p>netbox-python offers a minimalistic interface to interact with NetBox's API. While it may not provide all the features available in pynetbox, it offers a lightweight and straightforward option for interfacing with NetBox.</p> <p>To explore further details and access the documentation, please visit the netbox-python.</p>"}]}
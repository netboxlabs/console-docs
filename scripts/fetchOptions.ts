const fs = require('fs/promises');
const path = require('path');
const { fileURLToPath } = require('url');


const TARGET_URL = 'https://netboxlabscms.kinsta.cloud/wp-json/together/options';
// Output directory relative to this script's parent directory, then into src/components/global
const OUTPUT_DIR = path.resolve(__dirname, '../src/components/global');
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'options.data.ts');

// Default fallback options if fetch fails
const DEFAULT_OPTIONS = {
  "header": {
    "nav": {
      "items": [
        {
          "link": {
            "title": "Platform",
            "url": "/#",
            "target": ""
          },
          "has_submenu": false
        },
        {
          "link": {
            "title": "Solutions", 
            "url": "/solutions/",
            "target": ""
          },
          "has_submenu": false
        },
        {
          "link": {
            "title": "Resources",
            "url": "/#",
            "target": ""
          },
          "has_submenu": false
        }
      ]
    }
  }
};

async function fileExists(filePath) {
  try {
    await fs.access(filePath);
    return true;
  } catch {
    return false;
  }
}

async function fetchAndSaveOptions() {
  try {
    console.log(`Fetching options from ${TARGET_URL}...`);
    const response = await fetch(TARGET_URL);
    if (!response.ok) {
      throw new Error(`Failed to fetch options: ${response.status} ${response.statusText}`);
    }
    const data = await response.json();
    console.log('Successfully fetched options data.');

    // Ensure the target directory exists
    await fs.mkdir(OUTPUT_DIR, { recursive: true });

    const fileContent = `// This file is auto-generated by scripts/fetchOptions.ts
// Do not edit this file manually.

/* eslint-disable */
// Disable ESLint for this auto-generated file to avoid issues with potentially complex data structures.

export const options = ${JSON.stringify(data, null, 2)} as const;
`;

    await fs.writeFile(OUTPUT_FILE, fileContent, 'utf-8');
    console.log(`Successfully saved options to ${OUTPUT_FILE}`);

  } catch (error) {
    console.warn('‚ö†Ô∏è Warning: Error fetching options from CMS:', error.message);
    
    // Check if options file already exists
    const optionsFileExists = await fileExists(OUTPUT_FILE);
    
    if (optionsFileExists) {
      console.log('‚úÖ Using existing options.data.ts file as fallback');
      return; // Keep existing file, don't fail build
    }
    
    // Create fallback file if none exists
    console.log('üìù Creating fallback options.data.ts with default structure');
    
    try {
      await fs.mkdir(OUTPUT_DIR, { recursive: true });
      
      const fallbackContent = `// This file is auto-generated by scripts/fetchOptions.ts
// Do not edit this file manually.
// NOTE: Using fallback data due to CMS fetch failure

/* eslint-disable */
// Disable ESLint for this auto-generated file to avoid issues with potentially complex data structures.

export const options = ${JSON.stringify(DEFAULT_OPTIONS, null, 2)} as const;
`;

      await fs.writeFile(OUTPUT_FILE, fallbackContent, 'utf-8');
      console.log(`‚úÖ Created fallback options file at ${OUTPUT_FILE}`);
      
    } catch (fallbackError) {
      console.error('‚ùå Failed to create fallback options file:', fallbackError);
      process.exit(1); // Only fail if we can't create any options file
    }
  }
}

fetchAndSaveOptions();
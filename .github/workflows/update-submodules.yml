name: Update Documentation Submodules

on:
  schedule:
    # Run every hour at minute 0
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        default: false
        type: boolean

jobs:
  update-submodules:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Check for existing automated PRs
        id: check-existing-prs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              base: 'master'
            });
            
            // Find automated documentation PRs
            const automatedPRs = prs.filter(pr => 
              pr.head.ref.startsWith('automated-docs-update') || 
              pr.title.includes('🤖 Automated Documentation Updates')
            );
            
            console.log(`Found ${automatedPRs.length} existing automated PRs`);
            
            if (automatedPRs.length > 0) {
              const latestPR = automatedPRs[0]; // Most recent
              console.log(`Latest automated PR: #${latestPR.number} - ${latestPR.title}`);
              core.setOutput('has_existing_pr', 'true');
              core.setOutput('existing_pr_number', latestPR.number);
              core.setOutput('existing_pr_branch', latestPR.head.ref);
              
              // Close older automated PRs (keep only the latest)
              for (let i = 1; i < automatedPRs.length; i++) {
                const oldPR = automatedPRs[i];
                console.log(`Closing outdated automated PR #${oldPR.number}`);
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: oldPR.number,
                  state: 'closed'
                });
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: oldPR.number,
                  body: `🤖 **Auto-closed**: This automated PR has been superseded by a newer update (#${latestPR.number}).`
                });
              }
            } else {
              core.setOutput('has_existing_pr', 'false');
            }

      - name: Check current submodule commits
        id: check-before
        run: |
          echo "netbox_before=$(git ls-tree HEAD external-repos/netbox | awk '{print $3}')" >> $GITHUB_OUTPUT
          echo "console_before=$(git ls-tree HEAD external-repos/console-docs | awk '{print $3}')" >> $GITHUB_OUTPUT

      - name: Update submodules to latest
        run: |
          echo "=== Before submodule update ==="
          git submodule status
          echo "=== Running submodule update ==="
          git submodule update --remote --merge
          echo "=== After submodule update ==="
          git submodule status
          
      - name: Check updated submodule commits
        id: check-after
        run: |
          echo "netbox_after=$(cd external-repos/netbox && git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "console_after=$(cd external-repos/console-docs && git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Detect changes
        id: changes
        run: |
          NETBOX_CHANGED="false"
          CONSOLE_CHANGED="false"
          
          echo "=== Change Detection Debug ==="
          echo "NetBox before: ${{ steps.check-before.outputs.netbox_before }}"
          echo "NetBox after:  ${{ steps.check-after.outputs.netbox_after }}"
          echo "Console before: ${{ steps.check-before.outputs.console_before }}"
          echo "Console after:  ${{ steps.check-after.outputs.console_after }}"
          
          if [ "${{ steps.check-before.outputs.netbox_before }}" != "${{ steps.check-after.outputs.netbox_after }}" ]; then
            NETBOX_CHANGED="true"
          fi
          
          if [ "${{ steps.check-before.outputs.console_before }}" != "${{ steps.check-after.outputs.console_after }}" ]; then
            CONSOLE_CHANGED="true"
          fi
          
          echo "NetBox changed: $NETBOX_CHANGED"
          echo "Console changed: $CONSOLE_CHANGED"
          echo "Force update: ${{ inputs.force_update }}"
          
          echo "netbox_changed=$NETBOX_CHANGED" >> $GITHUB_OUTPUT
          echo "console_changed=$CONSOLE_CHANGED" >> $GITHUB_OUTPUT
          
          if [ "$NETBOX_CHANGED" = "true" ] || [ "$CONSOLE_CHANGED" = "true" ] || [ "${{ inputs.force_update }}" = "true" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Close existing automated PR if no changes
        if: steps.changes.outputs.has_changes == 'false' && steps.check-existing-prs.outputs.has_existing_pr == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.check-existing-prs.outputs.existing_pr_number }};
            console.log(`No changes detected - closing existing automated PR #${prNumber}`);
            
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              state: 'closed'
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `🤖 **Auto-closed**: No new documentation changes detected. All submodules are up to date.`
            });

      - name: Setup Node.js
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        if: steps.changes.outputs.has_changes == 'true'
        run: yarn install --frozen-lockfile

      - name: Run documentation transformation
        if: steps.changes.outputs.has_changes == 'true'
        run: yarn transform-docs

      - name: Analyze documentation file changes
        if: steps.changes.outputs.has_changes == 'true'
        id: analyze-changes
        run: |
          echo "=== Analyzing documentation file changes ==="
          
          # Initialize counters and lists
          NETBOX_ADDED=0
          NETBOX_MODIFIED=0
          NETBOX_REMOVED=0
          CONSOLE_ADDED=0
          CONSOLE_MODIFIED=0
          CONSOLE_REMOVED=0
          
          # Create temporary files for change lists
          mkdir -p /tmp/doc-changes
          touch /tmp/doc-changes/netbox-added.txt
          touch /tmp/doc-changes/netbox-modified.txt
          touch /tmp/doc-changes/netbox-removed.txt
          touch /tmp/doc-changes/console-added.txt
          touch /tmp/doc-changes/console-modified.txt
          touch /tmp/doc-changes/console-removed.txt
          
          # Get git status for changed files
          git status --porcelain > /tmp/git-status.txt
          
          # Analyze NetBox documentation changes
          if [ "${{ steps.changes.outputs.netbox_changed }}" = "true" ]; then
            echo "Analyzing NetBox documentation changes..."
            
            # Find added files
            grep "^A.*docs/netbox/.*\.md$" /tmp/git-status.txt | sed 's/^A[[:space:]]*//' | while read file; do
              basename "$file" .md >> /tmp/doc-changes/netbox-added.txt
              NETBOX_ADDED=$((NETBOX_ADDED + 1))
            done
            
            # Find modified files  
            grep "^M.*docs/netbox/.*\.md$" /tmp/git-status.txt | sed 's/^M[[:space:]]*//' | while read file; do
              basename "$file" .md >> /tmp/doc-changes/netbox-modified.txt
              NETBOX_MODIFIED=$((NETBOX_MODIFIED + 1))
            done
            
            # Find removed files
            grep "^D.*docs/netbox/.*\.md$" /tmp/git-status.txt | sed 's/^D[[:space:]]*//' | while read file; do
              basename "$file" .md >> /tmp/doc-changes/netbox-removed.txt
              NETBOX_REMOVED=$((NETBOX_REMOVED + 1))
            done
          fi
          
          # Analyze Console documentation changes
          if [ "${{ steps.changes.outputs.console_changed }}" = "true" ]; then
            echo "Analyzing Console documentation changes..."
            
            # Find added files
            grep "^A.*docs/console/.*\.md$" /tmp/git-status.txt | sed 's/^A[[:space:]]*//' | while read file; do
              basename "$file" .md >> /tmp/doc-changes/console-added.txt
              CONSOLE_ADDED=$((CONSOLE_ADDED + 1))
            done
            
            # Find modified files
            grep "^M.*docs/console/.*\.md$" /tmp/git-status.txt | sed 's/^M[[:space:]]*//' | while read file; do
              basename "$file" .md >> /tmp/doc-changes/console-modified.txt
              CONSOLE_MODIFIED=$((CONSOLE_MODIFIED + 1))
            done
            
            # Find removed files
            grep "^D.*docs/console/.*\.md$" /tmp/git-status.txt | sed 's/^D[[:space:]]*//' | while read file; do
              basename "$file" .md >> /tmp/doc-changes/console-removed.txt
              CONSOLE_REMOVED=$((CONSOLE_REMOVED + 1))
            done
          fi
          
          # Count files manually since variables don't persist in subshells
          NETBOX_ADDED=$(grep -c "^.*" /tmp/doc-changes/netbox-added.txt 2>/dev/null || echo "0")
          NETBOX_MODIFIED=$(grep -c "^.*" /tmp/doc-changes/netbox-modified.txt 2>/dev/null || echo "0")
          NETBOX_REMOVED=$(grep -c "^.*" /tmp/doc-changes/netbox-removed.txt 2>/dev/null || echo "0")
          CONSOLE_ADDED=$(grep -c "^.*" /tmp/doc-changes/console-added.txt 2>/dev/null || echo "0")
          CONSOLE_MODIFIED=$(grep -c "^.*" /tmp/doc-changes/console-modified.txt 2>/dev/null || echo "0")
          CONSOLE_REMOVED=$(grep -c "^.*" /tmp/doc-changes/console-removed.txt 2>/dev/null || echo "0")
          
          # Filter out empty lines if any
          sed -i '/^$/d' /tmp/doc-changes/*.txt 2>/dev/null || true
          
          echo "=== Change Summary ==="
          echo "NetBox: +$NETBOX_ADDED ~$NETBOX_MODIFIED -$NETBOX_REMOVED"
          echo "Console: +$CONSOLE_ADDED ~$CONSOLE_MODIFIED -$CONSOLE_REMOVED"
          
          # Set outputs
          echo "netbox_added=$NETBOX_ADDED" >> $GITHUB_OUTPUT
          echo "netbox_modified=$NETBOX_MODIFIED" >> $GITHUB_OUTPUT  
          echo "netbox_removed=$NETBOX_REMOVED" >> $GITHUB_OUTPUT
          echo "console_added=$CONSOLE_ADDED" >> $GITHUB_OUTPUT
          echo "console_modified=$CONSOLE_MODIFIED" >> $GITHUB_OUTPUT
          echo "console_removed=$CONSOLE_REMOVED" >> $GITHUB_OUTPUT

      - name: Determine branch strategy
        if: steps.changes.outputs.has_changes == 'true'
        id: branch-strategy
        run: |
          if [ "${{ steps.check-existing-prs.outputs.has_existing_pr }}" = "true" ]; then
            echo "strategy=update" >> $GITHUB_OUTPUT
            echo "branch_name=${{ steps.check-existing-prs.outputs.existing_pr_branch }}" >> $GITHUB_OUTPUT
            echo "pr_number=${{ steps.check-existing-prs.outputs.existing_pr_number }}" >> $GITHUB_OUTPUT
          else
            BRANCH_NAME="automated-docs-update-$(date +%Y%m%d)"
            echo "strategy=create" >> $GITHUB_OUTPUT
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Checkout existing PR branch
        if: steps.changes.outputs.has_changes == 'true' && steps.branch-strategy.outputs.strategy == 'update'
        run: |
          git fetch origin ${{ steps.branch-strategy.outputs.branch_name }}
          git checkout ${{ steps.branch-strategy.outputs.branch_name }}
          git rebase master

      - name: Create new PR branch
        if: steps.changes.outputs.has_changes == 'true' && steps.branch-strategy.outputs.strategy == 'create'
        run: |
          git checkout -b "${{ steps.branch-strategy.outputs.branch_name }}"

      - name: Commit changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git add .
          
          # Create detailed commit message with dynamic content
          NETBOX_CHANGED="${{ steps.changes.outputs.netbox_changed }}"
          CONSOLE_CHANGED="${{ steps.changes.outputs.console_changed }}"
          
          # Build title parts for commit message
          TITLE_PARTS=""
          if [ "$NETBOX_CHANGED" = "true" ]; then
            TITLE_PARTS="NetBox"
          fi
          if [ "$CONSOLE_CHANGED" = "true" ]; then
            if [ -n "$TITLE_PARTS" ]; then
              TITLE_PARTS="$TITLE_PARTS + Console"
            else
              TITLE_PARTS="Console"
            fi
          fi
          
          # Create base commit message
          if [ "${{ steps.branch-strategy.outputs.strategy }}" = "update" ]; then
            COMMIT_MSG="chore: update automated documentation - $TITLE_PARTS"
          else
            COMMIT_MSG="chore: automated documentation updates - $TITLE_PARTS"
          fi
          
          # Add detailed changes
          if [ "$NETBOX_CHANGED" = "true" ]; then
            NETBOX_SHORT_BEFORE="${{ steps.check-before.outputs.netbox_before }}"
            NETBOX_SHORT_AFTER="${{ steps.check-after.outputs.netbox_after }}"
            COMMIT_MSG="$COMMIT_MSG"$'\n\n'"- NetBox docs: ${NETBOX_SHORT_BEFORE:0:7} → ${NETBOX_SHORT_AFTER:0:7}"
          fi
          
          if [ "$CONSOLE_CHANGED" = "true" ]; then
            CONSOLE_SHORT_BEFORE="${{ steps.check-before.outputs.console_before }}"
            CONSOLE_SHORT_AFTER="${{ steps.check-after.outputs.console_after }}"
            COMMIT_MSG="$COMMIT_MSG"$'\n\n'"- Console docs: ${CONSOLE_SHORT_BEFORE:0:7} → ${CONSOLE_SHORT_AFTER:0:7}"
          fi
          
          COMMIT_MSG="$COMMIT_MSG"$'\n\n'"Automated by GitHub Actions - includes transformed documentation files"
          
          git commit -m "$COMMIT_MSG"

      - name: Push branch
        if: steps.changes.outputs.has_changes == 'true'
        run: git push origin "${{ steps.branch-strategy.outputs.branch_name }}" --force-with-lease

      - name: Create or Update Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Get the change status from workflow outputs
            const netboxChanged = '${{ steps.changes.outputs.netbox_changed }}' === 'true';
            const consoleChanged = '${{ steps.changes.outputs.console_changed }}' === 'true';
            
            console.log(`NetBox changed: ${netboxChanged}, Console changed: ${consoleChanged}`);
            
            // Get file change counts
            const netboxAdded = parseInt('${{ steps.analyze-changes.outputs.netbox_added }}') || 0;
            const netboxModified = parseInt('${{ steps.analyze-changes.outputs.netbox_modified }}') || 0;
            const netboxRemoved = parseInt('${{ steps.analyze-changes.outputs.netbox_removed }}') || 0;
            const consoleAdded = parseInt('${{ steps.analyze-changes.outputs.console_added }}') || 0;
            const consoleModified = parseInt('${{ steps.analyze-changes.outputs.console_modified }}') || 0;
            const consoleRemoved = parseInt('${{ steps.analyze-changes.outputs.console_removed }}') || 0;
            
            console.log(`File change counts:`);
            console.log(`- NetBox: +${netboxAdded} ~${netboxModified} -${netboxRemoved}`);
            console.log(`- Console: +${consoleAdded} ~${consoleModified} -${consoleRemoved}`);
            
            // Build the PR body content
            let netboxStatus = '';
            let consoleStatus = '';
            
            if (netboxChanged) {
              const netboxChangeSummary = `+${netboxAdded} ~${netboxModified} -${netboxRemoved}`;
              netboxStatus = `- ✅ **NetBox Documentation**: Updated from \`${{ steps.check-before.outputs.netbox_before }}\` to \`${{ steps.check-after.outputs.netbox_after }}\` (${netboxChangeSummary})`;
            } else {
              netboxStatus = '- ⚪ **NetBox Documentation**: No changes';
            }
            
            if (consoleChanged) {
              const consoleChangeSummary = `+${consoleAdded} ~${consoleModified} -${consoleRemoved}`;
              consoleStatus = `- ✅ **Console Documentation**: Updated from \`${{ steps.check-before.outputs.console_before }}\` to \`${{ steps.check-after.outputs.console_after }}\` (${consoleChangeSummary})`;
            } else {
              consoleStatus = '- ⚪ **Console Documentation**: No changes';
            }
            
            // Build dynamic title based on what changed
            let titleParts = [];
            if (netboxChanged) titleParts.push('NetBox');
            if (consoleChanged) titleParts.push('Console');
            
            const dynamicTitle = titleParts.length > 0 
              ? `🤖 Automated Documentation Updates - ${titleParts.join(' + ')}`
              : '🤖 Automated Documentation Updates';
            
            const isUpdate = '${{ steps.branch-strategy.outputs.strategy }}' === 'update';
            const updateText = isUpdate ? ' (Updated)' : '';
            
            // Build detailed what's included section
            let whatsIncluded = ['- 📚 Updated submodule references to latest commits'];
            
            if (netboxChanged || consoleChanged) {
              whatsIncluded.push('- 🔄 Regenerated transformed documentation files');
              whatsIncluded.push('- 🗂️ Updated sidebar configurations');
              whatsIncluded.push('- 🖼️ Copied new/updated static assets');
              
              if (netboxChanged) {
                whatsIncluded.push(`- 📖 **NetBox docs**: ~284 files processed and transformed (${netboxAdded + netboxModified + netboxRemoved} changes)`);
              }
              if (consoleChanged) {
                whatsIncluded.push(`- 🏢 **Console docs**: ~324 files processed and transformed (${consoleAdded + consoleModified + consoleRemoved} changes)`);
              }
            }
            
            // Build detailed file changes section
            let fileChangesSection = '';
            
            if (netboxChanged || consoleChanged) {
              const { execSync } = require('child_process');
              let fileChangesParts = [];
              
              if (netboxChanged && (netboxAdded > 0 || netboxModified > 0 || netboxRemoved > 0)) {
                let netboxChanges = [];
                
                if (netboxAdded > 0) {
                  try {
                    const addedFiles = execSync('cat /tmp/doc-changes/netbox-added.txt 2>/dev/null || echo ""', { encoding: 'utf8' }).trim();
                    if (addedFiles) {
                      const fileList = addedFiles.split('\n').filter(f => f.trim()).slice(0, 10);
                      const moreText = addedFiles.split('\n').length > 10 ? ` (+${addedFiles.split('\n').length - 10} more)` : '';
                      netboxChanges.push(`**Added (${netboxAdded}):** ${fileList.join(', ')}${moreText}`);
                    }
                  } catch (e) {
                    netboxChanges.push(`**Added:** ${netboxAdded} files`);
                  }
                }
                
                if (netboxModified > 0) {
                  try {
                    const modifiedFiles = execSync('cat /tmp/doc-changes/netbox-modified.txt 2>/dev/null || echo ""', { encoding: 'utf8' }).trim();
                    if (modifiedFiles) {
                      const fileList = modifiedFiles.split('\n').filter(f => f.trim()).slice(0, 10);
                      const moreText = modifiedFiles.split('\n').length > 10 ? ` (+${modifiedFiles.split('\n').length - 10} more)` : '';
                      netboxChanges.push(`**Modified (${netboxModified}):** ${fileList.join(', ')}${moreText}`);
                    }
                  } catch (e) {
                    netboxChanges.push(`**Modified:** ${netboxModified} files`);
                  }
                }
                
                if (netboxRemoved > 0) {
                  try {
                    const removedFiles = execSync('cat /tmp/doc-changes/netbox-removed.txt 2>/dev/null || echo ""', { encoding: 'utf8' }).trim();
                    if (removedFiles) {
                      const fileList = removedFiles.split('\n').filter(f => f.trim()).slice(0, 10);
                      const moreText = removedFiles.split('\n').length > 10 ? ` (+${removedFiles.split('\n').length - 10} more)` : '';
                      netboxChanges.push(`**Removed (${netboxRemoved}):** ${fileList.join(', ')}${moreText}`);
                    }
                  } catch (e) {
                    netboxChanges.push(`**Removed:** ${netboxRemoved} files`);
                  }
                }
                
                if (netboxChanges.length > 0) {
                  fileChangesParts.push(`#### 📖 NetBox Documentation\n${netboxChanges.join('\n')}`);
                }
              }
              
              if (consoleChanged && (consoleAdded > 0 || consoleModified > 0 || consoleRemoved > 0)) {
                let consoleChanges = [];
                
                if (consoleAdded > 0) {
                  try {
                    const addedFiles = execSync('cat /tmp/doc-changes/console-added.txt 2>/dev/null || echo ""', { encoding: 'utf8' }).trim();
                    if (addedFiles) {
                      const fileList = addedFiles.split('\n').filter(f => f.trim()).slice(0, 10);
                      const moreText = addedFiles.split('\n').length > 10 ? ` (+${addedFiles.split('\n').length - 10} more)` : '';
                      consoleChanges.push(`**Added (${consoleAdded}):** ${fileList.join(', ')}${moreText}`);
                    }
                  } catch (e) {
                    consoleChanges.push(`**Added:** ${consoleAdded} files`);
                  }
                }
                
                if (consoleModified > 0) {
                  try {
                    const modifiedFiles = execSync('cat /tmp/doc-changes/console-modified.txt 2>/dev/null || echo ""', { encoding: 'utf8' }).trim();
                    if (modifiedFiles) {
                      const fileList = modifiedFiles.split('\n').filter(f => f.trim()).slice(0, 10);
                      const moreText = modifiedFiles.split('\n').length > 10 ? ` (+${modifiedFiles.split('\n').length - 10} more)` : '';
                      consoleChanges.push(`**Modified (${consoleModified}):** ${fileList.join(', ')}${moreText}`);
                    }
                  } catch (e) {
                    consoleChanges.push(`**Modified:** ${consoleModified} files`);
                  }
                }
                
                if (consoleRemoved > 0) {
                  try {
                    const removedFiles = execSync('cat /tmp/doc-changes/console-removed.txt 2>/dev/null || echo ""', { encoding: 'utf8' }).trim();
                    if (removedFiles) {
                      const fileList = removedFiles.split('\n').filter(f => f.trim()).slice(0, 10);
                      const moreText = removedFiles.split('\n').length > 10 ? ` (+${removedFiles.split('\n').length - 10} more)` : '';
                      consoleChanges.push(`**Removed (${consoleRemoved}):** ${fileList.join(', ')}${moreText}`);
                    }
                  } catch (e) {
                    consoleChanges.push(`**Removed:** ${consoleRemoved} files`);
                  }
                }
                
                if (consoleChanges.length > 0) {
                  fileChangesParts.push(`#### 🏢 Console Documentation\n${consoleChanges.join('\n')}`);
                }
              }
              
              if (fileChangesParts.length > 0) {
                fileChangesSection = [
                  '',
                  '### 📄 Detailed File Changes',
                  '',
                  '<details>',
                  '<summary>Click to view specific file changes</summary>',
                  '',
                  ...fileChangesParts,
                  '',
                  '</details>'
                ].join('\n');
              }
            }
            
            const prBody = [
              '## 🔄 Automated Submodule Updates' + updateText,
              '',
              'This PR contains automated updates to documentation submodules and their transformed content.',
              '',
              isUpdate ? `> **🔄 This PR was automatically updated on ${new Date().toISOString()}**` : '',
              '',
              '### 📊 Changes Detected',
              '',
              netboxStatus,
              '',
              consoleStatus,
              '',
              '### 📦 What\'s Included',
              '',
              ...whatsIncluded,
              fileChangesSection,
              '',
              '### Review Checklist',
              '',
              '- [ ] Check that new/updated documentation renders correctly',
              '- [ ] Verify no broken links or missing images',
              '- [ ] Confirm sidebar navigation is working properly',
              '- [ ] Test build process completes successfully',
              '',
              '### Auto-merge Criteria',
              '',
              'This PR can be safely auto-merged if:',
              '- [ ] All CI checks pass',
              '- [ ] No conflicts with base branch',
              '- [ ] Documentation transformation completed successfully',
              '',
              '---',
              '',
              '*This PR was automatically generated by the `update-submodules` GitHub Action.*',
              `*Last updated: ${new Date().toISOString()}*`
            ].join('\n');

            if (isUpdate) {
              // Update existing PR
              const prNumber = ${{ steps.branch-strategy.outputs.pr_number }};
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                title: dynamicTitle,
                body: prBody
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `🤖 **Auto-updated** with latest documentation changes (${new Date().toISOString()})`
              });
              
              console.log(`Updated existing PR #${prNumber}`);
            } else {
              // Create new PR
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: dynamicTitle,
                head: '${{ steps.branch-strategy.outputs.branch_name }}',
                base: 'master',
                body: prBody,
                draft: false
              });

              // Add labels
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['documentation', 'automated', 'submodule-update']
              });

              console.log(`Created PR #${pr.number}: ${pr.html_url}`);
            }

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.changes.outputs.has_changes }}" = "true" ]; then
            echo "✅ Documentation updates detected and PR ${{ steps.branch-strategy.outputs.strategy }}d"
            echo "- NetBox changed: ${{ steps.changes.outputs.netbox_changed }}"
            echo "- Console changed: ${{ steps.changes.outputs.console_changed }}"
            echo "- Strategy: ${{ steps.branch-strategy.outputs.strategy }}"
          else
            echo "ℹ️ No documentation changes detected - no action taken"
            if [ "${{ steps.check-existing-prs.outputs.has_existing_pr }}" = "true" ]; then
              echo "🧹 Closed existing automated PR as no changes were needed"
            fi
          fi 
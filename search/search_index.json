{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to NetBox Enterprise Documentation Documentation for NetBox Cloud , Enterprise , Discovery & Assurance , and Integrations . NetBox Cloud All the power and flexibility of NetBox, rock solid and secure. Focus on building and evolving your network. Get started with NetBox Cloud NetBox Enterprise The power of NetBox in your own infrastructure, backed and enhanced by NetBox Labs. Get started with NetBox Enterprise NetBox Labs Products & Integrations NetBox Discovery Map your network and infrastructure. Accelerate documentation. Streamline your automation journey. Learn more about NetBox Discovery NetBox Assurance Identify, understand, and eliminate operational drift. Learn more about NetBox Assurance Cloud Connectivity Secure, high-performance network connectivity options for NetBox Cloud deployments. Learn more about Cloud Connectivity NetBox Integrations Connect NetBox with your existing tools and workflows through proven integrations. Explore NetBox Integrations Open Source Projects NetBox Labs builds software in the open, with thriving communities. We help develop multiple open source projects, such as NetBox and Orb. NetBox Community NetBox exists to empower network engineers. Since its release in 2016, it has become the go-to solution for modeling and documenting network infrastructure for thousands of organizations worldwide. Visit the NetBox Community GitHub page NetBox Discovery Agent NetBox discovery agents map network resources and gather device information to build a comprehensive model of your infrastructure. Learn more about the NetBox Discovery Agent","title":"Home"},{"location":"#welcome-to-netbox-enterprise-documentation","text":"Documentation for NetBox Cloud , Enterprise , Discovery & Assurance , and Integrations . NetBox Cloud All the power and flexibility of NetBox, rock solid and secure. Focus on building and evolving your network. Get started with NetBox Cloud NetBox Enterprise The power of NetBox in your own infrastructure, backed and enhanced by NetBox Labs. Get started with NetBox Enterprise","title":"Welcome to NetBox Enterprise Documentation"},{"location":"#netbox-labs-products-integrations","text":"NetBox Discovery Map your network and infrastructure. Accelerate documentation. Streamline your automation journey. Learn more about NetBox Discovery NetBox Assurance Identify, understand, and eliminate operational drift. Learn more about NetBox Assurance Cloud Connectivity Secure, high-performance network connectivity options for NetBox Cloud deployments. Learn more about Cloud Connectivity NetBox Integrations Connect NetBox with your existing tools and workflows through proven integrations. Explore NetBox Integrations","title":"NetBox Labs Products &amp; Integrations"},{"location":"#open-source-projects","text":"NetBox Labs builds software in the open, with thriving communities. We help develop multiple open source projects, such as NetBox and Orb. NetBox Community NetBox exists to empower network engineers. Since its release in 2016, it has become the go-to solution for modeling and documenting network infrastructure for thousands of organizations worldwide. Visit the NetBox Community GitHub page NetBox Discovery Agent NetBox discovery agents map network resources and gather device information to build a comprehensive model of your infrastructure. Learn more about the NetBox Discovery Agent","title":"Open Source Projects"},{"location":"maintenance/","text":"NetBox Upgrade Maintenance Windows NetBox Labs designates the following weekly upgrade windows specifically to upgrade the version of NetBox and NetBox components for NetBox Cloud customers on Tuesdays and Thursdays. These upgrade windows are used for patch, minor, and major upgrades to NetBox. Customers are assigned to one of these windows based on their time zone. London (UK): 7:00\u20139:00 am (Local London time, year-round) US Eastern Time: 6:00\u20138:00 am (Local ET, year-round) Note These windows always follow local clocks in London and New York. Times automatically adjust with daylight saving. We will not perform upgrades during these windows without first notifying affected customers. If an upgrade is scheduled, customers will receive advance notice with details about the changes and any potential impact on their service. If you have any questions about these upgrade windows or anything else related to NetBox Cloud, please reach out to the NetBox Labs Support Team. We are happy to assist via email or schedule a call at your convenience. General System Maintenance Windows There are weekly maintenance windows for the NetBox Cloud Platform on Tuesdays and Thursdays between the hours of 7:00\u20139:00 am (Local London time, year-round) These windows are designated for routine maintenance on the infrastructure supporting the NetBox Labs Console, NetBox Cloud instances, and other cloud products and services offered by NetBox Labs. This includes applying necessary security patches and making other infrastructure adjustments to enhance reliability, security, and performance. Not every maintenance window will be utilized, and when maintenance is performed, we always strive to complete it with no disruption to your service. If downtime is unavoidable, it is expected to last only a few minutes. In the rare case that extended downtime is required, we will provide advance notice and schedule a separate one-time maintenance window on status.netboxlabs.com . Routine Tuesday/Thursday maintenance windows will not be listed on the status page. If you have any automation jobs running during these maintenance windows, we recommend ensuring they include business logic to properly handle failed requests and/or adjusting their schedule to run outside the maintenance windows. Please don\u2019t hesitate to reach out to the NetBox Labs Support Team if you have any questions. We\u2019re happy to connect via call or email to assist you.","title":"Scheduled Maintenance"},{"location":"maintenance/#netbox-upgrade-maintenance-windows","text":"NetBox Labs designates the following weekly upgrade windows specifically to upgrade the version of NetBox and NetBox components for NetBox Cloud customers on Tuesdays and Thursdays. These upgrade windows are used for patch, minor, and major upgrades to NetBox. Customers are assigned to one of these windows based on their time zone. London (UK): 7:00\u20139:00 am (Local London time, year-round) US Eastern Time: 6:00\u20138:00 am (Local ET, year-round) Note These windows always follow local clocks in London and New York. Times automatically adjust with daylight saving. We will not perform upgrades during these windows without first notifying affected customers. If an upgrade is scheduled, customers will receive advance notice with details about the changes and any potential impact on their service. If you have any questions about these upgrade windows or anything else related to NetBox Cloud, please reach out to the NetBox Labs Support Team. We are happy to assist via email or schedule a call at your convenience.","title":"NetBox Upgrade Maintenance Windows"},{"location":"maintenance/#general-system-maintenance-windows","text":"There are weekly maintenance windows for the NetBox Cloud Platform on Tuesdays and Thursdays between the hours of 7:00\u20139:00 am (Local London time, year-round) These windows are designated for routine maintenance on the infrastructure supporting the NetBox Labs Console, NetBox Cloud instances, and other cloud products and services offered by NetBox Labs. This includes applying necessary security patches and making other infrastructure adjustments to enhance reliability, security, and performance. Not every maintenance window will be utilized, and when maintenance is performed, we always strive to complete it with no disruption to your service. If downtime is unavoidable, it is expected to last only a few minutes. In the rare case that extended downtime is required, we will provide advance notice and schedule a separate one-time maintenance window on status.netboxlabs.com . Routine Tuesday/Thursday maintenance windows will not be listed on the status page. If you have any automation jobs running during these maintenance windows, we recommend ensuring they include business logic to properly handle failed requests and/or adjusting their schedule to run outside the maintenance windows. Please don\u2019t hesitate to reach out to the NetBox Labs Support Team if you have any questions. We\u2019re happy to connect via call or email to assist you.","title":"General System Maintenance Windows"},{"location":"product_feature_lifecycle/","text":"NetBox Labs Product and Feature Lifecycle NetBox Labs products and features can go through multiple release stages before becoming generally available. These stages in the release life cycle can present varying degrees of stability and support. The following are the NetBox Labs release stages: Experimental Private Preview Public Preview General Availability (GA) Quick Reference Experimental Private Preview Public Preview General Availability (GA) Audience Internal Invited customers Early adopters and users who request access Available to all customers at the appropriate tier Risk High (unknown) risk Medium-high risk Low-medium risk Low (known) risk Support Not supported Limited support through product and engineering Support limited to enablement and configuration Fully supported Documentation Code comments Unofficial; communicated with participants Limited; publicly available Publicly available Full Definitions Experimental This stage is for internal testing within the company. Products or features under this category are in their initial development phases, with high risks associated due to unknown variables. They are not supported and documentation is typically limited to code comments, aiming to gather preliminary insights and feedback internally. Private Preview At this stage, products or features are shared with a select group of invited customers. This allows for more focused feedback and testing under real-world conditions, albeit with a medium-high risk. Support is limited and direct through product and engineering teams, with documentation being unofficial and primarily communicated directly with the participants. Public Preview During the Public Preview, products or features are made available to early adopters and users who specifically request access. This phase aims to broaden the feedback loop and iron out any remaining issues, presenting a low to medium risk. Support is available but generally limited to enablement and configuration advice, with documentation becoming more accessible but still considered limited. General Availability Once a product or feature reaches General Availability, it is available to all customers at the appropriate tier, marking its full release. The risk associated with using these products or features is low, as they are considered stable and reliable. Full support is provided at this stage, and documentation is comprehensive and publicly available. Please don\u2019t hesitate to contact us if you have any questions about this or you would like to discuss getting access to Private Preview or Public Preview products or features.","title":"Product and Feature Lifecycle"},{"location":"product_feature_lifecycle/#netbox-labs-product-and-feature-lifecycle","text":"NetBox Labs products and features can go through multiple release stages before becoming generally available. These stages in the release life cycle can present varying degrees of stability and support. The following are the NetBox Labs release stages: Experimental Private Preview Public Preview General Availability (GA)","title":"NetBox Labs Product and Feature Lifecycle"},{"location":"product_feature_lifecycle/#quick-reference","text":"Experimental Private Preview Public Preview General Availability (GA) Audience Internal Invited customers Early adopters and users who request access Available to all customers at the appropriate tier Risk High (unknown) risk Medium-high risk Low-medium risk Low (known) risk Support Not supported Limited support through product and engineering Support limited to enablement and configuration Fully supported Documentation Code comments Unofficial; communicated with participants Limited; publicly available Publicly available","title":"Quick Reference"},{"location":"product_feature_lifecycle/#full-definitions","text":"","title":"Full Definitions"},{"location":"product_feature_lifecycle/#experimental","text":"This stage is for internal testing within the company. Products or features under this category are in their initial development phases, with high risks associated due to unknown variables. They are not supported and documentation is typically limited to code comments, aiming to gather preliminary insights and feedback internally.","title":"Experimental"},{"location":"product_feature_lifecycle/#private-preview","text":"At this stage, products or features are shared with a select group of invited customers. This allows for more focused feedback and testing under real-world conditions, albeit with a medium-high risk. Support is limited and direct through product and engineering teams, with documentation being unofficial and primarily communicated directly with the participants.","title":"Private Preview"},{"location":"product_feature_lifecycle/#public-preview","text":"During the Public Preview, products or features are made available to early adopters and users who specifically request access. This phase aims to broaden the feedback loop and iron out any remaining issues, presenting a low to medium risk. Support is available but generally limited to enablement and configuration advice, with documentation becoming more accessible but still considered limited.","title":"Public Preview"},{"location":"product_feature_lifecycle/#general-availability","text":"Once a product or feature reaches General Availability, it is available to all customers at the appropriate tier, marking its full release. The risk associated with using these products or features is low, as they are considered stable and reliable. Full support is provided at this stage, and documentation is comprehensive and publicly available. Please don\u2019t hesitate to contact us if you have any questions about this or you would like to discuss getting access to Private Preview or Public Preview products or features.","title":"General Availability"},{"location":"administration-console/azure-ad-sso-setup/","tags":["cloud","authentication","administration","configuration","getting-started","integration"],"text":"Microsoft Entra ID Setup (formerly Azure Active Directory) This guide explains how to configure single sign-on (SSO) support for NetBox Cloud using Microsoft Entra ID (formerly Azure Active Directory) as an authentication backend. Entra ID Configuration Create a test user (optional) Create a new Entra ID user to be used for testing. You can skip this step if you already have a suitable account created. Create an app registration Under the Microsoft Entra ID dashboard, navigate to Add > App registration . Enter a name for the registration (e.g. \"NetBox Cloud\") and ensure that the \"single tenant\" option is selected. Under \"Redirect URI\", select \"Web\" for the platform and enter the path to your NetBox Cloud installation, ending with /oauth/complete/azuread-oauth2/. Eg. https://{your-domain}.cloud.netboxapp.com/oauth/complete/azuread-oauth2/ Once finished, make note of the application (client) ID; this will be used when configuring NetBox Cloud. Multitenant authentication NetBox also supports multitenant authentication via Entra ID, however it requires a different backend and an additional configuration parameter. Please see the python-social-auth documentation for details concerning multitenant authentication. Create a secret When viewing the newly-created app registration, click the \"Add a certificate or secret\" link under \"Client credentials\". Under the \"Client secrets\" tab, click the \"New client secret\" button. You can optionally specify a description and select a lifetime for the secret. Once finished, make note of the secret value (not the secret ID); this will be used when configuring NetBox Cloud. NetBox Cloud Configuration Securely share the following configuration parameters with NetBox Labs Support , substituting your own values: REMOTE_AUTH_BACKEND = 'social_core.backends.azuread.AzureADOAuth2' SOCIAL_AUTH_AZUREAD_OAUTH2_KEY = '{APPLICATION_ID}' SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET = '{SECRET_VALUE}' The support team will add these parameters to your NetBox Cloud instance and confirm when this is ready for testing. Testing Log out of NetBox Cloud if already authenticated, and click the \"Log In\" button at top right. You should see the normal login form as well as an option to authenticate using Entra ID. Click that link. You should be redirected to Microsoft's authentication portal. Enter the username/email and password of your account to continue. You may also be prompted to grant this application access to your account. If successful, you will be redirected back to the NetBox Cloud UI, and will be logged in as the Entra ID user. You can verify this by navigating to your profile (using the button at top right). This user account has been replicated locally to NetBox Cloud, and can now be assigned groups and permissions within the NetBox Cloud admin UI. Troubleshooting Redirect URI does not Match Entra ID requires that the authenticating client request a redirect URI that matches what you've configured for the app in step two. This URI must begin with https:// Not Logged in After Authenticating If you are redirected to the NetBox Cloud UI after authenticating successfully, but are not logged in, double-check the configured backend and app registration. The instructions in this guide pertain only to the azuread.AzureADOAuth2 backend using a single-tenant app registration.","title":"Microsoft Entra ID SSO"},{"location":"administration-console/azure-ad-sso-setup/#microsoft-entra-id-setup-formerly-azure-active-directory","text":"This guide explains how to configure single sign-on (SSO) support for NetBox Cloud using Microsoft Entra ID (formerly Azure Active Directory) as an authentication backend.","title":"Microsoft Entra ID Setup (formerly Azure Active Directory)"},{"location":"administration-console/azure-ad-sso-setup/#entra-id-configuration","text":"Create a test user (optional) Create a new Entra ID user to be used for testing. You can skip this step if you already have a suitable account created. Create an app registration Under the Microsoft Entra ID dashboard, navigate to Add > App registration . Enter a name for the registration (e.g. \"NetBox Cloud\") and ensure that the \"single tenant\" option is selected. Under \"Redirect URI\", select \"Web\" for the platform and enter the path to your NetBox Cloud installation, ending with /oauth/complete/azuread-oauth2/. Eg. https://{your-domain}.cloud.netboxapp.com/oauth/complete/azuread-oauth2/ Once finished, make note of the application (client) ID; this will be used when configuring NetBox Cloud. Multitenant authentication NetBox also supports multitenant authentication via Entra ID, however it requires a different backend and an additional configuration parameter. Please see the python-social-auth documentation for details concerning multitenant authentication. Create a secret When viewing the newly-created app registration, click the \"Add a certificate or secret\" link under \"Client credentials\". Under the \"Client secrets\" tab, click the \"New client secret\" button. You can optionally specify a description and select a lifetime for the secret. Once finished, make note of the secret value (not the secret ID); this will be used when configuring NetBox Cloud.","title":"Entra ID Configuration"},{"location":"administration-console/azure-ad-sso-setup/#netbox-cloud-configuration","text":"Securely share the following configuration parameters with NetBox Labs Support , substituting your own values: REMOTE_AUTH_BACKEND = 'social_core.backends.azuread.AzureADOAuth2' SOCIAL_AUTH_AZUREAD_OAUTH2_KEY = '{APPLICATION_ID}' SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET = '{SECRET_VALUE}' The support team will add these parameters to your NetBox Cloud instance and confirm when this is ready for testing.","title":"NetBox Cloud Configuration"},{"location":"administration-console/azure-ad-sso-setup/#testing","text":"Log out of NetBox Cloud if already authenticated, and click the \"Log In\" button at top right. You should see the normal login form as well as an option to authenticate using Entra ID. Click that link. You should be redirected to Microsoft's authentication portal. Enter the username/email and password of your account to continue. You may also be prompted to grant this application access to your account. If successful, you will be redirected back to the NetBox Cloud UI, and will be logged in as the Entra ID user. You can verify this by navigating to your profile (using the button at top right). This user account has been replicated locally to NetBox Cloud, and can now be assigned groups and permissions within the NetBox Cloud admin UI.","title":"Testing"},{"location":"administration-console/azure-ad-sso-setup/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"administration-console/azure-ad-sso-setup/#redirect-uri-does-not-match","text":"Entra ID requires that the authenticating client request a redirect URI that matches what you've configured for the app in step two. This URI must begin with https://","title":"Redirect URI does not Match"},{"location":"administration-console/azure-ad-sso-setup/#not-logged-in-after-authenticating","text":"If you are redirected to the NetBox Cloud UI after authenticating successfully, but are not logged in, double-check the configured backend and app registration. The instructions in this guide pertain only to the azuread.AzureADOAuth2 backend using a single-tenant app registration.","title":"Not Logged in After Authenticating"},{"location":"administration-console/azure-group-mapping/","tags":["cloud","netbox","administration","authentication","azure-ad","configuration"],"text":"Group Mapping For Microsoft Entra ID Single Sign-On (SSO) Upgrade your Single Sign-On experience with Group Mapping for Microsoft Entra ID SSO \u2013 a smarter, more secure way to manage user access. The Group Mapping feature for Entra ID Single Sign-On, streamlines the synchronization of group memberships from Microsoft Entra ID to groups in NetBox Cloud, allowing you to align your user access efficiently and accurately. Info This feature is only available in Pro/Enterprise tiers. Changes in Microsoft Entra ID groups are reflected in NetBox Cloud, ensuring up-to-date access management and enhanced security. You can tailor the group mapping to your organizational needs while maintaining strict security and compliance standards. If you are already securing access to NetBox Cloud using Entra ID for SSO, and would like use the Group Mapping feature it's easy to get set up. Simply create your groups and permissions in NetBox Cloud, then set up your groups in Entra ID and reach out to the support team at NetBox Labs and we will take care of the group mappings for you to suit your requirements. Note We've made some important updates to the Entra ID user group sync feature that may affect group memberships and permissions of Entra ID SSO users accessing NetBox Cloud. To support enterprise Entra ID environments, we've added pagination to retrieve large lists (100+) of membership groups for users. To support NetBox group assignments from Entra ID nested groups, we've changed the Microsoft API endpoint used for group retrieval from memberOf to transitiveMemberOf . This means that users will now be made members of NetBox user groups based on the configured group mappings for both direct membership Entra ID groups and transitive Entra ID groups (parent groups of direct membership groups). Under specific conditions, users may gain additional group memberships and permissions. We strongly advise you review your NetBox Cloud and Entra ID user, group and permission configurations to ensure they align to your security requirements. Watch the video below for a step-by-step example of how the Group Mapping feature works, or read on for an explanation. How it Works Group mappings are based on the Object ID of the group in Entra ID. For example: The Object ID is mapped to a group in NetBox Cloud, and that group could have permissions assigned to it. For example, this group called CircuitManager in NetBox Cloud has permissions assigned to it that allows members of the group to manage all of the Circuit and Provider object types: Optionally, members of the Entra ID groups can also be members of the NetBox built-in groups Staff which allows access to the NetBox admin interface, and Superuser which has all permissions without explicitly assigning them. The NetBox Labs support team will map your Entra ID Group Object ID's to your NetBox Cloud groups, for example: Entra ID Group Object ID NetBox Cloud Group Staff Super User 1a36bed9-3bdc-4970-ab66-faf9704e0af4 Circuit Manager Yes No How Do I Get it Set Up? Simply provide us with your requirements in terms of object IDs and NetBox groups and we will take care of the rest. If you have any questions about Group Mapping for Entra ID Single Sign-On (SSO), please raise a support ticket by emailing the NetBox Labs Support Team .","title":"Entra ID Group Mapping"},{"location":"administration-console/azure-group-mapping/#group-mapping-for-microsoft-entra-id-single-sign-on-sso","text":"Upgrade your Single Sign-On experience with Group Mapping for Microsoft Entra ID SSO \u2013 a smarter, more secure way to manage user access. The Group Mapping feature for Entra ID Single Sign-On, streamlines the synchronization of group memberships from Microsoft Entra ID to groups in NetBox Cloud, allowing you to align your user access efficiently and accurately. Info This feature is only available in Pro/Enterprise tiers. Changes in Microsoft Entra ID groups are reflected in NetBox Cloud, ensuring up-to-date access management and enhanced security. You can tailor the group mapping to your organizational needs while maintaining strict security and compliance standards. If you are already securing access to NetBox Cloud using Entra ID for SSO, and would like use the Group Mapping feature it's easy to get set up. Simply create your groups and permissions in NetBox Cloud, then set up your groups in Entra ID and reach out to the support team at NetBox Labs and we will take care of the group mappings for you to suit your requirements. Note We've made some important updates to the Entra ID user group sync feature that may affect group memberships and permissions of Entra ID SSO users accessing NetBox Cloud. To support enterprise Entra ID environments, we've added pagination to retrieve large lists (100+) of membership groups for users. To support NetBox group assignments from Entra ID nested groups, we've changed the Microsoft API endpoint used for group retrieval from memberOf to transitiveMemberOf . This means that users will now be made members of NetBox user groups based on the configured group mappings for both direct membership Entra ID groups and transitive Entra ID groups (parent groups of direct membership groups). Under specific conditions, users may gain additional group memberships and permissions. We strongly advise you review your NetBox Cloud and Entra ID user, group and permission configurations to ensure they align to your security requirements. Watch the video below for a step-by-step example of how the Group Mapping feature works, or read on for an explanation.","title":"Group Mapping For Microsoft Entra ID Single Sign-On (SSO)"},{"location":"administration-console/azure-group-mapping/#how-it-works","text":"Group mappings are based on the Object ID of the group in Entra ID. For example: The Object ID is mapped to a group in NetBox Cloud, and that group could have permissions assigned to it. For example, this group called CircuitManager in NetBox Cloud has permissions assigned to it that allows members of the group to manage all of the Circuit and Provider object types: Optionally, members of the Entra ID groups can also be members of the NetBox built-in groups Staff which allows access to the NetBox admin interface, and Superuser which has all permissions without explicitly assigning them. The NetBox Labs support team will map your Entra ID Group Object ID's to your NetBox Cloud groups, for example: Entra ID Group Object ID NetBox Cloud Group Staff Super User 1a36bed9-3bdc-4970-ab66-faf9704e0af4 Circuit Manager Yes No","title":"How it Works"},{"location":"administration-console/azure-group-mapping/#how-do-i-get-it-set-up","text":"Simply provide us with your requirements in terms of object IDs and NetBox groups and we will take care of the rest. If you have any questions about Group Mapping for Entra ID Single Sign-On (SSO), please raise a support ticket by emailing the NetBox Labs Support Team .","title":"How Do I Get it Set Up?"},{"location":"administration-console/console-access/","tags":["cloud","netbox","administration","getting-started","authentication","security","configuration","troubleshooting"],"text":"NetBox Cloud Console Access You should already have access to the NetBox Labs Console when you sign up for NetBox Cloud. How to Access the Console There are two ways to access the NetBox Labs Console: Option 1: Direct URL Access Simply go directly to the NetBox Labs Console in your browser. Option 2: Access from NetBox Cloud UI From within the NetBox Cloud Web Interface, you can easily switch to the NetBox Labs Console: In the left hand main menu, click to expand the NetBox Labs plugin menu, and then click on Open Console : This will take you directly to the NetBox Labs Console login page. Requesting Console Access If you don't already have access to the console, you can request it by: Clicking Request Console Access in the NetBox Labs plugin menu from the NetBox Cloud web interface Then clicking the link to email the NetBox Labs Support Team to request access Note If you encounter any issues when accessing the NetBox Labs Console, raise a support ticket by emailing the NetBox Labs Support Team Login and Account Setup The NetBox Cloud team will set up your account with your email address as the username. You can login to the NetBox Labs Console using: Email/Password : Your email address and the password you set up when your account was created Single Sign-On (SSO) : Providers such as Google, GitHub, and Microsoft Enterprise SSO : Your organization's Identity Provider (IdP) if configured Using the Console Once logged in, you will see all the NetBox Cloud instances running under your Organization, which you can administer from the console. Accessing Your NetBox Cloud Instances To access a specific NetBox Cloud instance: Get the credentials : Click to reveal or copy the admin credentials from the Credentials section: Open the instance : Click on either of the links to open the NetBox Cloud interface in a new browser window: Login to NetBox Cloud : Use the username and password you copied from step 1:","title":"Getting Console Access"},{"location":"administration-console/console-access/#netbox-cloud-console-access","text":"You should already have access to the NetBox Labs Console when you sign up for NetBox Cloud.","title":"NetBox Cloud Console Access"},{"location":"administration-console/console-access/#how-to-access-the-console","text":"There are two ways to access the NetBox Labs Console:","title":"How to Access the Console"},{"location":"administration-console/console-access/#option-1-direct-url-access","text":"Simply go directly to the NetBox Labs Console in your browser.","title":"Option 1: Direct URL Access"},{"location":"administration-console/console-access/#option-2-access-from-netbox-cloud-ui","text":"From within the NetBox Cloud Web Interface, you can easily switch to the NetBox Labs Console: In the left hand main menu, click to expand the NetBox Labs plugin menu, and then click on Open Console : This will take you directly to the NetBox Labs Console login page.","title":"Option 2: Access from NetBox Cloud UI"},{"location":"administration-console/console-access/#requesting-console-access","text":"If you don't already have access to the console, you can request it by: Clicking Request Console Access in the NetBox Labs plugin menu from the NetBox Cloud web interface Then clicking the link to email the NetBox Labs Support Team to request access Note If you encounter any issues when accessing the NetBox Labs Console, raise a support ticket by emailing the NetBox Labs Support Team","title":"Requesting Console Access"},{"location":"administration-console/console-access/#login-and-account-setup","text":"The NetBox Cloud team will set up your account with your email address as the username. You can login to the NetBox Labs Console using: Email/Password : Your email address and the password you set up when your account was created Single Sign-On (SSO) : Providers such as Google, GitHub, and Microsoft Enterprise SSO : Your organization's Identity Provider (IdP) if configured","title":"Login and Account Setup"},{"location":"administration-console/console-access/#using-the-console","text":"Once logged in, you will see all the NetBox Cloud instances running under your Organization, which you can administer from the console.","title":"Using the Console"},{"location":"administration-console/console-access/#accessing-your-netbox-cloud-instances","text":"To access a specific NetBox Cloud instance: Get the credentials : Click to reveal or copy the admin credentials from the Credentials section: Open the instance : Click on either of the links to open the NetBox Cloud interface in a new browser window: Login to NetBox Cloud : Use the username and password you copied from step 1:","title":"Accessing Your NetBox Cloud Instances"},{"location":"administration-console/console-administration/","tags":["cloud","netbox","administration","configuration","security","users"],"text":"Console Administration This guide covers administrative tasks for the NetBox Labs Console, including managing administrator accounts and console settings. Managing Administrator Accounts Inviting Additional Administrators To invite additional administrators to the NetBox Cloud Console: Login to the NetBox Labs Console Click on Settings and then click on Administrators : Enter the email address for the administrator you wish to invite and then click Invite : The invited user will receive an email with instructions to set up their console account Administrator Permissions Console administrators have access to: Instance Management : Start, stop, and monitor NetBox Cloud instances User Management : Invite and manage other console administrators Configuration Access : View and modify instance configurations Backup Operations : Create, download, and restore database backups Upgrade Management : Manage NetBox version upgrades Support Access : View logs and system information for troubleshooting Console Settings Organization Settings Console administrators can manage organization-level settings including: Billing Information : View and update billing details Instance Limits : Monitor usage against plan limits Support Contacts : Manage support ticket routing Security Settings Access Control : Manage who can access the console Activity Monitoring : Review console access logs Session Management : Configure timeout settings Best Practices Administrator Management Limit Administrator Access : Only grant console admin access to users who need it Regular Review : Periodically review and remove unnecessary admin accounts Use Corporate Email : Ensure all administrators use corporate email addresses Security Enable 2FA : Require two-factor authentication for all administrators Monitor Activity : Regularly review console access logs Incident Response : Have a plan for responding to security incidents Note If you encounter any issues with console administration, raise a support ticket by emailing the NetBox Labs Support Team","title":"Adding Admin Users"},{"location":"administration-console/console-administration/#console-administration","text":"This guide covers administrative tasks for the NetBox Labs Console, including managing administrator accounts and console settings.","title":"Console Administration"},{"location":"administration-console/console-administration/#managing-administrator-accounts","text":"","title":"Managing Administrator Accounts"},{"location":"administration-console/console-administration/#inviting-additional-administrators","text":"To invite additional administrators to the NetBox Cloud Console: Login to the NetBox Labs Console Click on Settings and then click on Administrators : Enter the email address for the administrator you wish to invite and then click Invite : The invited user will receive an email with instructions to set up their console account","title":"Inviting Additional Administrators"},{"location":"administration-console/console-administration/#administrator-permissions","text":"Console administrators have access to: Instance Management : Start, stop, and monitor NetBox Cloud instances User Management : Invite and manage other console administrators Configuration Access : View and modify instance configurations Backup Operations : Create, download, and restore database backups Upgrade Management : Manage NetBox version upgrades Support Access : View logs and system information for troubleshooting","title":"Administrator Permissions"},{"location":"administration-console/console-administration/#console-settings","text":"","title":"Console Settings"},{"location":"administration-console/console-administration/#organization-settings","text":"Console administrators can manage organization-level settings including: Billing Information : View and update billing details Instance Limits : Monitor usage against plan limits Support Contacts : Manage support ticket routing","title":"Organization Settings"},{"location":"administration-console/console-administration/#security-settings","text":"Access Control : Manage who can access the console Activity Monitoring : Review console access logs Session Management : Configure timeout settings","title":"Security Settings"},{"location":"administration-console/console-administration/#best-practices","text":"","title":"Best Practices"},{"location":"administration-console/console-administration/#administrator-management","text":"Limit Administrator Access : Only grant console admin access to users who need it Regular Review : Periodically review and remove unnecessary admin accounts Use Corporate Email : Ensure all administrators use corporate email addresses","title":"Administrator Management"},{"location":"administration-console/console-administration/#security","text":"Enable 2FA : Require two-factor authentication for all administrators Monitor Activity : Regularly review console access logs Incident Response : Have a plan for responding to security incidents Note If you encounter any issues with console administration, raise a support ticket by emailing the NetBox Labs Support Team","title":"Security"},{"location":"administration-console/console-overview/","tags":["cloud","netbox","administration","getting-started","configuration","networking","automation"],"text":"NetBox Cloud: Administrative Console Overview Console Access For detailed instructions on accessing the console, see Getting Console Access . This overview focuses on the features and interface of the Administrative Console once you're logged in. Summary View This compressed full page screenshot breaks the full Administrative Console down into similar sections. Each section is designed to give you greater insight to your NetBox instance. Section Breakdown 1. Information Panel The Information Panel provides a view of basic information relating to your NetBox Cloud instance. Here you will find the name of your NetBox Cloud instance within your Organization's Namespace, along with the AWS Region and the NetBox version. You also have a link to the instance raw URL, plus a refresh button for the instance data. 2. NetBox Deployment The NetBox Deployment panel lists various service and configuration status points. Included will be the current version, and version upgrade controls, the number of instance replicas, and resource allocations. The instance image and namespace are also listed here. The left circle icon (stop button) will stop the running NetBox Cloud instance. The center circle icon (play button) will start the NetBox Cloud instance. The right refresh icon will refresh the data in the panel. The Version number with the smaller font displays the current NetBox version The Version drop down lists versions of NetBox that can be changed to. The cloud icon will illuminate if you select a different version of NetBox. The cloud icon will change NetBox to the selected version. The Secrets section provides access to the current secret credentials for the instance API Token, local \"admin\" user account and Secret Key. When the Administrative Console initially loads these values will be hidden. Clicking the open eye will reveal the secret details Clicking the closed eye will conceal the secret details Clicking the copy icon will copy the secret to your clipboard 3. Ingress The Ingress panel gives the Name, Domain and DNS Name information for the NetBox Cloud instance, as well as the number of Ingress Pods and the Load Balancer status. 4. Storage The Storage Panel contains information on the storage bucket, user, and access key ID. Clicking the open eye will reveal the Access Key secret details. 5. Postgres The Postgres Database panel (left) gives the current status of the database, along with details of the host, username and database name for the instance. Clicking the open eye will reveal the Postgres Database secret details. The Postgres panel (right) gives the number of database instances, their status, instance names, version, Aurora capacity unit consumption, current configured backup retention period, and security group IDs. Clicking the open eye will reveal the Postgres secret details. 6. Redis The Redis Database panel (left) gives the name, status, host, user, and ID of the Main and Cache Redis databases. The Redis panel (right) gives the name, status, resource, image and version information for the Redis instance. Clicking the open eye will reveal the Redis secret details. 7. Advanced Configuration 7b. Ingress Allow List If the Ingress Allow List is configured, then inbound Web/API traffic will only be permitted to either IPv4 or IPv6 CIDR ranges listed on the Ingress Allow List. 7c. NetBox Configmap ENV This NetBox Configmap ENV allows you to view or manage the underlying variables for the instance 7d. NetBox Startup Configmaps The NetBox Startup Configmaps (redacted screenshot) allows you to view or manage the underlying configmaps for the instance. 8. Pod Info/Logs The Pods screen allows you to view the underlying composition of the instance. This includes versions, operational status, vCPU and Memory information. The refresh button will give you the up-to-date information for all pods. The multi line icon will load the current log for the selected object in each pod.","title":"Console Overview"},{"location":"administration-console/console-overview/#netbox-cloud-administrative-console-overview","text":"","title":"NetBox Cloud: Administrative Console Overview"},{"location":"administration-console/console-overview/#console-access","text":"For detailed instructions on accessing the console, see Getting Console Access . This overview focuses on the features and interface of the Administrative Console once you're logged in.","title":"Console Access"},{"location":"administration-console/console-overview/#summary-view","text":"This compressed full page screenshot breaks the full Administrative Console down into similar sections. Each section is designed to give you greater insight to your NetBox instance.","title":"Summary View"},{"location":"administration-console/console-overview/#section-breakdown","text":"","title":"Section Breakdown"},{"location":"administration-console/console-overview/#1-information-panel","text":"The Information Panel provides a view of basic information relating to your NetBox Cloud instance. Here you will find the name of your NetBox Cloud instance within your Organization's Namespace, along with the AWS Region and the NetBox version. You also have a link to the instance raw URL, plus a refresh button for the instance data.","title":"1. Information Panel"},{"location":"administration-console/console-overview/#2-netbox-deployment","text":"The NetBox Deployment panel lists various service and configuration status points. Included will be the current version, and version upgrade controls, the number of instance replicas, and resource allocations. The instance image and namespace are also listed here. The left circle icon (stop button) will stop the running NetBox Cloud instance. The center circle icon (play button) will start the NetBox Cloud instance. The right refresh icon will refresh the data in the panel. The Version number with the smaller font displays the current NetBox version The Version drop down lists versions of NetBox that can be changed to. The cloud icon will illuminate if you select a different version of NetBox. The cloud icon will change NetBox to the selected version. The Secrets section provides access to the current secret credentials for the instance API Token, local \"admin\" user account and Secret Key. When the Administrative Console initially loads these values will be hidden. Clicking the open eye will reveal the secret details Clicking the closed eye will conceal the secret details Clicking the copy icon will copy the secret to your clipboard","title":"2. NetBox Deployment"},{"location":"administration-console/console-overview/#3-ingress","text":"The Ingress panel gives the Name, Domain and DNS Name information for the NetBox Cloud instance, as well as the number of Ingress Pods and the Load Balancer status.","title":"3. Ingress"},{"location":"administration-console/console-overview/#4-storage","text":"The Storage Panel contains information on the storage bucket, user, and access key ID. Clicking the open eye will reveal the Access Key secret details.","title":"4. Storage"},{"location":"administration-console/console-overview/#5-postgres","text":"The Postgres Database panel (left) gives the current status of the database, along with details of the host, username and database name for the instance. Clicking the open eye will reveal the Postgres Database secret details. The Postgres panel (right) gives the number of database instances, their status, instance names, version, Aurora capacity unit consumption, current configured backup retention period, and security group IDs. Clicking the open eye will reveal the Postgres secret details.","title":"5. Postgres"},{"location":"administration-console/console-overview/#6-redis","text":"The Redis Database panel (left) gives the name, status, host, user, and ID of the Main and Cache Redis databases. The Redis panel (right) gives the name, status, resource, image and version information for the Redis instance. Clicking the open eye will reveal the Redis secret details.","title":"6. Redis"},{"location":"administration-console/console-overview/#7-advanced-configuration","text":"","title":"7. Advanced Configuration"},{"location":"administration-console/console-overview/#8-pod-infologs","text":"The Pods screen allows you to view the underlying composition of the instance. This includes versions, operational status, vCPU and Memory information. The refresh button will give you the up-to-date information for all pods. The multi line icon will load the current log for the selected object in each pod.","title":"8. Pod Info/Logs"},{"location":"administration-console/free-plan-features/","tags":["cloud","netbox","administration","getting-started","configuration","billing","features","limitations","networking","automation"],"text":"NetBox Cloud Free Plan Features The NetBox Cloud Free Plan is perfect for small networks, lab environments, and targeted use cases. It includes up to 100 devices, 500 IP addresses, 10k API requests/month, and 2 operational branches. Free Plan Features in Detail The following features are enabled in the NetBox Cloud Free Plan: Devices : 100 IP Addresses : 500 API Requests : 10,000 per month File Upload Size : Maximum 5MB Backup Frequency : Once per day Branching Enabled : Maximum of 2 operational branches Prefix List Entries : Maximum of 10 entries Upgrades : Automatic If you need more, or you need features like advanced SSO, Plugins, Webhooks, Custom Scripts, Custom Hostnames, the ability to work with backups, commercial support, and more, check out our paid plans .","title":"Features"},{"location":"administration-console/free-plan-features/#netbox-cloud-free-plan-features","text":"The NetBox Cloud Free Plan is perfect for small networks, lab environments, and targeted use cases. It includes up to 100 devices, 500 IP addresses, 10k API requests/month, and 2 operational branches.","title":"NetBox Cloud Free Plan Features"},{"location":"administration-console/free-plan-features/#free-plan-features-in-detail","text":"The following features are enabled in the NetBox Cloud Free Plan: Devices : 100 IP Addresses : 500 API Requests : 10,000 per month File Upload Size : Maximum 5MB Backup Frequency : Once per day Branching Enabled : Maximum of 2 operational branches Prefix List Entries : Maximum of 10 entries Upgrades : Automatic If you need more, or you need features like advanced SSO, Plugins, Webhooks, Custom Scripts, Custom Hostnames, the ability to work with backups, commercial support, and more, check out our paid plans .","title":"Free Plan Features in Detail"},{"location":"administration-console/free-plan-new-user/","tags":["cloud","netbox","administration","getting-started","configuration","billing"],"text":"Add a New User to Free Plan To invite a new user to a NetBox Cloud Free instance, the user will need to have a valid email address, and be added as an administrator in the NetBox Labs Console. From within the NetBox Labs Console , expand Settings and select Administrators Type the user's email address in the box, and click Invite Click Continue to confirm the email address to be invited An email will be sent containing a temporary password for the Console Have the user login with the temporary information, and it will prompt for a new password to be set The user can now login to the Console and click the link to access the instance Login to the instance by clicking the auth button and using the same credentials that were just setup","title":"Add a New User"},{"location":"administration-console/free-plan-new-user/#add-a-new-user-to-free-plan","text":"To invite a new user to a NetBox Cloud Free instance, the user will need to have a valid email address, and be added as an administrator in the NetBox Labs Console. From within the NetBox Labs Console , expand Settings and select Administrators Type the user's email address in the box, and click Invite Click Continue to confirm the email address to be invited An email will be sent containing a temporary password for the Console Have the user login with the temporary information, and it will prompt for a new password to be set The user can now login to the Console and click the link to access the instance Login to the instance by clicking the auth button and using the same credentials that were just setup","title":"Add a New User to Free Plan"},{"location":"administration-console/managing-hostnames/","tags":["cloud","netbox","administration","networking","configuration","dns"],"text":"NetBox Cloud Hostnames From within the NetBox Labs Console click on Settings and then Hostnames Manager in the left-hand main menu to view the settings for your Organization: From here you can view the Hostnames configured for your organization. Under NetBox you can see which NetBox instance is associated with a given hostname, and what Category the hostname is: Hostname Categories: Hostname categories are defined as follows: Category Definition platform random A randomly generated hostname created when a new NetBox Cloud instance is created, usually as a trial. platform custom A custom hostname on the NetBox Cloud platform (e.g., abcwidgets.cloud.netboxapp.com ) - available for all paid plans. org custom A custom hostname using your organization's own domain (e.g., netbox-prod.abcwidgets.com ) - available for Professional and Enterprise plans. Custom Hostnames Platform Custom Hostnames Platform Custom Hostnames (e.g., yourcompany.cloud.netboxapp.com ) are available for all NetBox Cloud paid plans and are typically set up automatically when you subscribe to a paid plan. Organization Custom Hostnames Organization Custom Hostnames allow you to use your own domain name (e.g., netbox.yourcompany.com ) and are available for NetBox Cloud Professional and Enterprise plans. If you would like to set up an organization custom hostname, please raise a support ticket by emailing the NetBox Labs Support Team .","title":"Managing Hostnames"},{"location":"administration-console/managing-hostnames/#netbox-cloud-hostnames","text":"From within the NetBox Labs Console click on Settings and then Hostnames Manager in the left-hand main menu to view the settings for your Organization: From here you can view the Hostnames configured for your organization. Under NetBox you can see which NetBox instance is associated with a given hostname, and what Category the hostname is:","title":"NetBox Cloud Hostnames"},{"location":"administration-console/managing-hostnames/#hostname-categories","text":"Hostname categories are defined as follows: Category Definition platform random A randomly generated hostname created when a new NetBox Cloud instance is created, usually as a trial. platform custom A custom hostname on the NetBox Cloud platform (e.g., abcwidgets.cloud.netboxapp.com ) - available for all paid plans. org custom A custom hostname using your organization's own domain (e.g., netbox-prod.abcwidgets.com ) - available for Professional and Enterprise plans.","title":"Hostname Categories:"},{"location":"administration-console/managing-hostnames/#custom-hostnames","text":"","title":"Custom Hostnames"},{"location":"administration-console/managing-hostnames/#platform-custom-hostnames","text":"Platform Custom Hostnames (e.g., yourcompany.cloud.netboxapp.com ) are available for all NetBox Cloud paid plans and are typically set up automatically when you subscribe to a paid plan.","title":"Platform Custom Hostnames"},{"location":"administration-console/managing-hostnames/#organization-custom-hostnames","text":"Organization Custom Hostnames allow you to use your own domain name (e.g., netbox.yourcompany.com ) and are available for NetBox Cloud Professional and Enterprise plans. If you would like to set up an organization custom hostname, please raise a support ticket by emailing the NetBox Labs Support Team .","title":"Organization Custom Hostnames"},{"location":"administration-console/netbox-cloud-plugins/","tags":["cloud","netbox","administration","configuration","plugins"],"text":"NetBox Cloud Plugins From within the NetBox Labs Console, you can easily view installed NetBox Cloud Plugins , along with their Scope and Version number . Simply follow these steps: From within the NetBox Labs Console click on the three dots in the top right corner of the NetBox Instance panel, and click Overview Scroll down to view the list of installed Plugins , their scopes and version numbers: Info There are two types of plugin scope - public for any plugins that are publicly available and organization for custom plugins.","title":"Viewing Installed Plugins"},{"location":"administration-console/netbox-cloud-plugins/#netbox-cloud-plugins","text":"From within the NetBox Labs Console, you can easily view installed NetBox Cloud Plugins , along with their Scope and Version number . Simply follow these steps: From within the NetBox Labs Console click on the three dots in the top right corner of the NetBox Instance panel, and click Overview Scroll down to view the list of installed Plugins , their scopes and version numbers: Info There are two types of plugin scope - public for any plugins that are publicly available and organization for custom plugins.","title":"NetBox Cloud Plugins"},{"location":"administration-console/okta-group-mapping/","tags":["cloud","netbox","administration","authentication","configuration"],"text":"Group Mapping For Okta Single Sign-On (SSO) Upgrade your Single Sign-On experience with Group Mapping for Okta SSO \u2013 a smarter, more secure way to manage user access. The Group Mapping feature for Okta Single Sign-On, streamlines the synchronization of group memberships from Okta to groups in NetBox Cloud, allowing you to align your user access efficiently and accurately. Changes in Okta groups are reflected in NetBox Cloud, ensuring up-to-date access management and enhanced security. You can tailor the group mapping to your organizational needs while maintaining strict security and compliance standards. If you are already securing access to NetBox Cloud using Okta for SSO, and would like use the Group Mapping feature it's easy to get set up. Simply create your groups and permissions in NetBox Cloud, then set up your groups in Okta and reach out to the support team at NetBox Labs and we will take care of the group mappings for you to suit your requirements. \u2139\ufe0f Note This feature is only available in Pro/Enterprise tiers. How it Works Group mappings are based on the name of the group in Okta, which is mapped to a group in NetBox Cloud, and that group could have permissions assigned to it. For example, this group called CircuitManager in NetBox Cloud has permissions assigned to it that allows members of the group to manage all of the Circuit and Provider object types: Optionally, members of the Okta groups can also be members of the NetBox built-in groups Staff which allows access to the NetBox admin interface, and Superuser which has all permissions without explicitly assigning them. The NetBox Labs support team will map your Okta group names to your NetBox Cloud groups, for example: Okta Group Name NetBox Cloud Group Staff Super User NetBox-Circuit-Mgrs Circuit Manager Yes No How Do I Get it Set Up? Simply provide us with your requirements in terms of Okta group names and NetBox groups and we will take care of the rest. If you have any questions about Group Mapping for Okta Sign-On (SSO), please raise a support ticket by emailing the NetBox Labs Support Team .","title":"Okta Group Mapping"},{"location":"administration-console/okta-group-mapping/#group-mapping-for-okta-single-sign-on-sso","text":"Upgrade your Single Sign-On experience with Group Mapping for Okta SSO \u2013 a smarter, more secure way to manage user access. The Group Mapping feature for Okta Single Sign-On, streamlines the synchronization of group memberships from Okta to groups in NetBox Cloud, allowing you to align your user access efficiently and accurately. Changes in Okta groups are reflected in NetBox Cloud, ensuring up-to-date access management and enhanced security. You can tailor the group mapping to your organizational needs while maintaining strict security and compliance standards. If you are already securing access to NetBox Cloud using Okta for SSO, and would like use the Group Mapping feature it's easy to get set up. Simply create your groups and permissions in NetBox Cloud, then set up your groups in Okta and reach out to the support team at NetBox Labs and we will take care of the group mappings for you to suit your requirements. \u2139\ufe0f Note This feature is only available in Pro/Enterprise tiers.","title":"Group Mapping For Okta Single Sign-On (SSO)"},{"location":"administration-console/okta-group-mapping/#how-it-works","text":"Group mappings are based on the name of the group in Okta, which is mapped to a group in NetBox Cloud, and that group could have permissions assigned to it. For example, this group called CircuitManager in NetBox Cloud has permissions assigned to it that allows members of the group to manage all of the Circuit and Provider object types: Optionally, members of the Okta groups can also be members of the NetBox built-in groups Staff which allows access to the NetBox admin interface, and Superuser which has all permissions without explicitly assigning them. The NetBox Labs support team will map your Okta group names to your NetBox Cloud groups, for example: Okta Group Name NetBox Cloud Group Staff Super User NetBox-Circuit-Mgrs Circuit Manager Yes No","title":"How it Works"},{"location":"administration-console/okta-group-mapping/#how-do-i-get-it-set-up","text":"Simply provide us with your requirements in terms of Okta group names and NetBox groups and we will take care of the rest. If you have any questions about Group Mapping for Okta Sign-On (SSO), please raise a support ticket by emailing the NetBox Labs Support Team .","title":"How Do I Get it Set Up?"},{"location":"administration-console/okta-sso-setup/","tags":["cloud","netbox","administration","authentication","configuration"],"text":"Okta SSO Setup This guide explains how to configure single sign-on (SSO) support for NetBox Cloud using Okta as an authentication backend. Okta Configuration Note that Okta offers free developer accounts Create a test user (optional) Create a new user in the Okta admin portal to be used for testing. You can skip this step if you already have a suitable account created. Create an app registration Within the Okta administration dashboard, navigate to Applications > Applications, and click the \"Create App Integration\" button. Select \"OIDC\" as the sign-in method, and \"Web application\" for the application type. On the next page, give the app integration a name (e.g. \"NetBox Cloud\") and specify the sign-in and sign-out URIs. These URIs should follow the formats below: Sign-in URI: https://{your-domain}.cloud.netboxapp.com/oauth/complete/okta-openidconnect/ Sign-out URI: https://{your-domain}.cloud.netboxapp.com/oauth/disconnect/okta-openidconnect/ Under \"Assignments,\" select the controlled access setting most appropriate for your organization. Click \"Save\" to complete the creation. Once finished, note the following parameters. These will be used to configured NetBox Cloud. Client ID Client secret Okta domain NetBox Cloud Configuration Securely share the following configuration parameters with NetBox Labs Support , substituting your own values: REMOTE_AUTH_BACKEND = 'social_core.backends.okta_openidconnect.OktaOpenIdConnect' SOCIAL_AUTH_OKTA_OPENIDCONNECT_KEY = '{Client ID}' SOCIAL_AUTH_OKTA_OPENIDCONNECT_SECRET = '{Client secret}' SOCIAL_AUTH_OKTA_OPENIDCONNECT_API_URL = 'https://{Okta domain}/oauth2/' The support team will add these parameters to your NetBox Cloud instance and confirm when this is ready for testing. Testing Log out of NetBox Cloud if already authenticated, and click the \"Log In\" button at top right. You should see the normal login form as well as an option to authenticate using Okta. Click that link. You should be redirected to Okta's authentication portal. Enter the username/email and password of your test account to continue. You may also be prompted to grant this application access to your account. If successful, you will be redirected back to the NetBox Cloud UI, and will be logged in as the Okta user. You can verify this by navigating to your profile (using the button at top right). This user account has been replicated locally to NetBox Cloud, and can now be assigned groups and permissions within the NetBox Cloud admin UI.","title":"Okta SSO"},{"location":"administration-console/okta-sso-setup/#okta-sso-setup","text":"This guide explains how to configure single sign-on (SSO) support for NetBox Cloud using Okta as an authentication backend.","title":"Okta SSO Setup"},{"location":"administration-console/okta-sso-setup/#okta-configuration","text":"Note that Okta offers free developer accounts Create a test user (optional) Create a new user in the Okta admin portal to be used for testing. You can skip this step if you already have a suitable account created. Create an app registration Within the Okta administration dashboard, navigate to Applications > Applications, and click the \"Create App Integration\" button. Select \"OIDC\" as the sign-in method, and \"Web application\" for the application type. On the next page, give the app integration a name (e.g. \"NetBox Cloud\") and specify the sign-in and sign-out URIs. These URIs should follow the formats below: Sign-in URI: https://{your-domain}.cloud.netboxapp.com/oauth/complete/okta-openidconnect/ Sign-out URI: https://{your-domain}.cloud.netboxapp.com/oauth/disconnect/okta-openidconnect/ Under \"Assignments,\" select the controlled access setting most appropriate for your organization. Click \"Save\" to complete the creation. Once finished, note the following parameters. These will be used to configured NetBox Cloud. Client ID Client secret Okta domain","title":"Okta Configuration"},{"location":"administration-console/okta-sso-setup/#netbox-cloud-configuration","text":"Securely share the following configuration parameters with NetBox Labs Support , substituting your own values: REMOTE_AUTH_BACKEND = 'social_core.backends.okta_openidconnect.OktaOpenIdConnect' SOCIAL_AUTH_OKTA_OPENIDCONNECT_KEY = '{Client ID}' SOCIAL_AUTH_OKTA_OPENIDCONNECT_SECRET = '{Client secret}' SOCIAL_AUTH_OKTA_OPENIDCONNECT_API_URL = 'https://{Okta domain}/oauth2/' The support team will add these parameters to your NetBox Cloud instance and confirm when this is ready for testing.","title":"NetBox Cloud Configuration"},{"location":"administration-console/okta-sso-setup/#testing","text":"Log out of NetBox Cloud if already authenticated, and click the \"Log In\" button at top right. You should see the normal login form as well as an option to authenticate using Okta. Click that link. You should be redirected to Okta's authentication portal. Enter the username/email and password of your test account to continue. You may also be prompted to grant this application access to your account. If successful, you will be redirected back to the NetBox Cloud UI, and will be logged in as the Okta user. You can verify this by navigating to your profile (using the button at top right). This user account has been replicated locally to NetBox Cloud, and can now be assigned groups and permissions within the NetBox Cloud admin UI.","title":"Testing"},{"location":"administration-console/prefix-lists/","tags":["cloud","netbox","administration","networking","configuration","ipam","security","automation"],"text":"Prefix Lists You can secure access to your NetBox Cloud instance by adding IPv4 and IPv6 addresses and ranges to Prefix Lists , which can then be applied to NetBox instances to control which source IPs your instances will accept connections from. The following features are available in the NetBox Labs Admin Console when working with prefix lists: Create, Edit and Delete prefix lists Synchronize prefix lists from a NetBox instance using tags There is also large list support (~15K prefixes) and separate prefixes can be applied to the NetBox Cloud UI, API and GraphQL interfaces. Note When you have built your prefix lists in the Admin Console, raise a support ticket by emailing the NetBox Labs Support Team and we will apply them to your NetBox Cloud instances. Create a Prefix List (not synchronized with a NetBox) From within the Admin Console, navigate to Settings in the left-hand menu Scroll down and click to expand the Prefix List section, and then click on Create Prefix List on the right hand side to start the wizard: Give the prefix list a name and then click CREATE PREFIX LIST : Enter the first prefix and give it a description. If you wish to add additional prefixes then you can also do that here by clicking + ADD ADDITIONAL PREFIX , then when you are happy click CREATE PREFIXES . Note - if you wish to add the IP address that you are currently using then click Use Current IP Address and this will add it to the prefix list: You can then view the prefix list from within Settings > Prefix List : Create a Prefix List (synchronized with a NetBox) From within the Admin Console, navigate to Settings in the left-hand menu Scroll down and click to expand the Prefix List section, and then click on Create Prefix List on the right hand side to start the wizard: Give the prefix list a name and then select the Yes radio button to sync the prefix list from a NetBox. Then select the NetBox instance you wish to sync from, specify the NetBox Tag that you wish to use, and then click CREATE PREFIX LIST : Switch to your NetBox instance, and go to Customization > Tags and create the required tag(s) to be applied to any prefixes that are to be synchronized to the Prefix List: Under IPAM > Prefixes add the prefixes, give them a description and tag them with the appropriate tag: You can then view the prefixes in NetBox under IPAM > Prefixes ( Tip - filter on the tag): Switch back to the Admin Console to view the prefix list from within Settings > Prefix List . Note - it can take a few minutes for the prefix list to be fully synchronized from NetBox. Edit a Prefix List Note - this only works for prefix lists that are not synchronized with a NetBox. To edit NetBox synchronized prefix lists you should make the edits within NetBox. From within the Admin Console, navigate to Settings in the left-hand menu, and then scroll down and click to expand the Prefix List section. Then click on the name of the prefix list you wish to edit: To add more prefixes to the list, click on Create Prefix and then follow the wizard again to add more prefixes. To edit a prefix, click EDIT and then make your required changes and then click EDIT PREFIX to save your changes: To delete a prefix, click DELETE and then if you are sure you wish to delete the prefix, click DELETE PREFIX when prompted: Delete a Prefix List Note - in order for a prefix list to be deleted it must first be detached from any NetBox instances that it is securing. You will need to contact support and request this before you can delete it. From within the Admin Console, navigate to Settings in the left-hand menu, and then scroll down and click to expand the Prefix List section. Then click on the name of the prefix list you wish to delete, and click DELETE PREFIX LIST : If you are sure you wish to delete the prefix list then click DELETE PREFIX LIST when you are prompted to confirm the deletion: If you encounter any issues while working with the IP Allow List raise a support ticket by emailing the NetBox Labs Support Team","title":"Prefix Lists"},{"location":"administration-console/prefix-lists/#prefix-lists","text":"You can secure access to your NetBox Cloud instance by adding IPv4 and IPv6 addresses and ranges to Prefix Lists , which can then be applied to NetBox instances to control which source IPs your instances will accept connections from. The following features are available in the NetBox Labs Admin Console when working with prefix lists: Create, Edit and Delete prefix lists Synchronize prefix lists from a NetBox instance using tags There is also large list support (~15K prefixes) and separate prefixes can be applied to the NetBox Cloud UI, API and GraphQL interfaces. Note When you have built your prefix lists in the Admin Console, raise a support ticket by emailing the NetBox Labs Support Team and we will apply them to your NetBox Cloud instances.","title":"Prefix Lists"},{"location":"administration-console/prefix-lists/#create-a-prefix-list-not-synchronized-with-a-netbox","text":"From within the Admin Console, navigate to Settings in the left-hand menu Scroll down and click to expand the Prefix List section, and then click on Create Prefix List on the right hand side to start the wizard: Give the prefix list a name and then click CREATE PREFIX LIST : Enter the first prefix and give it a description. If you wish to add additional prefixes then you can also do that here by clicking + ADD ADDITIONAL PREFIX , then when you are happy click CREATE PREFIXES . Note - if you wish to add the IP address that you are currently using then click Use Current IP Address and this will add it to the prefix list: You can then view the prefix list from within Settings > Prefix List :","title":"Create a Prefix List (not synchronized with a NetBox)"},{"location":"administration-console/prefix-lists/#create-a-prefix-list-synchronized-with-a-netbox","text":"From within the Admin Console, navigate to Settings in the left-hand menu Scroll down and click to expand the Prefix List section, and then click on Create Prefix List on the right hand side to start the wizard: Give the prefix list a name and then select the Yes radio button to sync the prefix list from a NetBox. Then select the NetBox instance you wish to sync from, specify the NetBox Tag that you wish to use, and then click CREATE PREFIX LIST : Switch to your NetBox instance, and go to Customization > Tags and create the required tag(s) to be applied to any prefixes that are to be synchronized to the Prefix List: Under IPAM > Prefixes add the prefixes, give them a description and tag them with the appropriate tag: You can then view the prefixes in NetBox under IPAM > Prefixes ( Tip - filter on the tag): Switch back to the Admin Console to view the prefix list from within Settings > Prefix List . Note - it can take a few minutes for the prefix list to be fully synchronized from NetBox.","title":"Create a Prefix List (synchronized with a NetBox)"},{"location":"administration-console/prefix-lists/#edit-a-prefix-list","text":"Note - this only works for prefix lists that are not synchronized with a NetBox. To edit NetBox synchronized prefix lists you should make the edits within NetBox. From within the Admin Console, navigate to Settings in the left-hand menu, and then scroll down and click to expand the Prefix List section. Then click on the name of the prefix list you wish to edit: To add more prefixes to the list, click on Create Prefix and then follow the wizard again to add more prefixes. To edit a prefix, click EDIT and then make your required changes and then click EDIT PREFIX to save your changes: To delete a prefix, click DELETE and then if you are sure you wish to delete the prefix, click DELETE PREFIX when prompted:","title":"Edit a Prefix List"},{"location":"administration-console/prefix-lists/#delete-a-prefix-list","text":"Note - in order for a prefix list to be deleted it must first be detached from any NetBox instances that it is securing. You will need to contact support and request this before you can delete it. From within the Admin Console, navigate to Settings in the left-hand menu, and then scroll down and click to expand the Prefix List section. Then click on the name of the prefix list you wish to delete, and click DELETE PREFIX LIST : If you are sure you wish to delete the prefix list then click DELETE PREFIX LIST when you are prompted to confirm the deletion: If you encounter any issues while working with the IP Allow List raise a support ticket by emailing the NetBox Labs Support Team","title":"Delete a Prefix List"},{"location":"administration-console/public-ip-addressing/","tags":["cloud","netbox","administration","networking","configuration"],"text":"Public IP Addressing Traffic Originating From NetBox Cloud The Public IP addresses that outbound traffic from your NetBox Cloud instance (eg. webhooks) will be seen to be originating from are listed below. This will vary depending on the region that your instance is located in. You can whitelist these IP ranges so that inbound access from your NetBox Cloud instance(s) is restricted to just these addresses: US-EAST-1 IPv4 3.225.69.195 3.233.255.24 34.231.51.53 IPv6 2600:1f18:462e:4c00::/56 EU-WEST-1 IPv4 108.128.2.233 3.252.161.89 46.51.185.39 IPv6 2a05:d018:1128:7a00::/56 EU-WEST-2 IPv4 13.42.148.73 18.132.136.73 18.132.221.240 IPv6 2a05:d01c:11e:a800::/56","title":"Public IP Addressing"},{"location":"administration-console/public-ip-addressing/#public-ip-addressing","text":"","title":"Public IP Addressing"},{"location":"administration-console/public-ip-addressing/#traffic-originating-from-netbox-cloud","text":"The Public IP addresses that outbound traffic from your NetBox Cloud instance (eg. webhooks) will be seen to be originating from are listed below. This will vary depending on the region that your instance is located in. You can whitelist these IP ranges so that inbound access from your NetBox Cloud instance(s) is restricted to just these addresses:","title":"Traffic Originating From NetBox Cloud"},{"location":"administration-console/public-ip-addressing/#us-east-1","text":"IPv4 3.225.69.195 3.233.255.24 34.231.51.53 IPv6 2600:1f18:462e:4c00::/56","title":"US-EAST-1"},{"location":"administration-console/public-ip-addressing/#eu-west-1","text":"IPv4 108.128.2.233 3.252.161.89 46.51.185.39 IPv6 2a05:d018:1128:7a00::/56","title":"EU-WEST-1"},{"location":"administration-console/public-ip-addressing/#eu-west-2","text":"IPv4 13.42.148.73 18.132.136.73 18.132.221.240 IPv6 2a05:d01c:11e:a800::/56","title":"EU-WEST-2"},{"location":"administration-console/saml-group-map/","tags":["cloud","netbox","administration","authentication","configuration"],"text":"Configuring SAML Group Mapping in NetBox Cloud NetBox Cloud supports SAML-based authentication, including group mappings to enforce role-based access control. For group mapping, you will need to provide your Identity Provider (IdP) group names so we can associate them with the desired NetBox groups. Group Attribute Mapping By default, NetBox Cloud expects the SAML group attribute statement to be named groups , which contains a list of group names the user belongs to. If your IdP sends group information under a different attribute name, such as MemberOf , you must update its configuration to use groups to ensure proper mapping. Providing Your Group Mappings To set up group mapping, follow these steps: Create Groups in NetBox \u2013 Set up user groups in NetBox and assign appropriate permissions. Define Your Mappings \u2013 Determine which IdP groups should be mapped to which NetBox groups. Ensure you are using the exact group names as they appear in your IdP. Share Your Mappings \u2013 Provide your IdP group names along with the corresponding NetBox groups to the NetBox Cloud team so we can configure the mappings on our end. Below is an example that illustrates how IdP groups are mapped to NetBox user groups: \"IdP-group-name\": \"netbox-user-group\", \"another-IdP-group-name\": \"another-netbox-user-group\" Once configured, users will be assigned NetBox roles based on their IdP group membership.","title":"SAML Group Mapping"},{"location":"administration-console/saml-group-map/#configuring-saml-group-mapping-in-netbox-cloud","text":"NetBox Cloud supports SAML-based authentication, including group mappings to enforce role-based access control. For group mapping, you will need to provide your Identity Provider (IdP) group names so we can associate them with the desired NetBox groups.","title":"Configuring SAML Group Mapping in NetBox Cloud"},{"location":"administration-console/saml-group-map/#group-attribute-mapping","text":"By default, NetBox Cloud expects the SAML group attribute statement to be named groups , which contains a list of group names the user belongs to. If your IdP sends group information under a different attribute name, such as MemberOf , you must update its configuration to use groups to ensure proper mapping.","title":"Group Attribute Mapping"},{"location":"administration-console/saml-group-map/#providing-your-group-mappings","text":"To set up group mapping, follow these steps: Create Groups in NetBox \u2013 Set up user groups in NetBox and assign appropriate permissions. Define Your Mappings \u2013 Determine which IdP groups should be mapped to which NetBox groups. Ensure you are using the exact group names as they appear in your IdP. Share Your Mappings \u2013 Provide your IdP group names along with the corresponding NetBox groups to the NetBox Cloud team so we can configure the mappings on our end. Below is an example that illustrates how IdP groups are mapped to NetBox user groups: \"IdP-group-name\": \"netbox-user-group\", \"another-IdP-group-name\": \"another-netbox-user-group\" Once configured, users will be assigned NetBox roles based on their IdP group membership.","title":"Providing Your Group Mappings"},{"location":"administration-console/saml-sso-setup/","tags":["cloud","netbox","authentication","configuration"],"text":"NetBox Cloud SAML Configuration Guide Overview This document details the procedure for configuring SAML-based Single Sign-On (SSO) for your NetBox Cloud environment. Required Information To facilitate SAML integration, we require the following details from your Identity Provider (IdP): Service Provider Entity ID: The unique identifier of your organization in the SAML ecosystem. Identity Provider Settings: entity_id : This is your IdP's Entity ID obtained from the SAML metadata. url : Your IdP's SSO login URL. x509cert : The Base64-encoded X.509 certificate used to sign SAML assertions. Note Preferred Submission Method : For efficiency and accuracy, please provide your IdP Metadata File. This standardized format ensures all necessary information is included. Configuration Process in NetBox Cloud Once we receive your SAML configuration details, we will: Generate a public/private certificate pair. Provide you with the public certificate, which you will need to configure your IdP. Additionally you will need to configure the following parameters within your IdP settings: Service Provider (SP) Entity ID: https://<org-name>.cloud.netboxapp.com/ Assertion Consumer Service (ACS) URL: https://<org-name>.cloud.netboxapp.com/ Testing Once your NetBox Cloud and Identity Provider (IdP) configurations are finalized, you can proceed with testing to confirm that you are able to log in via your SAML provider.","title":"SAML SSO Setup"},{"location":"administration-console/saml-sso-setup/#netbox-cloud-saml-configuration-guide","text":"","title":"NetBox Cloud SAML Configuration Guide"},{"location":"administration-console/saml-sso-setup/#overview","text":"This document details the procedure for configuring SAML-based Single Sign-On (SSO) for your NetBox Cloud environment.","title":"Overview"},{"location":"administration-console/saml-sso-setup/#required-information","text":"To facilitate SAML integration, we require the following details from your Identity Provider (IdP): Service Provider Entity ID: The unique identifier of your organization in the SAML ecosystem. Identity Provider Settings: entity_id : This is your IdP's Entity ID obtained from the SAML metadata. url : Your IdP's SSO login URL. x509cert : The Base64-encoded X.509 certificate used to sign SAML assertions. Note Preferred Submission Method : For efficiency and accuracy, please provide your IdP Metadata File. This standardized format ensures all necessary information is included.","title":"Required Information"},{"location":"administration-console/saml-sso-setup/#configuration-process-in-netbox-cloud","text":"Once we receive your SAML configuration details, we will: Generate a public/private certificate pair. Provide you with the public certificate, which you will need to configure your IdP. Additionally you will need to configure the following parameters within your IdP settings: Service Provider (SP) Entity ID: https://<org-name>.cloud.netboxapp.com/ Assertion Consumer Service (ACS) URL: https://<org-name>.cloud.netboxapp.com/","title":"Configuration Process in NetBox Cloud"},{"location":"administration-console/saml-sso-setup/#testing","text":"Once your NetBox Cloud and Identity Provider (IdP) configurations are finalized, you can proceed with testing to confirm that you are able to log in via your SAML provider.","title":"Testing"},{"location":"administration-console/upgrading-nbc/","tags":["cloud","netbox","administration","upgrade","maintenance"],"text":"Upgrading NetBox Cloud To safely and easily upgrade your NetBox Cloud instance without worrying about any plugin compatibility issues, follow the steps outlined below: In the NetBox Labs Console , click on the three dots in the top right corner of the instance you wish to upgrade and click Upgrade . Note the current NetBox version in this example is 4.1.7. The Safe Upgrade tool will present you with the potential and recommended versions you can upgrade to. You will see the version number, the status, whether installed plugins are compatible with the target NetBox version, and a link to the release notes for that version. Note that we could upgrade to any of the other potential options, but the Safe Upgrade tool is recommending an upgrade to version 4.1.11. If you select this option, all plugins will be automatically upgraded to compatible versions as part of the upgrade process. Note too that if a plugin is not compatible with a certain NetBox version, you will see a warning like this: In this case, you would not be able to upgrade to that version, and the tool will not allow you to select it. This typically means the plugin developer has not yet released a version compatible with that NetBox version. Select the version you wish to upgrade to. In this example, we will select the recommended version 3.6. Click on UPGRADE VERSION . Click on Continue if you are sure you want to go ahead with the upgrade. You will then see a dialog box confirming the upgrade is in progress. A few seconds later, your NetBox Cloud upgrade will be complete. You will see the new version number. If you encounter any issues during the upgrade or have any questions, please raise a support ticket by emailing the NetBox Labs Support Team .","title":"Upgrading NetBox"},{"location":"administration-console/upgrading-nbc/#upgrading-netbox-cloud","text":"To safely and easily upgrade your NetBox Cloud instance without worrying about any plugin compatibility issues, follow the steps outlined below: In the NetBox Labs Console , click on the three dots in the top right corner of the instance you wish to upgrade and click Upgrade . Note the current NetBox version in this example is 4.1.7. The Safe Upgrade tool will present you with the potential and recommended versions you can upgrade to. You will see the version number, the status, whether installed plugins are compatible with the target NetBox version, and a link to the release notes for that version. Note that we could upgrade to any of the other potential options, but the Safe Upgrade tool is recommending an upgrade to version 4.1.11. If you select this option, all plugins will be automatically upgraded to compatible versions as part of the upgrade process. Note too that if a plugin is not compatible with a certain NetBox version, you will see a warning like this: In this case, you would not be able to upgrade to that version, and the tool will not allow you to select it. This typically means the plugin developer has not yet released a version compatible with that NetBox version. Select the version you wish to upgrade to. In this example, we will select the recommended version 3.6. Click on UPGRADE VERSION . Click on Continue if you are sure you want to go ahead with the upgrade. You will then see a dialog box confirming the upgrade is in progress. A few seconds later, your NetBox Cloud upgrade will be complete. You will see the new version number. If you encounter any issues during the upgrade or have any questions, please raise a support ticket by emailing the NetBox Labs Support Team .","title":"Upgrading NetBox Cloud"},{"location":"administration-console/working_with_database_backups/","tags":["cloud","netbox","administration","backup","database"],"text":"Working with NetBox Cloud Database Backups Within the NetBox Labs Console you can access the backups of your NetBox Cloud database, and are able to perform the following actions: View a list of all available database backups Take an 'On Demand' backup at any time Download a local copy of a specific backup file Restore your NetBox Cloud instance from a database backup View a List of Available Database Backups Login to the NetBox Labs Console and then click on the three dots in the top-right corner of the instance you wish to manage and click Backup & Restore : Within Backup and Restore you can view the list of available backups: Take an 'On Demand' Database Backup From within the Backup and Restore panel click on Back Up Now , on the right-hand side: Click CONTINUE to confirm that you want to backup of the current version of NetBox Cloud After a short while you will see the On Demand backup you just created appear in the list of available backups: Download a Local Copy of a Backup File Locate the backup file you wish to retrieve, and click on the Download icon: The download will then be prepared: Once the backup file has been prepared it will automatically be downloaded into the Downloads directory on your local computer's file system. Note the file is a gzip compressed archive of the SQL database file so it will end in .sql.gz . Restore From a Database Backup File Identify the database backup you wish to restore from, and click Restore : Click CONTINUE if you are sure you wish to restore the selected backup: The restore process will take place in the background, and depending on the size of the database should take no longer than a few minutes to complete. Once the restore has completed, you can click on Restore History to view the list of database restores, and you will see your completed restore listed: Your database restore is now complete. Info Once the database restore is complete your NetBox Cloud instance will restart, and you may briefly see a 503 - Service Unavailable message when you browse to the Web interface. This is normal and will clear after a short while, after which you can log in again. Also, please be aware that the NetBox changelog will be empty when you first log in after a database restore. If you encounter any issues while working with database backups raise a support ticket by emailing the NetBox Labs Support Team","title":"Database Backups"},{"location":"administration-console/working_with_database_backups/#working-with-netbox-cloud-database-backups","text":"Within the NetBox Labs Console you can access the backups of your NetBox Cloud database, and are able to perform the following actions: View a list of all available database backups Take an 'On Demand' backup at any time Download a local copy of a specific backup file Restore your NetBox Cloud instance from a database backup","title":"Working with NetBox Cloud Database Backups"},{"location":"administration-console/working_with_database_backups/#view-a-list-of-available-database-backups","text":"Login to the NetBox Labs Console and then click on the three dots in the top-right corner of the instance you wish to manage and click Backup & Restore : Within Backup and Restore you can view the list of available backups:","title":"View a List of Available Database Backups"},{"location":"administration-console/working_with_database_backups/#take-an-on-demand-database-backup","text":"From within the Backup and Restore panel click on Back Up Now , on the right-hand side: Click CONTINUE to confirm that you want to backup of the current version of NetBox Cloud After a short while you will see the On Demand backup you just created appear in the list of available backups:","title":"Take an 'On Demand' Database Backup"},{"location":"administration-console/working_with_database_backups/#download-a-local-copy-of-a-backup-file","text":"Locate the backup file you wish to retrieve, and click on the Download icon: The download will then be prepared: Once the backup file has been prepared it will automatically be downloaded into the Downloads directory on your local computer's file system. Note the file is a gzip compressed archive of the SQL database file so it will end in .sql.gz .","title":"Download a Local Copy of a Backup File"},{"location":"administration-console/working_with_database_backups/#restore-from-a-database-backup-file","text":"Identify the database backup you wish to restore from, and click Restore : Click CONTINUE if you are sure you wish to restore the selected backup: The restore process will take place in the background, and depending on the size of the database should take no longer than a few minutes to complete. Once the restore has completed, you can click on Restore History to view the list of database restores, and you will see your completed restore listed: Your database restore is now complete. Info Once the database restore is complete your NetBox Cloud instance will restart, and you may briefly see a 503 - Service Unavailable message when you browse to the Web interface. This is normal and will clear after a short while, after which you can log in again. Also, please be aware that the NetBox changelog will be empty when you first log in after a database restore. If you encounter any issues while working with database backups raise a support ticket by emailing the NetBox Labs Support Team","title":"Restore From a Database Backup File"},{"location":"cloud-connectivity/aws-direct-connect-multi-region/","tags":["cloud","cloud-connectivity","networking","aws","direct-connect","multi-region","high-availability"],"text":"AWS Direct Connect (Multi-Region) Delivery via AWS Direct Connect in two regions, with replicated NetBoxes, Single (or Dual) Direct Connect in each region. Customer IP space (2 x /25's) is assigned for the VPCs. This is to host load balancers and proxies within the dedicated customer Account/VPC. Internally we will allocate a /27 per availability zone for each of the 3 availability zones. The connections do not have to be dedicated, a VLAN can be added to an existing layer 2 fabric provider, such as Equinix Fabric. In terms of bandwidth requirements, 50Mbps is fine.","title":"AWS Direct Connect (Multi-Region)"},{"location":"cloud-connectivity/aws-direct-connect-multi-region/#aws-direct-connect-multi-region","text":"Delivery via AWS Direct Connect in two regions, with replicated NetBoxes, Single (or Dual) Direct Connect in each region. Customer IP space (2 x /25's) is assigned for the VPCs. This is to host load balancers and proxies within the dedicated customer Account/VPC. Internally we will allocate a /27 per availability zone for each of the 3 availability zones. The connections do not have to be dedicated, a VLAN can be added to an existing layer 2 fabric provider, such as Equinix Fabric. In terms of bandwidth requirements, 50Mbps is fine.","title":"AWS Direct Connect (Multi-Region)"},{"location":"cloud-connectivity/aws-direct-connect/","tags":["cloud","networking","configuration","integration"],"text":"AWS Direct Connect (Single Region) AWS Direct Connect is available via hosted connections from BT, Equinix Fabric, MegaPort, Optus, PCCW, Zayo etc. VLAN hand-off is with BGP and Single or Dual Direct Connect services are available. Customer IP space (/24 or /25) is assigned for the VPC, as this is required to host load balancers and proxies within the dedicated customer Account/VPC. Internally we will allocate a /27 per availability zone for each of the 3 availability zones. The connection does not have to be dedicated, a VLAN can be added to an existing layer 2 fabric provider, such as Equinix Fabric. In terms of bandwidth requirements, 50Mbps is fine.","title":"AWS Direct Connect (Single Region)"},{"location":"cloud-connectivity/aws-direct-connect/#aws-direct-connect-single-region","text":"AWS Direct Connect is available via hosted connections from BT, Equinix Fabric, MegaPort, Optus, PCCW, Zayo etc. VLAN hand-off is with BGP and Single or Dual Direct Connect services are available. Customer IP space (/24 or /25) is assigned for the VPC, as this is required to host load balancers and proxies within the dedicated customer Account/VPC. Internally we will allocate a /27 per availability zone for each of the 3 availability zones. The connection does not have to be dedicated, a VLAN can be added to an existing layer 2 fabric provider, such as Equinix Fabric. In terms of bandwidth requirements, 50Mbps is fine.","title":"AWS Direct Connect (Single Region)"},{"location":"cloud-connectivity/aws-private-link/","tags":["cloud","cloud-connectivity","networking","aws","private-link"],"text":"AWS Private Link (Single Region) Delivery via Private Link between a customer's existing AWS account and the NetBox Labs AWS account, with VPC endpoints using private IPs. This option has fast turn-up times and standard Internet delivery can optionally be disabled.","title":"AWS Private Link (Single Region)"},{"location":"cloud-connectivity/aws-private-link/#aws-private-link-single-region","text":"Delivery via Private Link between a customer's existing AWS account and the NetBox Labs AWS account, with VPC endpoints using private IPs. This option has fast turn-up times and standard Internet delivery can optionally be disabled.","title":"AWS Private Link (Single Region)"},{"location":"cloud-connectivity/cloud-connectivity-faq/","tags":["cloud","cloud-connectivity","networking","faq","troubleshooting"],"text":"Cloud Connectivity Frequently Asked Questions IPSEC VPN Tunnels Q. Why 2 tunnels? A. The AWS VPN Gateway product provides 2 tunnels by default for resilience. Each terminates in a different availability zone. IPSEC VPN Tunnels + Direct Connect Q. Why /24 or /25? A. This is to host load balancers and proxies within the dedicated customer Account/VPC. Internally we will allocate a /27 per availability zone for each of the 3 availability zones. Direct Connect Q. Does the connection have to be dedicated? A. No, a VLAN can be added to an existing layer 2 fabric provider, such as Equinix Fabric. Q. How much bandwidth for hosted connections? A. 50Mbps is fine.","title":"FAQ"},{"location":"cloud-connectivity/cloud-connectivity-faq/#cloud-connectivity-frequently-asked-questions","text":"","title":"Cloud Connectivity Frequently Asked Questions"},{"location":"cloud-connectivity/cloud-connectivity-faq/#ipsec-vpn-tunnels","text":"Q. Why 2 tunnels? A. The AWS VPN Gateway product provides 2 tunnels by default for resilience. Each terminates in a different availability zone.","title":"IPSEC VPN Tunnels"},{"location":"cloud-connectivity/cloud-connectivity-faq/#ipsec-vpn-tunnels-direct-connect","text":"Q. Why /24 or /25? A. This is to host load balancers and proxies within the dedicated customer Account/VPC. Internally we will allocate a /27 per availability zone for each of the 3 availability zones.","title":"IPSEC VPN Tunnels + Direct Connect"},{"location":"cloud-connectivity/cloud-connectivity-faq/#direct-connect","text":"Q. Does the connection have to be dedicated? A. No, a VLAN can be added to an existing layer 2 fabric provider, such as Equinix Fabric. Q. How much bandwidth for hosted connections? A. 50Mbps is fine.","title":"Direct Connect"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/","tags":["cloud","cloud-connectivity","networking","decision-guide"],"text":"Do I Need Cloud Connectivity Options? Internet Delivery (Single Region) is the standard product offering for NetBox Cloud. It comes with extensive security features (see below) and is suitable for the majority of use cases and environments. If you have special connectivity needs, there are several options available. However, in many cases where cloud connectivity options seem necessary, NetBox Cloud offers features that can address your needs without additional setup cost. This guide explores some of those features. NetBox Cloud Security Features Security and convenience are always in focus in the NetBox Cloud Platform and we understand that with any application, getting the balance right between security and convenience is crucial. At NetBox Labs, we believe that you shouldn't have to compromise in either area. Just a few of the Security features the NetBox Cloud platform offers are: Securing Access with Prefix Lists mTLS and Dedicated IP Addresses Database Backup and Restore Safe Upgrade Tool Two-Factor Authentication for the NetBox Labs Admin Console SSO Options for NetBox Cloud Read more about all of these features in this blog or watch an on-demand webinar to learn how these NetBox Cloud features are designed to make the lives of the network team easier, whilst at the same time enhancing the security of NetBox Cloud. CRUD (Create/Update/Delete) Access to the NetBox Data Model via REST and GraphQL API Out of the box NetBox Cloud allows you to programmatically interact with the NetBox Database to perform CRUD operations. This can be via the REST API or GraphQL interface. REST API REST stands for Representational State Transfer . It's a particular type of API which employs HTTP requests and JavaScript Object Notation (JSON) to facilitate create, retrieve, update, and delete (CRUD) operations on objects within an application. Info To read more about how to get started with the REST API, check out the NetBox docs or this video from the NetBox Zero to Hero training course. GraphQL API NetBox provides a read-only GraphQL API to complement its REST API. This API is powered by Strawberry Django . GraphQL enables the client to specify an arbitrary nested list of fields to include in the response. All queries are made to the root /graphql API endpoint. Info To read more about how to get started with the GraphQL API, check out the NetBox docs . Streaming Change Events with Webhooks and Event Streams Events in NetBox can trigger calls to other systems with Webhooks, or other systems can subscribe to Event Streams, and in either case this can trigger other systems to take action based on the event. NetBox Webhooks NetBox can be configured via Event Rules to transmit outgoing webhooks to remote systems in response to internal object changes. The receiver can act on the data in these webhook messages to perform related tasks. For example, suppose you want to automatically configure a monitoring system to start monitoring a device when its operational status is changed to active, and remove it from monitoring for any other status. You can create a webhook in NetBox for the device model and craft its content and destination URL to effect the desired change on the receiving system. Webhooks will be sent automatically by NetBox whenever the configured constraints are met. Info To read more about how to get started with the Webhooks, check out the NetBox docs . NetBox Event Streams NetBox Event Streams unlock event-driven architectures by enabling teams to easily subscribe to network state and management events from the NetBox Cloud Platform, feeding events to other systems or triggering automations. This capability spans various types of events, from operational updates like the addition of new devices, to security-oriented alerts such as unauthorized access attempts. Info To learn more about NetBox Event Streams you can sign up for an on-demand webinar or read our blog about how NetBox Event Streams integrated with SIEM tools like Splunk Enterprise and ElasticSearch, is setting a new standard for how networks are managed and secured.","title":"Do I Need Cloud Connectivity?"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#do-i-need-cloud-connectivity-options","text":"Internet Delivery (Single Region) is the standard product offering for NetBox Cloud. It comes with extensive security features (see below) and is suitable for the majority of use cases and environments. If you have special connectivity needs, there are several options available. However, in many cases where cloud connectivity options seem necessary, NetBox Cloud offers features that can address your needs without additional setup cost. This guide explores some of those features.","title":"Do I Need Cloud Connectivity Options?"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#netbox-cloud-security-features","text":"Security and convenience are always in focus in the NetBox Cloud Platform and we understand that with any application, getting the balance right between security and convenience is crucial. At NetBox Labs, we believe that you shouldn't have to compromise in either area. Just a few of the Security features the NetBox Cloud platform offers are: Securing Access with Prefix Lists mTLS and Dedicated IP Addresses Database Backup and Restore Safe Upgrade Tool Two-Factor Authentication for the NetBox Labs Admin Console SSO Options for NetBox Cloud Read more about all of these features in this blog or watch an on-demand webinar to learn how these NetBox Cloud features are designed to make the lives of the network team easier, whilst at the same time enhancing the security of NetBox Cloud.","title":"NetBox Cloud Security Features"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#crud-createupdatedelete-access-to-the-netbox-data-model-via-rest-and-graphql-api","text":"Out of the box NetBox Cloud allows you to programmatically interact with the NetBox Database to perform CRUD operations. This can be via the REST API or GraphQL interface.","title":"CRUD (Create/Update/Delete) Access to the NetBox Data Model via REST and GraphQL API"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#rest-api","text":"REST stands for Representational State Transfer . It's a particular type of API which employs HTTP requests and JavaScript Object Notation (JSON) to facilitate create, retrieve, update, and delete (CRUD) operations on objects within an application. Info To read more about how to get started with the REST API, check out the NetBox docs or this video from the NetBox Zero to Hero training course.","title":"REST API"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#graphql-api","text":"NetBox provides a read-only GraphQL API to complement its REST API. This API is powered by Strawberry Django . GraphQL enables the client to specify an arbitrary nested list of fields to include in the response. All queries are made to the root /graphql API endpoint. Info To read more about how to get started with the GraphQL API, check out the NetBox docs .","title":"GraphQL API"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#streaming-change-events-with-webhooks-and-event-streams","text":"Events in NetBox can trigger calls to other systems with Webhooks, or other systems can subscribe to Event Streams, and in either case this can trigger other systems to take action based on the event.","title":"Streaming Change Events with Webhooks and Event Streams"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#netbox-webhooks","text":"NetBox can be configured via Event Rules to transmit outgoing webhooks to remote systems in response to internal object changes. The receiver can act on the data in these webhook messages to perform related tasks. For example, suppose you want to automatically configure a monitoring system to start monitoring a device when its operational status is changed to active, and remove it from monitoring for any other status. You can create a webhook in NetBox for the device model and craft its content and destination URL to effect the desired change on the receiving system. Webhooks will be sent automatically by NetBox whenever the configured constraints are met. Info To read more about how to get started with the Webhooks, check out the NetBox docs .","title":"NetBox Webhooks"},{"location":"cloud-connectivity/do-i-need-cloud-connectivity/#netbox-event-streams","text":"NetBox Event Streams unlock event-driven architectures by enabling teams to easily subscribe to network state and management events from the NetBox Cloud Platform, feeding events to other systems or triggering automations. This capability spans various types of events, from operational updates like the addition of new devices, to security-oriented alerts such as unauthorized access attempts. Info To learn more about NetBox Event Streams you can sign up for an on-demand webinar or read our blog about how NetBox Event Streams integrated with SIEM tools like Splunk Enterprise and ElasticSearch, is setting a new standard for how networks are managed and secured.","title":"NetBox Event Streams"},{"location":"cloud-connectivity/internet-delivery/","tags":["cloud","cloud-connectivity","networking","internet-delivery"],"text":"Internet Delivery (Single Region) Internet Delivery (Single Region) is the standard product offering for NetBox Cloud. It comes with extensive security features (see below) and is suitable for the majority of use cases and environments: NetBox Cloud Security Features Below are just a few of the Security features available on the NetBox Cloud platform. All of these can be enabled over our standard Internet Delivery option: Securing Access with Prefix Lists mTLS and Dedicated IP Addresses Database Backup and Restore Safe Upgrade Tool Two-Factor Authentication for the NetBox Labs Admin Console SSO Options for NetBox Cloud Info Read more about all of these features in this blog or watch an on-demand webinar to learn how these NetBox Cloud features are designed to make the lives of the network team easier, whilst at the same time enhancing the security of NetBox Cloud.","title":"Internet Delivery (Single Region)"},{"location":"cloud-connectivity/internet-delivery/#internet-delivery-single-region","text":"Internet Delivery (Single Region) is the standard product offering for NetBox Cloud. It comes with extensive security features (see below) and is suitable for the majority of use cases and environments:","title":"Internet Delivery (Single Region)"},{"location":"cloud-connectivity/internet-delivery/#netbox-cloud-security-features","text":"Below are just a few of the Security features available on the NetBox Cloud platform. All of these can be enabled over our standard Internet Delivery option: Securing Access with Prefix Lists mTLS and Dedicated IP Addresses Database Backup and Restore Safe Upgrade Tool Two-Factor Authentication for the NetBox Labs Admin Console SSO Options for NetBox Cloud Info Read more about all of these features in this blog or watch an on-demand webinar to learn how these NetBox Cloud features are designed to make the lives of the network team easier, whilst at the same time enhancing the security of NetBox Cloud.","title":"NetBox Cloud Security Features"},{"location":"cloud-connectivity/ipsec-vpn-tunnels/","tags":["cloud","cloud-connectivity","networking","vpn","ipsec","security"],"text":"IPSEC VPN Tunnels (Single Region) In this solution NetBox Cloud is securely delivered over an IPSEC VPN. You have single or dual tunnel options, and use a static route or the preferred option of BGP routing. Customer IP space (/24 or /25) is assigned for the VPC as this is required to host load balancers and proxies within the dedicated customer Account/VPC. Internally we will allocate a /27 per availability zone for each of the 3 availability zones. The AWS VPN Gateway product provides 2 tunnels by default for resilience, and each terminates in a different availability zone. Redundancy options With the IPSEC VPN solution there are options for Single, Active/Passive and Active/Active Firewalls:","title":"IPSEC VPN Tunnels (Single Region)"},{"location":"cloud-connectivity/ipsec-vpn-tunnels/#ipsec-vpn-tunnels-single-region","text":"In this solution NetBox Cloud is securely delivered over an IPSEC VPN. You have single or dual tunnel options, and use a static route or the preferred option of BGP routing. Customer IP space (/24 or /25) is assigned for the VPC as this is required to host load balancers and proxies within the dedicated customer Account/VPC. Internally we will allocate a /27 per availability zone for each of the 3 availability zones. The AWS VPN Gateway product provides 2 tunnels by default for resilience, and each terminates in a different availability zone.","title":"IPSEC VPN Tunnels (Single Region)"},{"location":"cloud-connectivity/ipsec-vpn-tunnels/#redundancy-options","text":"With the IPSEC VPN solution there are options for Single, Active/Passive and Active/Active Firewalls:","title":"Redundancy options"},{"location":"cloud-connectivity/which-connectivity-option/","tags":["cloud","cloud-connectivity","networking","decision-guide","aws"],"text":"Which Cloud Connectivity Option is Right for Me? In many cases where cloud connectivity options seem necessary, NetBox Cloud offers features that can address your needs without additional setup. In the majority of cases Internet Delivery (Single Region) is the most appropriate connectivity option, but there are some general recommendations depending on your use case: Recommendations By Use Case Use Case Recommendation Reason General Use Internet Delivery (Single Region) Standard product, easy setup, and sufficient security for most use cases. AWS-Centric Environments AWS Private Link (Single Region) Fast setup, private IPs, and good integration with AWS infrastructure. Secure, Site-to-Site Connections IPSEC VPN Tunnels (Single Region) High flexibility and security with VPN tunnels and routing options. High-Performance Needs (Single Region) AWS Direct Connect (Single Region) Low latency, high performance, suitable for demanding applications. High-Performance, Multi-Region Needs AWS Direct Connect (Multi-Region) Highest performance, redundancy, and scalability across multiple regions. Detailed Breakdown This matrix should help you identify the most suitable NetBox Cloud connectivity option based on your specific requirements and priorities: Criteria Internet Delivery (Single Region) AWS Private Link (Single Region) IPSEC VPN Tunnels (Single Region) AWS Direct Connect (Single Region) AWS Direct Connect (Multi-Region) Ease of Setup Standard product, easy setup Fast turn-up times Requires VPN configuration Requires Direct Connect setup Requires Direct Connect setup Redundancy Single region. Multiple AZs Single region. Multiple AZs Single region. Multiple AZs. Single or dual tunnels Single region. Multiple AZs. Single or dual Direct Connect options Multi Region. Multiple AZs. Replicated NetBoxes Cost Included Low, due to Private Link Medium, dependent on VPN set up Medium, due to Direct Connect Highest, due to multi-region setup Performance Standard internet performance Low latency due to Private Link Variable, dependent on VPN quality High performance, low latency Highest performance, low latency Management Complexity Low Medium High Medium High Recommended For General use AWS-centric environments Secure, site-to-site connections High-performance needs, single region High-performance, multi-region needs","title":"Which Option is Right for Me?"},{"location":"cloud-connectivity/which-connectivity-option/#which-cloud-connectivity-option-is-right-for-me","text":"In many cases where cloud connectivity options seem necessary, NetBox Cloud offers features that can address your needs without additional setup. In the majority of cases Internet Delivery (Single Region) is the most appropriate connectivity option, but there are some general recommendations depending on your use case:","title":"Which Cloud Connectivity Option is Right for Me?"},{"location":"cloud-connectivity/which-connectivity-option/#recommendations-by-use-case","text":"Use Case Recommendation Reason General Use Internet Delivery (Single Region) Standard product, easy setup, and sufficient security for most use cases. AWS-Centric Environments AWS Private Link (Single Region) Fast setup, private IPs, and good integration with AWS infrastructure. Secure, Site-to-Site Connections IPSEC VPN Tunnels (Single Region) High flexibility and security with VPN tunnels and routing options. High-Performance Needs (Single Region) AWS Direct Connect (Single Region) Low latency, high performance, suitable for demanding applications. High-Performance, Multi-Region Needs AWS Direct Connect (Multi-Region) Highest performance, redundancy, and scalability across multiple regions.","title":"Recommendations By Use Case"},{"location":"cloud-connectivity/which-connectivity-option/#detailed-breakdown","text":"This matrix should help you identify the most suitable NetBox Cloud connectivity option based on your specific requirements and priorities: Criteria Internet Delivery (Single Region) AWS Private Link (Single Region) IPSEC VPN Tunnels (Single Region) AWS Direct Connect (Single Region) AWS Direct Connect (Multi-Region) Ease of Setup Standard product, easy setup Fast turn-up times Requires VPN configuration Requires Direct Connect setup Requires Direct Connect setup Redundancy Single region. Multiple AZs Single region. Multiple AZs Single region. Multiple AZs. Single or dual tunnels Single region. Multiple AZs. Single or dual Direct Connect options Multi Region. Multiple AZs. Replicated NetBoxes Cost Included Low, due to Private Link Medium, dependent on VPN set up Medium, due to Direct Connect Highest, due to multi-region setup Performance Standard internet performance Low latency due to Private Link Variable, dependent on VPN quality High performance, low latency Highest performance, low latency Management Complexity Low Medium High Medium High Recommended For General use AWS-centric environments Secure, site-to-site connections High-performance needs, single region High-performance, multi-region needs","title":"Detailed Breakdown"},{"location":"netbox-assurance/","tags":["cloud","enterprise","assurance","operations","automation","networking","integration","getting-started"],"text":"NetBox Assurance NetBox Assurance automatically detects operational drift between your intended network design (documented in NetBox) and your actual network infrastructure. It continuously monitors network and infrastructure, comparing your intended design against real-world infrastructure to uncover discrepancies and provide proactive remediation capabilities. By ensuring your NetBox documentation stays current and accurate, Assurance enables faster incident resolution, better compliance, and the confidence to move quickly with reliable network automation. What Makes NetBox Assurance Unique Unlike traditional monitoring tools that focus on performance metrics, NetBox Assurance focuses on configuration accuracy and documentation integrity . It bridges the gap between what you've documented in NetBox and what actually exists in your network. Automated Operational Drift Detection Continuous comparison of ingested network data against NetBox documentation Real-time detection of configuration changes and undocumented infrastructure Intelligent analysis that identifies meaningful deviations requiring attention Historical tracking of changes and drift patterns over time Proactive Issue Resolution Early warning system for configuration drift before it becomes a problem Actionable insights with specific remediation recommendations Workflow integration for team collaboration and change management Reduced Mean Time to Repair (MTTR) with trustworthy documentation during incidents Key Features Instant Drift Detection : Continuously compare your intended design against real-world infrastructure to uncover discrepancies Proactive Issue Resolution : Act on real-time data to remediate drift before it escalates, reducing downtime and troubleshooting delays Automated Documentation : Automatically keep your NetBox documentation aligned with operational reality, ensuring a consistent source of truth Real-time Monitoring : Provides real-time insights into network configuration changes Integration Ready : Works seamlessly with existing network and infrastructure operations investments Deviation Management : Comprehensive workflow for reviewing, analyzing, and resolving detected drift Data Quality Assurance : Validates the accuracy and completeness of network documentation How NetBox Assurance Works NetBox Assurance operates through a three-stage process that transforms raw network data into actionable insights: 1. Data Ingestion Pipeline Network data flows into NetBox Enterprise through multiple sources: - NetBox Discovery Agents - Automated network and device discovery - Controller Integrations - VMware vCenter, Juniper Mist, Cisco Catalyst Center, etc. - Diode API - Custom integrations using Python or Go SDKs 2. Intelligent Analysis Assurance automatically compares ingested data against existing NetBox documentation to identify: - New devices discovered but not documented in NetBox - Configuration changes that deviate from intended state - Missing infrastructure that exists in documentation but not in reality - Data quality issues that require investigation or cleanup 3. Deviation Workflow When operational drift is detected, Assurance creates deviations that provide: - Detailed change analysis showing exactly what differs - Proposed remediation actions to resolve the drift - Historical context for understanding change patterns - Collaboration tools for team review and approval Common Use Cases NetBox Assurance supports network teams across different operational maturity levels: Day 1: Initial NetBox Population Controlled onboarding of network data into NetBox with review and approval workflows Data quality validation before information becomes part of your source of truth Faster time to value with confidence in documentation accuracy Day 1.5: Network Management Maturity Gradual documentation improvement while maintaining daily operations Process improvement insights based on drift detection patterns Foundation building for network automation initiatives Day 2: Operational Excellence Proactive drift detection for mature network operations teams Immediate response to unauthorized or unexpected configuration changes Continuous validation of network automation results and change management processes Specific Applications Network Operations : Maintain network configurations consistent with documented standards Infrastructure Management : Ensure infrastructure remains aligned with planned designs Compliance and Security : Support compliance efforts by detecting unauthorized changes and configuration drift Incident Prevention : Identify and address deviations proactively to prevent major disruptions Change Management : Track and validate configuration changes across your infrastructure Integration with NetBox Discovery NetBox Assurance and NetBox Discovery work together to provide complete network visibility and control: Discovery provides the data - Automated collection from network devices and controllers Assurance provides the intelligence - Analysis, drift detection, and remediation workflows Combined value - Complete visibility and control over network documentation accuracy This integration enables teams to not only discover their network infrastructure automatically but also maintain its accuracy over time. Availability NetBox Enterprise NetBox Assurance is available as an optional component of NetBox Enterprise. Your license file determines whether Assurance services are enabled during installation. NetBox Cloud NetBox Assurance will be available as an optional add-on for NetBox Cloud in a future release. Stay tuned for availability updates. NetBox Community Edition NetBox Assurance is not available for NetBox Community Edition. However, the underlying Diode project provides data ingestion capabilities that work with NetBox Discovery agents. Getting Started Ready to start using NetBox Assurance? Follow these steps: Get Started - Complete setup and configuration guide with prerequisites, installation steps, and initial workflow Using the Interface - Detailed guide to navigating and using the NetBox Assurance interface NetBox Discovery - Set up automated network discovery for data ingestion Support and Resources Community Support : Connect with the community on Slack in the #netbox channel Integration Guides : Learn about Diode Integration for advanced API and SDK usage With NetBox Assurance , teams can detect, report, and resolve network deviations in real time, ensuring a consistent and reliable network environment through continuous validation and corrective actions. Transform your network operations by ensuring your documentation stays current and accurate, enabling faster incident resolution, better compliance, and the confidence to move quickly with reliable network automation.","title":"Overview"},{"location":"netbox-assurance/#netbox-assurance","text":"NetBox Assurance automatically detects operational drift between your intended network design (documented in NetBox) and your actual network infrastructure. It continuously monitors network and infrastructure, comparing your intended design against real-world infrastructure to uncover discrepancies and provide proactive remediation capabilities. By ensuring your NetBox documentation stays current and accurate, Assurance enables faster incident resolution, better compliance, and the confidence to move quickly with reliable network automation.","title":"NetBox Assurance"},{"location":"netbox-assurance/#what-makes-netbox-assurance-unique","text":"Unlike traditional monitoring tools that focus on performance metrics, NetBox Assurance focuses on configuration accuracy and documentation integrity . It bridges the gap between what you've documented in NetBox and what actually exists in your network.","title":"What Makes NetBox Assurance Unique"},{"location":"netbox-assurance/#automated-operational-drift-detection","text":"Continuous comparison of ingested network data against NetBox documentation Real-time detection of configuration changes and undocumented infrastructure Intelligent analysis that identifies meaningful deviations requiring attention Historical tracking of changes and drift patterns over time","title":"Automated Operational Drift Detection"},{"location":"netbox-assurance/#proactive-issue-resolution","text":"Early warning system for configuration drift before it becomes a problem Actionable insights with specific remediation recommendations Workflow integration for team collaboration and change management Reduced Mean Time to Repair (MTTR) with trustworthy documentation during incidents","title":"Proactive Issue Resolution"},{"location":"netbox-assurance/#key-features","text":"Instant Drift Detection : Continuously compare your intended design against real-world infrastructure to uncover discrepancies Proactive Issue Resolution : Act on real-time data to remediate drift before it escalates, reducing downtime and troubleshooting delays Automated Documentation : Automatically keep your NetBox documentation aligned with operational reality, ensuring a consistent source of truth Real-time Monitoring : Provides real-time insights into network configuration changes Integration Ready : Works seamlessly with existing network and infrastructure operations investments Deviation Management : Comprehensive workflow for reviewing, analyzing, and resolving detected drift Data Quality Assurance : Validates the accuracy and completeness of network documentation","title":"Key Features"},{"location":"netbox-assurance/#how-netbox-assurance-works","text":"NetBox Assurance operates through a three-stage process that transforms raw network data into actionable insights:","title":"How NetBox Assurance Works"},{"location":"netbox-assurance/#1-data-ingestion-pipeline","text":"Network data flows into NetBox Enterprise through multiple sources: - NetBox Discovery Agents - Automated network and device discovery - Controller Integrations - VMware vCenter, Juniper Mist, Cisco Catalyst Center, etc. - Diode API - Custom integrations using Python or Go SDKs","title":"1. Data Ingestion Pipeline"},{"location":"netbox-assurance/#2-intelligent-analysis","text":"Assurance automatically compares ingested data against existing NetBox documentation to identify: - New devices discovered but not documented in NetBox - Configuration changes that deviate from intended state - Missing infrastructure that exists in documentation but not in reality - Data quality issues that require investigation or cleanup","title":"2. Intelligent Analysis"},{"location":"netbox-assurance/#3-deviation-workflow","text":"When operational drift is detected, Assurance creates deviations that provide: - Detailed change analysis showing exactly what differs - Proposed remediation actions to resolve the drift - Historical context for understanding change patterns - Collaboration tools for team review and approval","title":"3. Deviation Workflow"},{"location":"netbox-assurance/#common-use-cases","text":"NetBox Assurance supports network teams across different operational maturity levels:","title":"Common Use Cases"},{"location":"netbox-assurance/#day-1-initial-netbox-population","text":"Controlled onboarding of network data into NetBox with review and approval workflows Data quality validation before information becomes part of your source of truth Faster time to value with confidence in documentation accuracy","title":"Day 1: Initial NetBox Population"},{"location":"netbox-assurance/#day-15-network-management-maturity","text":"Gradual documentation improvement while maintaining daily operations Process improvement insights based on drift detection patterns Foundation building for network automation initiatives","title":"Day 1.5: Network Management Maturity"},{"location":"netbox-assurance/#day-2-operational-excellence","text":"Proactive drift detection for mature network operations teams Immediate response to unauthorized or unexpected configuration changes Continuous validation of network automation results and change management processes","title":"Day 2: Operational Excellence"},{"location":"netbox-assurance/#specific-applications","text":"Network Operations : Maintain network configurations consistent with documented standards Infrastructure Management : Ensure infrastructure remains aligned with planned designs Compliance and Security : Support compliance efforts by detecting unauthorized changes and configuration drift Incident Prevention : Identify and address deviations proactively to prevent major disruptions Change Management : Track and validate configuration changes across your infrastructure","title":"Specific Applications"},{"location":"netbox-assurance/#integration-with-netbox-discovery","text":"NetBox Assurance and NetBox Discovery work together to provide complete network visibility and control: Discovery provides the data - Automated collection from network devices and controllers Assurance provides the intelligence - Analysis, drift detection, and remediation workflows Combined value - Complete visibility and control over network documentation accuracy This integration enables teams to not only discover their network infrastructure automatically but also maintain its accuracy over time.","title":"Integration with NetBox Discovery"},{"location":"netbox-assurance/#availability","text":"","title":"Availability"},{"location":"netbox-assurance/#netbox-enterprise","text":"NetBox Assurance is available as an optional component of NetBox Enterprise. Your license file determines whether Assurance services are enabled during installation.","title":"NetBox Enterprise"},{"location":"netbox-assurance/#netbox-cloud","text":"NetBox Assurance will be available as an optional add-on for NetBox Cloud in a future release. Stay tuned for availability updates.","title":"NetBox Cloud"},{"location":"netbox-assurance/#netbox-community-edition","text":"NetBox Assurance is not available for NetBox Community Edition. However, the underlying Diode project provides data ingestion capabilities that work with NetBox Discovery agents.","title":"NetBox Community Edition"},{"location":"netbox-assurance/#getting-started","text":"Ready to start using NetBox Assurance? Follow these steps: Get Started - Complete setup and configuration guide with prerequisites, installation steps, and initial workflow Using the Interface - Detailed guide to navigating and using the NetBox Assurance interface NetBox Discovery - Set up automated network discovery for data ingestion","title":"Getting Started"},{"location":"netbox-assurance/#support-and-resources","text":"Community Support : Connect with the community on Slack in the #netbox channel Integration Guides : Learn about Diode Integration for advanced API and SDK usage With NetBox Assurance , teams can detect, report, and resolve network deviations in real time, ensuring a consistent and reliable network environment through continuous validation and corrective actions. Transform your network operations by ensuring your documentation stays current and accurate, enabling faster incident resolution, better compliance, and the confidence to move quickly with reliable network automation.","title":"Support and Resources"},{"location":"netbox-assurance/getting-started/","tags":["cloud","enterprise","netbox","assurance","getting-started","installation","configuration"],"text":"Getting Started with NetBox Assurance This guide will help you set up, configure, and start using NetBox Assurance to maintain accurate network documentation and proactive drift detection. Follow these steps to go from installation to your first operational workflow. Prerequisites Before enabling NetBox Assurance, ensure you have: Technical Requirements NetBox Enterprise 1.10+ or NetBox Cloud (coming soon) with Assurance add-on Active NetBox Assurance license Network connectivity for data ingestion sources Data Sources To maximize value from NetBox Assurance, you'll need at least one data source: NetBox Discovery - Recommended for automated network discovery Controller integrations - For centralized network management platforms Custom integrations - Using the Diode SDK Team Preparation Identify team members who will manage deviations Define your drift tolerance and remediation policies Plan your initial network segment for testing Installation and Setup NetBox Enterprise NetBox Assurance is available as an optional component of NetBox Enterprise. During installation, your license file determines whether Assurance is enabled. Installation Steps: 1. Verify your license includes NetBox Assurance entitlement 2. During NetBox Enterprise installation, Assurance services are automatically deployed if licensed 3. The NetBox Assurance UI and Diode data plugins are installed automatically 4. Access the Assurance menu in your NetBox interface to confirm installation NetBox Cloud NetBox Assurance will be available as an optional add-on for NetBox Cloud in a future release. Coming Soon: NetBox Assurance for NetBox Cloud is currently in development. When available, it will feature: 1. Seamless integration as an optional add-on 2. Automatic provisioning and setup 3. Built-in UI and Diode data plugins 4. No additional configuration required Stay tuned for availability updates. Verification After installation, verify NetBox Assurance is working: 1. Log into your NetBox instance 2. Look for the Assurance menu in the sidebar 3. Navigate to Assurance > Deviations to access the main interface 4. Confirm you can see the deviation management interface Initial Configuration Data Source Setup Choose and configure your primary data source: Option 1: NetBox Discovery (Recommended) Follow the NetBox Discovery setup guide Configure discovery agents for your network segments Set up automated discovery schedules Verify data is flowing into NetBox Option 2: Controller Integrations Configure your network controllers (VMware vCenter, Juniper Mist, etc.) Set up API access and credentials Configure data collection schedules Test connectivity and data flow Option 3: Custom Diode Integration Review the Diode integration documentation Develop custom integrations using Python or Go SDKs Configure data ingestion pipelines Test data flow and validation Your First Workflow Phase 1: Initial Data Ingestion Start with a small, well-understood network segment: Select a test segment : Choose 10-20 devices you know well Configure data source : Set up discovery or integration for this segment Initial ingestion : Run your first data collection Review results : Check that devices appear correctly in NetBox Phase 2: Understanding Deviations Learn how NetBox Assurance detects and presents drift: Access deviations : Navigate to Assurance > Active Deviations Review first deviations : Examine what Assurance detected Understand the interface : Familiarize yourself with the interface documentation Analyze changes : Click on individual deviations to see detailed change analysis Phase 3: Processing Your First Deviations Practice the remediation workflow: Triage deviations : Determine which require action Apply safe changes : Start with obvious corrections (e.g., missing devices) Ignore acceptable drift : Mark intentional differences as ignored Document decisions : Use NetBox's change logging for audit trails Phase 4: Operational Integration Establish ongoing processes: Daily review schedule : Set up regular deviation review sessions Team workflows : Define roles and responsibilities for deviation management Escalation procedures : Create processes for complex or critical deviations Expand coverage : Gradually add more network segments Common Implementation Patterns Day 1: Initial NetBox Population Use NetBox Assurance to control the initial population of your NetBox instance: Workflow: 1. Configure data sources for comprehensive network discovery 2. Review all discovered devices before accepting into NetBox 3. Use deviations to validate data quality and completeness 4. Establish baseline documentation with confidence Benefits: - Controlled onboarding with review and approval workflows - Data quality validation before information becomes your source of truth - Faster time to value with confidence in documentation accuracy Day 1.5: Improving Network Management Maturity Gradually improve your network documentation while maintaining operations: Workflow: 1. Focus on high-priority network segments first 2. Use drift patterns to identify process improvement opportunities 3. Implement automation based on consistent deviation types 4. Build foundation for advanced network automation Benefits: - Gradual documentation improvement without disrupting daily operations - Process improvement insights based on drift detection patterns - Foundation building for network automation initiatives Day 2: Operational Excellence Maintain high-quality network documentation for mature operations: Workflow: 1. Monitor for unauthorized or unexpected configuration changes 2. Validate network automation results automatically 3. Integrate with change management processes 4. Use for compliance reporting and auditing Benefits: - Proactive drift detection for mature network operations teams - Immediate response to unauthorized or unexpected configuration changes - Continuous validation of network automation results and change management processes Integration with Existing Workflows Change Management Integration Pre-change validation : Verify current state before making changes Post-change verification : Confirm changes were applied correctly Rollback detection : Identify when changes need to be reverted Incident Response Enhancement Faster troubleshooting : Access to accurate, real-time network state Root cause analysis : Historical tracking of configuration changes Documentation trust : Confidence in network documentation during incidents Compliance and Auditing Automated compliance checking : Continuous validation against standards Audit trail maintenance : Historical record of all network changes Reporting capabilities : Generate compliance reports and metrics Troubleshooting Common Issues No Deviations Appearing Verify data sources are configured and running Check network connectivity between sources and NetBox Confirm permissions are set correctly Review logs for ingestion errors Too Many False Positives Review your tolerance settings for acceptable drift Use the ignore function for known acceptable differences Refine your data source configurations Consider adjusting detection sensitivity Performance Issues Use date range filters to limit large datasets Process deviations in smaller batches Schedule data ingestion during off-peak hours Contact support for optimization guidance Next Steps Once you've completed your initial setup and first workflow: Master the Interface - Learn advanced features and workflows Expand NetBox Discovery - Add more network segments and device types Explore Diode Integration - Build custom integrations for specialized needs Scale Operations - Expand to full network coverage and integrate with enterprise workflows Support and Resources Interface Documentation : Detailed guide to using the NetBox Assurance interface NetBox Discovery : Complete setup and configuration guide Diode Integration : Advanced API and SDK documentation Community Support : Connect with the community on Slack in the #netbox channel NetBox Assurance transforms network operations by ensuring your documentation stays current and accurate. Follow this guide to establish a solid foundation for maintaining network documentation integrity and enabling confident network automation.","title":"Get Started"},{"location":"netbox-assurance/getting-started/#getting-started-with-netbox-assurance","text":"This guide will help you set up, configure, and start using NetBox Assurance to maintain accurate network documentation and proactive drift detection. Follow these steps to go from installation to your first operational workflow.","title":"Getting Started with NetBox Assurance"},{"location":"netbox-assurance/getting-started/#prerequisites","text":"Before enabling NetBox Assurance, ensure you have:","title":"Prerequisites"},{"location":"netbox-assurance/getting-started/#technical-requirements","text":"NetBox Enterprise 1.10+ or NetBox Cloud (coming soon) with Assurance add-on Active NetBox Assurance license Network connectivity for data ingestion sources","title":"Technical Requirements"},{"location":"netbox-assurance/getting-started/#data-sources","text":"To maximize value from NetBox Assurance, you'll need at least one data source: NetBox Discovery - Recommended for automated network discovery Controller integrations - For centralized network management platforms Custom integrations - Using the Diode SDK","title":"Data Sources"},{"location":"netbox-assurance/getting-started/#team-preparation","text":"Identify team members who will manage deviations Define your drift tolerance and remediation policies Plan your initial network segment for testing","title":"Team Preparation"},{"location":"netbox-assurance/getting-started/#installation-and-setup","text":"","title":"Installation and Setup"},{"location":"netbox-assurance/getting-started/#netbox-enterprise","text":"NetBox Assurance is available as an optional component of NetBox Enterprise. During installation, your license file determines whether Assurance is enabled. Installation Steps: 1. Verify your license includes NetBox Assurance entitlement 2. During NetBox Enterprise installation, Assurance services are automatically deployed if licensed 3. The NetBox Assurance UI and Diode data plugins are installed automatically 4. Access the Assurance menu in your NetBox interface to confirm installation","title":"NetBox Enterprise"},{"location":"netbox-assurance/getting-started/#netbox-cloud","text":"NetBox Assurance will be available as an optional add-on for NetBox Cloud in a future release. Coming Soon: NetBox Assurance for NetBox Cloud is currently in development. When available, it will feature: 1. Seamless integration as an optional add-on 2. Automatic provisioning and setup 3. Built-in UI and Diode data plugins 4. No additional configuration required Stay tuned for availability updates.","title":"NetBox Cloud"},{"location":"netbox-assurance/getting-started/#verification","text":"After installation, verify NetBox Assurance is working: 1. Log into your NetBox instance 2. Look for the Assurance menu in the sidebar 3. Navigate to Assurance > Deviations to access the main interface 4. Confirm you can see the deviation management interface","title":"Verification"},{"location":"netbox-assurance/getting-started/#initial-configuration","text":"","title":"Initial Configuration"},{"location":"netbox-assurance/getting-started/#data-source-setup","text":"Choose and configure your primary data source:","title":"Data Source Setup"},{"location":"netbox-assurance/getting-started/#your-first-workflow","text":"","title":"Your First Workflow"},{"location":"netbox-assurance/getting-started/#phase-1-initial-data-ingestion","text":"Start with a small, well-understood network segment: Select a test segment : Choose 10-20 devices you know well Configure data source : Set up discovery or integration for this segment Initial ingestion : Run your first data collection Review results : Check that devices appear correctly in NetBox","title":"Phase 1: Initial Data Ingestion"},{"location":"netbox-assurance/getting-started/#phase-2-understanding-deviations","text":"Learn how NetBox Assurance detects and presents drift: Access deviations : Navigate to Assurance > Active Deviations Review first deviations : Examine what Assurance detected Understand the interface : Familiarize yourself with the interface documentation Analyze changes : Click on individual deviations to see detailed change analysis","title":"Phase 2: Understanding Deviations"},{"location":"netbox-assurance/getting-started/#phase-3-processing-your-first-deviations","text":"Practice the remediation workflow: Triage deviations : Determine which require action Apply safe changes : Start with obvious corrections (e.g., missing devices) Ignore acceptable drift : Mark intentional differences as ignored Document decisions : Use NetBox's change logging for audit trails","title":"Phase 3: Processing Your First Deviations"},{"location":"netbox-assurance/getting-started/#phase-4-operational-integration","text":"Establish ongoing processes: Daily review schedule : Set up regular deviation review sessions Team workflows : Define roles and responsibilities for deviation management Escalation procedures : Create processes for complex or critical deviations Expand coverage : Gradually add more network segments","title":"Phase 4: Operational Integration"},{"location":"netbox-assurance/getting-started/#common-implementation-patterns","text":"","title":"Common Implementation Patterns"},{"location":"netbox-assurance/getting-started/#day-1-initial-netbox-population","text":"Use NetBox Assurance to control the initial population of your NetBox instance: Workflow: 1. Configure data sources for comprehensive network discovery 2. Review all discovered devices before accepting into NetBox 3. Use deviations to validate data quality and completeness 4. Establish baseline documentation with confidence Benefits: - Controlled onboarding with review and approval workflows - Data quality validation before information becomes your source of truth - Faster time to value with confidence in documentation accuracy","title":"Day 1: Initial NetBox Population"},{"location":"netbox-assurance/getting-started/#day-15-improving-network-management-maturity","text":"Gradually improve your network documentation while maintaining operations: Workflow: 1. Focus on high-priority network segments first 2. Use drift patterns to identify process improvement opportunities 3. Implement automation based on consistent deviation types 4. Build foundation for advanced network automation Benefits: - Gradual documentation improvement without disrupting daily operations - Process improvement insights based on drift detection patterns - Foundation building for network automation initiatives","title":"Day 1.5: Improving Network Management Maturity"},{"location":"netbox-assurance/getting-started/#day-2-operational-excellence","text":"Maintain high-quality network documentation for mature operations: Workflow: 1. Monitor for unauthorized or unexpected configuration changes 2. Validate network automation results automatically 3. Integrate with change management processes 4. Use for compliance reporting and auditing Benefits: - Proactive drift detection for mature network operations teams - Immediate response to unauthorized or unexpected configuration changes - Continuous validation of network automation results and change management processes","title":"Day 2: Operational Excellence"},{"location":"netbox-assurance/getting-started/#integration-with-existing-workflows","text":"","title":"Integration with Existing Workflows"},{"location":"netbox-assurance/getting-started/#change-management-integration","text":"Pre-change validation : Verify current state before making changes Post-change verification : Confirm changes were applied correctly Rollback detection : Identify when changes need to be reverted","title":"Change Management Integration"},{"location":"netbox-assurance/getting-started/#incident-response-enhancement","text":"Faster troubleshooting : Access to accurate, real-time network state Root cause analysis : Historical tracking of configuration changes Documentation trust : Confidence in network documentation during incidents","title":"Incident Response Enhancement"},{"location":"netbox-assurance/getting-started/#compliance-and-auditing","text":"Automated compliance checking : Continuous validation against standards Audit trail maintenance : Historical record of all network changes Reporting capabilities : Generate compliance reports and metrics","title":"Compliance and Auditing"},{"location":"netbox-assurance/getting-started/#troubleshooting-common-issues","text":"","title":"Troubleshooting Common Issues"},{"location":"netbox-assurance/getting-started/#no-deviations-appearing","text":"Verify data sources are configured and running Check network connectivity between sources and NetBox Confirm permissions are set correctly Review logs for ingestion errors","title":"No Deviations Appearing"},{"location":"netbox-assurance/getting-started/#too-many-false-positives","text":"Review your tolerance settings for acceptable drift Use the ignore function for known acceptable differences Refine your data source configurations Consider adjusting detection sensitivity","title":"Too Many False Positives"},{"location":"netbox-assurance/getting-started/#performance-issues","text":"Use date range filters to limit large datasets Process deviations in smaller batches Schedule data ingestion during off-peak hours Contact support for optimization guidance","title":"Performance Issues"},{"location":"netbox-assurance/getting-started/#next-steps","text":"Once you've completed your initial setup and first workflow: Master the Interface - Learn advanced features and workflows Expand NetBox Discovery - Add more network segments and device types Explore Diode Integration - Build custom integrations for specialized needs Scale Operations - Expand to full network coverage and integrate with enterprise workflows","title":"Next Steps"},{"location":"netbox-assurance/getting-started/#support-and-resources","text":"Interface Documentation : Detailed guide to using the NetBox Assurance interface NetBox Discovery : Complete setup and configuration guide Diode Integration : Advanced API and SDK documentation Community Support : Connect with the community on Slack in the #netbox channel NetBox Assurance transforms network operations by ensuring your documentation stays current and accurate. Follow this guide to establish a solid foundation for maintaining network documentation integrity and enabling confident network automation.","title":"Support and Resources"},{"location":"netbox-assurance/using-the-ui/","tags":["cloud","enterprise","assurance","ui","interface"],"text":"Using the NetBox Assurance UI The NetBox Assurance plugin provides a comprehensive web interface within NetBox for monitoring network drift, viewing deviation reports, and managing remediation workflows. This guide covers the interface features, navigation, and operational workflows for day-to-day use of NetBox Assurance. Prerequisites : Before using this guide, complete the Getting Started setup to ensure NetBox Assurance is properly configured and receiving data. Navigation Once the NetBox Assurance plugin is installed, you'll find the Assurance menu in the NetBox sidebar with the following sections: Deviation Types Deviation Types : Browse and manage different types of network deviations that can be detected Deviations Active Deviations : View currently unresolved configuration deviations All Deviations : Complete list of all detected deviations (active and resolved) Archived Deviations : Historical view of resolved or archived deviations Main Deviation Views All Deviations List The main deviations page provides a comprehensive overview of all detected network drift: Key Features: - Visual Charts : Timeline charts showing deviation trends and patterns - Filterable Table : Search and filter deviations by various criteria - Export Options : Export deviation data in multiple formats - Bulk Actions : Apply actions to multiple deviations simultaneously Available Filters: - Date range selection for focused analysis - Deviation type filtering - Status-based filtering - Source-based filtering Active Deviations Shows only unresolved deviations that require attention: - Real-time view of current network drift - Prioritized by detection date - Immediate action items for network operations teams Archived Deviations Historical view of resolved deviations: - Track remediation history - Analyze patterns in network drift - Compliance reporting and auditing Deviation Detail View When you click on a specific deviation, you'll see detailed information: Overview Tab Deviation Information: - Deviation name and identifier - Data type affected - Number of changes detected - Current status with visual indicators - Branch information (if using NetBox branching) - Source system and timestamp - Last update information Ingested Data Panel: - Raw data that was ingested from the network - Formatted JSON view for technical analysis Error Details (if applicable): - Error messages for failed operations - Detailed error information for troubleshooting Changes Tab Detailed view of specific configuration changes Object-by-object comparison Before/after state visualization Bulk Operations The deviation list supports several bulk operations: Rediff Selected Re-analyze selected deviations Useful when network state may have changed Updates deviation status based on current conditions Ignore Selected Mark deviations as acceptable Removes them from active monitoring Useful for planned configuration differences Apply Selected Automatically remediate selected deviations Applies corrections based on predefined rules Updates NetBox or network devices as configured Data Visualization Timeline Charts Visual representation of deviation trends over time Stacked bar charts showing deviation types Customizable date ranges for analysis Color-coded by deviation status Status Indicators Deviations are marked with clear visual indicators: - Active : Requires attention - Applied : Successfully remediated - Failed : Remediation attempt failed - Ignored : Marked as acceptable Export and Reporting Export Options Current View : Export filtered results All Data : Complete deviation dataset Custom Templates : Use predefined export formats Supported Formats Table format for immediate viewing Structured data formats for integration Custom export templates for specific reporting needs Integration Features NetBox Integration Seamless integration with NetBox's existing interface Respects NetBox's user permissions and roles Consistent styling and user experience Integration with NetBox's change logging system Branching Support Compatible with NetBox branching features Branch-specific deviation tracking Branch information displayed in deviation details Workflow Best Practices Daily Operations Review Active Deviations : Start with the active deviations view Analyze Trends : Check timeline charts for patterns Prioritize Actions : Focus on critical deviations first Bulk Processing : Use bulk actions for similar deviations Investigation Process Drill Down : Click on deviations for detailed analysis Review Changes : Examine specific configuration differences Check Source Data : Verify ingested data accuracy Determine Action : Decide between applying, ignoring, or escalating Remediation Workflow Select Appropriate Action : Choose between update NetBox or correct device Use Bulk Operations : Process similar deviations together Monitor Results : Verify successful remediation Document Decisions : Use NetBox's change logging for audit trails Troubleshooting Common Issues Failed Deviations : Check error details for specific failure reasons Missing Data : Verify source system connectivity Performance Considerations Use date range filters to limit large datasets Export data in smaller chunks for better performance Leverage bulk operations for efficiency The NetBox Assurance UI provides a powerful platform for managing network drift detection and remediation, helping maintain consistency between your documented network design and operational reality through an intuitive web interface.","title":"Using the Interface"},{"location":"netbox-assurance/using-the-ui/#using-the-netbox-assurance-ui","text":"The NetBox Assurance plugin provides a comprehensive web interface within NetBox for monitoring network drift, viewing deviation reports, and managing remediation workflows. This guide covers the interface features, navigation, and operational workflows for day-to-day use of NetBox Assurance. Prerequisites : Before using this guide, complete the Getting Started setup to ensure NetBox Assurance is properly configured and receiving data.","title":"Using the NetBox Assurance UI"},{"location":"netbox-assurance/using-the-ui/#navigation","text":"Once the NetBox Assurance plugin is installed, you'll find the Assurance menu in the NetBox sidebar with the following sections:","title":"Navigation"},{"location":"netbox-assurance/using-the-ui/#deviation-types","text":"Deviation Types : Browse and manage different types of network deviations that can be detected","title":"Deviation Types"},{"location":"netbox-assurance/using-the-ui/#deviations","text":"Active Deviations : View currently unresolved configuration deviations All Deviations : Complete list of all detected deviations (active and resolved) Archived Deviations : Historical view of resolved or archived deviations","title":"Deviations"},{"location":"netbox-assurance/using-the-ui/#main-deviation-views","text":"","title":"Main Deviation Views"},{"location":"netbox-assurance/using-the-ui/#all-deviations-list","text":"The main deviations page provides a comprehensive overview of all detected network drift: Key Features: - Visual Charts : Timeline charts showing deviation trends and patterns - Filterable Table : Search and filter deviations by various criteria - Export Options : Export deviation data in multiple formats - Bulk Actions : Apply actions to multiple deviations simultaneously Available Filters: - Date range selection for focused analysis - Deviation type filtering - Status-based filtering - Source-based filtering","title":"All Deviations List"},{"location":"netbox-assurance/using-the-ui/#active-deviations","text":"Shows only unresolved deviations that require attention: - Real-time view of current network drift - Prioritized by detection date - Immediate action items for network operations teams","title":"Active Deviations"},{"location":"netbox-assurance/using-the-ui/#archived-deviations","text":"Historical view of resolved deviations: - Track remediation history - Analyze patterns in network drift - Compliance reporting and auditing","title":"Archived Deviations"},{"location":"netbox-assurance/using-the-ui/#deviation-detail-view","text":"When you click on a specific deviation, you'll see detailed information:","title":"Deviation Detail View"},{"location":"netbox-assurance/using-the-ui/#overview-tab","text":"Deviation Information: - Deviation name and identifier - Data type affected - Number of changes detected - Current status with visual indicators - Branch information (if using NetBox branching) - Source system and timestamp - Last update information Ingested Data Panel: - Raw data that was ingested from the network - Formatted JSON view for technical analysis Error Details (if applicable): - Error messages for failed operations - Detailed error information for troubleshooting","title":"Overview Tab"},{"location":"netbox-assurance/using-the-ui/#changes-tab","text":"Detailed view of specific configuration changes Object-by-object comparison Before/after state visualization","title":"Changes Tab"},{"location":"netbox-assurance/using-the-ui/#bulk-operations","text":"The deviation list supports several bulk operations:","title":"Bulk Operations"},{"location":"netbox-assurance/using-the-ui/#rediff-selected","text":"Re-analyze selected deviations Useful when network state may have changed Updates deviation status based on current conditions","title":"Rediff Selected"},{"location":"netbox-assurance/using-the-ui/#ignore-selected","text":"Mark deviations as acceptable Removes them from active monitoring Useful for planned configuration differences","title":"Ignore Selected"},{"location":"netbox-assurance/using-the-ui/#apply-selected","text":"Automatically remediate selected deviations Applies corrections based on predefined rules Updates NetBox or network devices as configured","title":"Apply Selected"},{"location":"netbox-assurance/using-the-ui/#data-visualization","text":"","title":"Data Visualization"},{"location":"netbox-assurance/using-the-ui/#timeline-charts","text":"Visual representation of deviation trends over time Stacked bar charts showing deviation types Customizable date ranges for analysis Color-coded by deviation status","title":"Timeline Charts"},{"location":"netbox-assurance/using-the-ui/#status-indicators","text":"Deviations are marked with clear visual indicators: - Active : Requires attention - Applied : Successfully remediated - Failed : Remediation attempt failed - Ignored : Marked as acceptable","title":"Status Indicators"},{"location":"netbox-assurance/using-the-ui/#export-and-reporting","text":"","title":"Export and Reporting"},{"location":"netbox-assurance/using-the-ui/#export-options","text":"Current View : Export filtered results All Data : Complete deviation dataset Custom Templates : Use predefined export formats","title":"Export Options"},{"location":"netbox-assurance/using-the-ui/#supported-formats","text":"Table format for immediate viewing Structured data formats for integration Custom export templates for specific reporting needs","title":"Supported Formats"},{"location":"netbox-assurance/using-the-ui/#integration-features","text":"","title":"Integration Features"},{"location":"netbox-assurance/using-the-ui/#netbox-integration","text":"Seamless integration with NetBox's existing interface Respects NetBox's user permissions and roles Consistent styling and user experience Integration with NetBox's change logging system","title":"NetBox Integration"},{"location":"netbox-assurance/using-the-ui/#branching-support","text":"Compatible with NetBox branching features Branch-specific deviation tracking Branch information displayed in deviation details","title":"Branching Support"},{"location":"netbox-assurance/using-the-ui/#workflow-best-practices","text":"","title":"Workflow Best Practices"},{"location":"netbox-assurance/using-the-ui/#daily-operations","text":"Review Active Deviations : Start with the active deviations view Analyze Trends : Check timeline charts for patterns Prioritize Actions : Focus on critical deviations first Bulk Processing : Use bulk actions for similar deviations","title":"Daily Operations"},{"location":"netbox-assurance/using-the-ui/#investigation-process","text":"Drill Down : Click on deviations for detailed analysis Review Changes : Examine specific configuration differences Check Source Data : Verify ingested data accuracy Determine Action : Decide between applying, ignoring, or escalating","title":"Investigation Process"},{"location":"netbox-assurance/using-the-ui/#remediation-workflow","text":"Select Appropriate Action : Choose between update NetBox or correct device Use Bulk Operations : Process similar deviations together Monitor Results : Verify successful remediation Document Decisions : Use NetBox's change logging for audit trails","title":"Remediation Workflow"},{"location":"netbox-assurance/using-the-ui/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"netbox-assurance/using-the-ui/#common-issues","text":"Failed Deviations : Check error details for specific failure reasons Missing Data : Verify source system connectivity","title":"Common Issues"},{"location":"netbox-assurance/using-the-ui/#performance-considerations","text":"Use date range filters to limit large datasets Export data in smaller chunks for better performance Leverage bulk operations for efficiency The NetBox Assurance UI provides a powerful platform for managing network drift detection and remediation, helping maintain consistency between your documented network design and operational reality through an intuitive web interface.","title":"Performance Considerations"},{"location":"netbox-cloud/migrating-to-netbox-cloud/","tags":["cloud","migration","getting-started","database"],"text":"Migrating to NetBox Cloud Migrating from an on-premises NetBox open source instance to a NetBox Labs NetBox Cloud environment is a straightforward process. Since NetBox Cloud is built using the same open source software you're already using, most imports can be completed quickly for a timely cutover. This checklist will walk you through the steps, highlighting mandatory and optional points in the process. 1 - Record your current NetBox version Navigate to your NetBox portal login page to view the version of NetBox you are running. You can also find this information within the application. This helps the NetBox team understand which upgrade path is required for your data. 2 - Export your existing NetBox database Use the following command to export your existing NetBox database: pg_dump --no-owner --no-privileges --username [ netbox ] --password --host [ localhost ] [ netbox ] > [ netbox.sql ] Warning Inform the NetBox Labs team if you used any additional flags for the pg_dump command, or if you exported the data to a different format. 3 - (Optional) Archive your /media directory Optionally, if you are storing images inside NetBox, use the command below to archive your media directory. Note that the example below shows the default file path. Update the path if you have changed the location of these files. tar -czf netbox_media.tar.gz /opt/netbox/netbox/media/ 4 - (Optional) Archive your /scripts directory Optionally, if you have uploaded custom scripts to NetBox, use the command below to archive your scripts directory. Note that the example below shows the default file path. Update the path if you have changed the location of these files. tar -czf netbox_scripts.tar.gz /opt/netbox/netbox/scripts/ 5 - (Optional) Archive your /reports directory Optionally, if you have uploaded custom reports to NetBox, use the command below to archive your reports directory. Note that the example below shows the default file path. Update the path if you have changed the location of these files. tar -czf netbox_scripts.tar.gz /opt/netbox/netbox/reports/ 6 - Upload the files to a shared location Upload the files created in the steps above to a shareable location such as FTP, Dropbox, Box, or Google Drive. If necessary, the NetBox Labs team can create a secure, dedicated location for you to use.","title":"Migrating to NetBox Cloud"},{"location":"netbox-cloud/migrating-to-netbox-cloud/#migrating-to-netbox-cloud","text":"Migrating from an on-premises NetBox open source instance to a NetBox Labs NetBox Cloud environment is a straightforward process. Since NetBox Cloud is built using the same open source software you're already using, most imports can be completed quickly for a timely cutover. This checklist will walk you through the steps, highlighting mandatory and optional points in the process.","title":"Migrating to NetBox Cloud"},{"location":"netbox-cloud/migrating-to-netbox-cloud/#1-record-your-current-netbox-version","text":"Navigate to your NetBox portal login page to view the version of NetBox you are running. You can also find this information within the application. This helps the NetBox team understand which upgrade path is required for your data.","title":"1 - Record your current NetBox version"},{"location":"netbox-cloud/migrating-to-netbox-cloud/#2-export-your-existing-netbox-database","text":"Use the following command to export your existing NetBox database: pg_dump --no-owner --no-privileges --username [ netbox ] --password --host [ localhost ] [ netbox ] > [ netbox.sql ] Warning Inform the NetBox Labs team if you used any additional flags for the pg_dump command, or if you exported the data to a different format.","title":"2 - Export your existing NetBox database"},{"location":"netbox-cloud/migrating-to-netbox-cloud/#3-optional-archive-your-media-directory","text":"Optionally, if you are storing images inside NetBox, use the command below to archive your media directory. Note that the example below shows the default file path. Update the path if you have changed the location of these files. tar -czf netbox_media.tar.gz /opt/netbox/netbox/media/","title":"3 - (Optional) Archive your /media directory"},{"location":"netbox-cloud/migrating-to-netbox-cloud/#4-optional-archive-your-scripts-directory","text":"Optionally, if you have uploaded custom scripts to NetBox, use the command below to archive your scripts directory. Note that the example below shows the default file path. Update the path if you have changed the location of these files. tar -czf netbox_scripts.tar.gz /opt/netbox/netbox/scripts/","title":"4 - (Optional) Archive your /scripts directory"},{"location":"netbox-cloud/migrating-to-netbox-cloud/#5-optional-archive-your-reports-directory","text":"Optionally, if you have uploaded custom reports to NetBox, use the command below to archive your reports directory. Note that the example below shows the default file path. Update the path if you have changed the location of these files. tar -czf netbox_scripts.tar.gz /opt/netbox/netbox/reports/","title":"5 - (Optional) Archive your /reports directory"},{"location":"netbox-cloud/migrating-to-netbox-cloud/#6-upload-the-files-to-a-shared-location","text":"Upload the files created in the steps above to a shareable location such as FTP, Dropbox, Box, or Google Drive. If necessary, the NetBox Labs team can create a secure, dedicated location for you to use.","title":"6 - Upload the files to a shared location"},{"location":"netbox-discovery/","tags":["community","cloud","enterprise","netbox","discovery"],"text":"NetBox Discovery NetBox Discovery is an advanced network discovery and observability solution designed to simplify documenting your network and help detect network drift. It extends NetBox by providing automated network and device discovery capabilities through the orb-agent, a lightweight and scalable discovery component. Enterprise Benefits NetBox Discovery enables enterprise teams to: Accelerate Network Documentation : Automatically discover and populate your NetBox instance with accurate network topology and device information Ensure Compliance : Continuously audit your network against documented standards and detect unauthorized changes Reduce Manual Effort : Eliminate time-consuming manual data entry and reduce human error in network documentation Enable Automation : Maintain an accurate source of truth that powers network automation workflows Detect Drift : Identify when your network configuration deviates from intended designs Getting Started Ready to start discovering your network? Follow our comprehensive getting started guide: Get Started with NetBox Discovery - Complete setup and configuration guide Quick Start Paths For NetBox Enterprise Users: - Enterprise Quick Start - Get up and running quickly with your existing NetBox Enterprise deployment For New Deployments: - Complete Setup Guide - Full end-to-end installation and configuration Enterprise Use Cases Network Asset Management Automatically discover and maintain an accurate inventory of network devices, interfaces, and IP addresses across your enterprise infrastructure. Ideal for : Large enterprises, multi-site deployments, compliance requirements Network Auditing & Compliance Continuously scan your network to ensure configurations match documented standards and detect unauthorized changes. Ideal for : Regulated industries, security-focused organizations, change management processes Infrastructure Documentation Keep your network documentation current by automatically updating NetBox with discovered changes to your network topology. Ideal for : Growing organizations, complex networks, automation initiatives Key Features Automated Network Discovery : Schedule scans and identify devices and assets across your network using multiple discovery backends Flexible Configuration : Define custom discovery policies tailored to specific network environments through YAML configuration Enterprise Security : Integrate with external secret stores like HashiCorp Vault for secure credential handling Multiple Discovery Methods : Support for network discovery, device discovery, and worker backend capabilities Seamless Integration : Fully integrated with NetBox through Diode for data ingestion and reconciliation Production Ready : Docker-based deployment designed for enterprise scaling and management Architecture Overview NetBox Discovery leverages the orb-agent, a containerized Go application that uses network protocols (ICMP, TCP, UDP, SSH) to discover devices and other network assets. The agent is configured through YAML files that define: Configuration Sources : Local files or Git repositories for policy management Secrets Management : Integration with external secret stores for credential security Discovery Policies : Customizable rules for network scanning and device identification Backend Selection : Choice of discovery methods based on network requirements Discovered data is sent to Diode for ingestion into NetBox, where it can be matched and reconciled to identify drift and deviations. The NetBox database is updated where relevant, ensuring data accuracy and reducing manual entry. Support and Resources Getting Started : For complete setup instructions, see the NetBox Discovery Getting Started Guide Diode Documentation : For advanced Diode configuration and SDK usage, see the Diode documentation GitHub Repository : Find the orb-agent source code here Community Support : Connect with the community on Slack in the #netbox channel By leveraging NetBox Discovery , organizations can enhance their network visibility, streamline IT operations, and maintain an accurate source of truth for their network infrastructure.","title":"Overview"},{"location":"netbox-discovery/#netbox-discovery","text":"NetBox Discovery is an advanced network discovery and observability solution designed to simplify documenting your network and help detect network drift. It extends NetBox by providing automated network and device discovery capabilities through the orb-agent, a lightweight and scalable discovery component.","title":"NetBox Discovery"},{"location":"netbox-discovery/#enterprise-benefits","text":"NetBox Discovery enables enterprise teams to: Accelerate Network Documentation : Automatically discover and populate your NetBox instance with accurate network topology and device information Ensure Compliance : Continuously audit your network against documented standards and detect unauthorized changes Reduce Manual Effort : Eliminate time-consuming manual data entry and reduce human error in network documentation Enable Automation : Maintain an accurate source of truth that powers network automation workflows Detect Drift : Identify when your network configuration deviates from intended designs","title":"Enterprise Benefits"},{"location":"netbox-discovery/#getting-started","text":"Ready to start discovering your network? Follow our comprehensive getting started guide: Get Started with NetBox Discovery - Complete setup and configuration guide","title":"Getting Started"},{"location":"netbox-discovery/#quick-start-paths","text":"For NetBox Enterprise Users: - Enterprise Quick Start - Get up and running quickly with your existing NetBox Enterprise deployment For New Deployments: - Complete Setup Guide - Full end-to-end installation and configuration","title":"Quick Start Paths"},{"location":"netbox-discovery/#enterprise-use-cases","text":"","title":"Enterprise Use Cases"},{"location":"netbox-discovery/#network-asset-management","text":"Automatically discover and maintain an accurate inventory of network devices, interfaces, and IP addresses across your enterprise infrastructure. Ideal for : Large enterprises, multi-site deployments, compliance requirements","title":"Network Asset Management"},{"location":"netbox-discovery/#network-auditing-compliance","text":"Continuously scan your network to ensure configurations match documented standards and detect unauthorized changes. Ideal for : Regulated industries, security-focused organizations, change management processes","title":"Network Auditing &amp; Compliance"},{"location":"netbox-discovery/#infrastructure-documentation","text":"Keep your network documentation current by automatically updating NetBox with discovered changes to your network topology. Ideal for : Growing organizations, complex networks, automation initiatives","title":"Infrastructure Documentation"},{"location":"netbox-discovery/#key-features","text":"Automated Network Discovery : Schedule scans and identify devices and assets across your network using multiple discovery backends Flexible Configuration : Define custom discovery policies tailored to specific network environments through YAML configuration Enterprise Security : Integrate with external secret stores like HashiCorp Vault for secure credential handling Multiple Discovery Methods : Support for network discovery, device discovery, and worker backend capabilities Seamless Integration : Fully integrated with NetBox through Diode for data ingestion and reconciliation Production Ready : Docker-based deployment designed for enterprise scaling and management","title":"Key Features"},{"location":"netbox-discovery/#architecture-overview","text":"NetBox Discovery leverages the orb-agent, a containerized Go application that uses network protocols (ICMP, TCP, UDP, SSH) to discover devices and other network assets. The agent is configured through YAML files that define: Configuration Sources : Local files or Git repositories for policy management Secrets Management : Integration with external secret stores for credential security Discovery Policies : Customizable rules for network scanning and device identification Backend Selection : Choice of discovery methods based on network requirements Discovered data is sent to Diode for ingestion into NetBox, where it can be matched and reconciled to identify drift and deviations. The NetBox database is updated where relevant, ensuring data accuracy and reducing manual entry.","title":"Architecture Overview"},{"location":"netbox-discovery/#support-and-resources","text":"Getting Started : For complete setup instructions, see the NetBox Discovery Getting Started Guide Diode Documentation : For advanced Diode configuration and SDK usage, see the Diode documentation GitHub Repository : Find the orb-agent source code here Community Support : Connect with the community on Slack in the #netbox channel By leveraging NetBox Discovery , organizations can enhance their network visibility, streamline IT operations, and maintain an accurate source of truth for their network infrastructure.","title":"Support and Resources"},{"location":"netbox-discovery/getting-started/","tags":["community","cloud","enterprise","netbox","discovery","getting-started","installation","configuration"],"text":"Get Started with NetBox Discovery This guide will help you set up and start using NetBox Discovery to ingest network data into NetBox. The setup process varies depending on your NetBox deployment type. Choose Your Deployment Type NetBox Cloud If you're using NetBox Cloud , NetBox Discovery is managed for you: - \u2705 Diode server is managed by NetBox Labs - \u2705 Plugin enabled by Customer Support upon request - \ud83d\udd27 You configure : Client credentials and discovery agents NetBox Enterprise If you're using NetBox Enterprise , NetBox Discovery comes pre-configured: - \u2705 Diode server is built-in to your Enterprise deployment - \u2705 Plugin enabled by default if you have the Discovery entitlement - \ud83d\udd27 You configure : Client credentials and discovery agents NetBox Community If you're using NetBox Community , you'll need to set up the complete infrastructure: - \ud83d\udd27 You deploy : Diode server, plugin installation, and discovery agents - \ud83d\udcd6 Full setup guide : Community Setup Instructions NetBox Cloud Setup Prerequisites Active NetBox Cloud subscription with Discovery entitlement Docker installed on agent host systems Network connectivity from agent hosts to your NetBox Cloud instance Step 1: Enable NetBox Discovery Contact Customer Support to enable NetBox Discovery for your NetBox Cloud instance. Once enabled, you'll see the Diode section in your NetBox navigation menu. Step 2: Generate Client Credentials Log into your NetBox Cloud instance Navigate to Diode \u2192 Client Credentials Click + Add a Credential Enter a descriptive name (e.g., \"Production Discovery Agent\") Click Create Important : Copy and securely store the Client ID and Client Secret Step 3: Deploy Discovery Agents Deploy agents on your network infrastructure to discover devices: # Export your credentials export DIODE_CLIENT_ID = \"your-client-id\" export DIODE_CLIENT_SECRET = \"your-client-secret\" # Create agent configuration cat > agent.yaml << EOF orb: config_manager: active: local backends: network_discovery: common: diode: target: https://your-instance.netboxcloud.com/diode client_id: ${DIODE_CLIENT_ID} client_secret: ${DIODE_CLIENT_SECRET} agent_name: cloud_agent_01 policies: network_discovery: network_scan: config: schedule: \"0 */4 * * *\" # Every 4 hours timeout: 5 scope: targets: - \"192.168.1.0/24\" - \"10.0.0.0/16\" EOF # Run the discovery agent docker run --net = host \\ -v $( pwd ) :/opt/orb/ \\ -e DIODE_CLIENT_ID \\ -e DIODE_CLIENT_SECRET \\ netboxlabs/orb-agent:latest run -c /opt/orb/agent.yaml NetBox Enterprise Setup Prerequisites NetBox Enterprise deployment with Discovery entitlement Docker installed on agent host systems Network connectivity from agent hosts to your NetBox Enterprise instance Step 1: Verify Plugin Status The Diode plugin is enabled by default in NetBox Enterprise if you have the Discovery entitlement. Verify by checking for the Diode section in your NetBox navigation menu. Step 2: Generate Client Credentials Log into your NetBox Enterprise instance Navigate to Diode \u2192 Client Credentials Click + Add a Credential Enter a descriptive name (e.g., \"Datacenter East Agent\") Click Create Important : Copy and securely store the Client ID and Client Secret Step 3: Deploy Discovery Agents Deploy agents across your network infrastructure: # Export your credentials export DIODE_CLIENT_ID = \"your-client-id\" export DIODE_CLIENT_SECRET = \"your-client-secret\" # Create agent configuration cat > agent.yaml << EOF orb: config_manager: active: local backends: network_discovery: device_discovery: common: diode: target: https://your-instance.netboxcloud.com/diode client_id: ${DIODE_CLIENT_ID} client_secret: ${DIODE_CLIENT_SECRET} agent_name: enterprise_agent_01 policies: network_discovery: headquarters: config: schedule: \"0 */2 * * *\" # Every 2 hours timeout: 5 scope: targets: - \"192.168.0.0/16\" - \"10.0.0.0/8\" device_discovery: cisco_devices: config: schedule: \"0 */6 * * *\" # Every 6 hours defaults: site: Headquarters scope: - driver: ios hostname: 192.168.1.1 username: ${DEVICE_USERNAME} password: ${DEVICE_PASSWORD} EOF # Run the discovery agent docker run --net = host \\ -v $( pwd ) :/opt/orb/ \\ -e DIODE_CLIENT_ID \\ -e DIODE_CLIENT_SECRET \\ -e DEVICE_USERNAME \\ -e DEVICE_PASSWORD \\ netboxlabs/orb-agent:latest run -c /opt/orb/agent.yaml Configuration Examples NetBox Cloud - Basic Network Discovery orb : config_manager : active : local backends : network_discovery : common : diode : target : https://your-instance.netboxcloud.com/diode client_id : ${DIODE_CLIENT_ID} client_secret : ${DIODE_CLIENT_SECRET} agent_name : cloud_network_agent policies : network_discovery : office_networks : config : schedule : \"0 */4 * * *\" timeout : 5 scope : targets : - \"192.168.1.0/24\" - \"10.1.0.0/16\" NetBox Enterprise - Multi-Site Discovery orb : config_manager : active : local backends : network_discovery : device_discovery : common : diode : target : https://your-instance.netboxcloud.com/diode client_id : ${DIODE_CLIENT_ID} client_secret : ${DIODE_CLIENT_SECRET} agent_name : multi_site_agent policies : network_discovery : headquarters : config : schedule : \"0 */4 * * *\" timeout : 5 scope : targets : - \"192.168.0.0/16\" - \"10.0.0.0/8\" remote_offices : config : schedule : \"0 */12 * * *\" timeout : 10 scope : targets : - \"172.16.0.0/16\" - \"172.17.0.0/16\" device_discovery : core_switches : config : schedule : \"0 */8 * * *\" defaults : site : Headquarters scope : - driver : ios hostname : 192.168.1.10 username : ${SWITCH_USERNAME} password : ${SWITCH_PASSWORD} - driver : junos hostname : 192.168.1.11 username : ${SWITCH_USERNAME} password : ${SWITCH_PASSWORD} NetBox Enterprise - Device Discovery Focus orb : config_manager : active : local backends : device_discovery : common : diode : target : https://your-instance.netboxcloud.com/diode client_id : ${DIODE_CLIENT_ID} client_secret : ${DIODE_CLIENT_SECRET} agent_name : device_discovery_agent policies : device_discovery : cisco_infrastructure : config : schedule : \"0 */6 * * *\" defaults : site : Data Center 1 tenant : Infrastructure scope : - driver : ios hostname : core-sw-01.company.local username : ${CISCO_USERNAME} password : ${CISCO_PASSWORD} - driver : ios hostname : core-sw-02.company.local username : ${CISCO_USERNAME} password : ${CISCO_PASSWORD} juniper_edge : config : schedule : \"0 */12 * * *\" defaults : site : Edge Locations scope : - driver : junos hostname : edge-01.company.local username : ${JUNIPER_USERNAME} password : ${JUNIPER_PASSWORD} Community Setup Instructions If you're using NetBox Community, you'll need to set up the complete NetBox Discovery infrastructure: Prerequisites NetBox Community version 4.2.3 or later Docker version 27.0.3 or newer bash 4.x or newer jq Sufficient permissions to run Docker commands Step 1: Deploy Diode Server Create a working directory and deploy the Diode server: # Create working directory mkdir -p /opt/diode cd /opt/diode # Download quickstart script curl -sSfLo quickstart.sh https://raw.githubusercontent.com/netboxlabs/diode/release/diode-server/docker/scripts/quickstart.sh chmod +x quickstart.sh # Run setup script ./quickstart.sh https://your-netbox-server.com # Start Diode server docker compose up -d # Verify services are running docker compose ps Step 2: Install Diode Plugin Install and configure the Diode plugin in your NetBox Community instance: # Activate NetBox virtual environment cd /opt/netbox source venv/bin/activate # Install plugin pip install netboxlabs-diode-netbox-plugin # Add to configuration.py cat >> /opt/netbox/netbox/netbox/configuration.py << EOF # Diode Plugin Configuration PLUGINS.append(\"netbox_diode_plugin\") PLUGINS_CONFIG[\"netbox_diode_plugin\"] = { \"diode_target_override\": \"grpc://localhost:8080/diode\", \"diode_username\": \"diode\", \"netbox_to_diode_client_secret\": \"your-secret-from-quickstart\" } EOF # Apply migrations cd /opt/netbox/netbox ./manage.py migrate netbox_diode_plugin # Restart NetBox sudo systemctl restart netbox netbox-rq Step 3: Generate Client Credentials and Deploy Agents Follow the same credential generation and agent deployment steps as Enterprise, but use your self-hosted Diode server URL: orb : config_manager : active : local backends : network_discovery : common : diode : target : grpc://your-diode-server.com:8080/diode client_id : ${DIODE_CLIENT_ID} client_secret : ${DIODE_CLIENT_SECRET} agent_name : community_agent policies : network_discovery : home_network : config : schedule : \"0 */6 * * *\" timeout : 5 scope : targets : - \"192.168.1.0/24\" Troubleshooting Cloud & Enterprise Common Issues Authentication Issues Verify client credentials are correct Check that Discovery entitlement is active Ensure credentials haven't expired Agent Connection Issues Verify network connectivity to your NetBox instance Check firewall rules for HTTPS traffic Validate the target URL in agent configuration Discovery Issues Verify agent has network access to target devices Check device credentials and permissions Review agent logs for specific error messages Cloud-Specific Issues Plugin Not Available Contact Customer Support to enable Discovery Verify your subscription includes Discovery entitlement Target URL Issues Use format: https://your-instance.netboxcloud.com/diode Ensure no trailing slashes in URL Enterprise-Specific Issues Plugin Not Enabled Verify Discovery entitlement in your license Check with your NetBox Enterprise administrator Review NetBox Enterprise logs for plugin errors Internal Network Access Ensure agents can reach NetBox Enterprise instance Check internal DNS resolution Verify SSL certificates for internal domains Agent Troubleshooting Enable Debug Logging: docker run --net = host \\ -v $( pwd ) :/opt/orb/ \\ -e DIODE_CLIENT_ID \\ -e DIODE_CLIENT_SECRET \\ -e LOG_LEVEL = DEBUG \\ netboxlabs/orb-agent:latest run -c /opt/orb/agent.yaml Common Log Messages: - \"Connection established\" - Agent connected successfully - \"Discovery completed\" - Discovery cycle finished - \"Authentication failed\" - Check client credentials - \"Connection refused\" - Check target URL and network connectivity Best Practices Security Store credentials as environment variables, never in configuration files Use descriptive agent names for easier troubleshooting Rotate client credentials regularly Implement network segmentation for discovery traffic Performance Adjust discovery schedules based on network size and change frequency Use appropriate timeout values for your network conditions Deploy multiple agents for large networks Monitor agent resource usage Operations Implement monitoring for agent health and connectivity Set up alerting for discovery failures Maintain documentation of agent deployments Regular review of discovered data accuracy Getting Help Support Resources NetBox Cloud : Contact Customer Support through your cloud portal NetBox Enterprise : Contact your NetBox Labs support representative Community : Join NetDev Community Slack #netbox channel Documentation NetBox Discovery Agent Documentation Diode Documentation NetBox Enterprise Documentation Troubleshooting GitHub Issues - Report bugs and feature requests Agent logs: docker logs <container-id> NetBox Diode plugin logs: Check the Ingestion Logs view in NetBox Success! You now have NetBox Discovery configured and running. Your agents will automatically discover and update network infrastructure data in NetBox based on your configured schedules.","title":"Get Started"},{"location":"netbox-discovery/getting-started/#get-started-with-netbox-discovery","text":"This guide will help you set up and start using NetBox Discovery to ingest network data into NetBox. The setup process varies depending on your NetBox deployment type.","title":"Get Started with NetBox Discovery"},{"location":"netbox-discovery/getting-started/#choose-your-deployment-type","text":"","title":"Choose Your Deployment Type"},{"location":"netbox-discovery/getting-started/#netbox-cloud","text":"If you're using NetBox Cloud , NetBox Discovery is managed for you: - \u2705 Diode server is managed by NetBox Labs - \u2705 Plugin enabled by Customer Support upon request - \ud83d\udd27 You configure : Client credentials and discovery agents","title":"NetBox Cloud"},{"location":"netbox-discovery/getting-started/#netbox-enterprise","text":"If you're using NetBox Enterprise , NetBox Discovery comes pre-configured: - \u2705 Diode server is built-in to your Enterprise deployment - \u2705 Plugin enabled by default if you have the Discovery entitlement - \ud83d\udd27 You configure : Client credentials and discovery agents","title":"NetBox Enterprise"},{"location":"netbox-discovery/getting-started/#netbox-community","text":"If you're using NetBox Community , you'll need to set up the complete infrastructure: - \ud83d\udd27 You deploy : Diode server, plugin installation, and discovery agents - \ud83d\udcd6 Full setup guide : Community Setup Instructions","title":"NetBox Community"},{"location":"netbox-discovery/getting-started/#netbox-cloud-setup","text":"","title":"NetBox Cloud Setup"},{"location":"netbox-discovery/getting-started/#prerequisites","text":"Active NetBox Cloud subscription with Discovery entitlement Docker installed on agent host systems Network connectivity from agent hosts to your NetBox Cloud instance","title":"Prerequisites"},{"location":"netbox-discovery/getting-started/#step-1-enable-netbox-discovery","text":"Contact Customer Support to enable NetBox Discovery for your NetBox Cloud instance. Once enabled, you'll see the Diode section in your NetBox navigation menu.","title":"Step 1: Enable NetBox Discovery"},{"location":"netbox-discovery/getting-started/#step-2-generate-client-credentials","text":"Log into your NetBox Cloud instance Navigate to Diode \u2192 Client Credentials Click + Add a Credential Enter a descriptive name (e.g., \"Production Discovery Agent\") Click Create Important : Copy and securely store the Client ID and Client Secret","title":"Step 2: Generate Client Credentials"},{"location":"netbox-discovery/getting-started/#step-3-deploy-discovery-agents","text":"Deploy agents on your network infrastructure to discover devices: # Export your credentials export DIODE_CLIENT_ID = \"your-client-id\" export DIODE_CLIENT_SECRET = \"your-client-secret\" # Create agent configuration cat > agent.yaml << EOF orb: config_manager: active: local backends: network_discovery: common: diode: target: https://your-instance.netboxcloud.com/diode client_id: ${DIODE_CLIENT_ID} client_secret: ${DIODE_CLIENT_SECRET} agent_name: cloud_agent_01 policies: network_discovery: network_scan: config: schedule: \"0 */4 * * *\" # Every 4 hours timeout: 5 scope: targets: - \"192.168.1.0/24\" - \"10.0.0.0/16\" EOF # Run the discovery agent docker run --net = host \\ -v $( pwd ) :/opt/orb/ \\ -e DIODE_CLIENT_ID \\ -e DIODE_CLIENT_SECRET \\ netboxlabs/orb-agent:latest run -c /opt/orb/agent.yaml","title":"Step 3: Deploy Discovery Agents"},{"location":"netbox-discovery/getting-started/#netbox-enterprise-setup","text":"","title":"NetBox Enterprise Setup"},{"location":"netbox-discovery/getting-started/#prerequisites_1","text":"NetBox Enterprise deployment with Discovery entitlement Docker installed on agent host systems Network connectivity from agent hosts to your NetBox Enterprise instance","title":"Prerequisites"},{"location":"netbox-discovery/getting-started/#step-1-verify-plugin-status","text":"The Diode plugin is enabled by default in NetBox Enterprise if you have the Discovery entitlement. Verify by checking for the Diode section in your NetBox navigation menu.","title":"Step 1: Verify Plugin Status"},{"location":"netbox-discovery/getting-started/#step-2-generate-client-credentials_1","text":"Log into your NetBox Enterprise instance Navigate to Diode \u2192 Client Credentials Click + Add a Credential Enter a descriptive name (e.g., \"Datacenter East Agent\") Click Create Important : Copy and securely store the Client ID and Client Secret","title":"Step 2: Generate Client Credentials"},{"location":"netbox-discovery/getting-started/#step-3-deploy-discovery-agents_1","text":"Deploy agents across your network infrastructure: # Export your credentials export DIODE_CLIENT_ID = \"your-client-id\" export DIODE_CLIENT_SECRET = \"your-client-secret\" # Create agent configuration cat > agent.yaml << EOF orb: config_manager: active: local backends: network_discovery: device_discovery: common: diode: target: https://your-instance.netboxcloud.com/diode client_id: ${DIODE_CLIENT_ID} client_secret: ${DIODE_CLIENT_SECRET} agent_name: enterprise_agent_01 policies: network_discovery: headquarters: config: schedule: \"0 */2 * * *\" # Every 2 hours timeout: 5 scope: targets: - \"192.168.0.0/16\" - \"10.0.0.0/8\" device_discovery: cisco_devices: config: schedule: \"0 */6 * * *\" # Every 6 hours defaults: site: Headquarters scope: - driver: ios hostname: 192.168.1.1 username: ${DEVICE_USERNAME} password: ${DEVICE_PASSWORD} EOF # Run the discovery agent docker run --net = host \\ -v $( pwd ) :/opt/orb/ \\ -e DIODE_CLIENT_ID \\ -e DIODE_CLIENT_SECRET \\ -e DEVICE_USERNAME \\ -e DEVICE_PASSWORD \\ netboxlabs/orb-agent:latest run -c /opt/orb/agent.yaml","title":"Step 3: Deploy Discovery Agents"},{"location":"netbox-discovery/getting-started/#configuration-examples","text":"","title":"Configuration Examples"},{"location":"netbox-discovery/getting-started/#netbox-cloud-basic-network-discovery","text":"orb : config_manager : active : local backends : network_discovery : common : diode : target : https://your-instance.netboxcloud.com/diode client_id : ${DIODE_CLIENT_ID} client_secret : ${DIODE_CLIENT_SECRET} agent_name : cloud_network_agent policies : network_discovery : office_networks : config : schedule : \"0 */4 * * *\" timeout : 5 scope : targets : - \"192.168.1.0/24\" - \"10.1.0.0/16\"","title":"NetBox Cloud - Basic Network Discovery"},{"location":"netbox-discovery/getting-started/#netbox-enterprise-multi-site-discovery","text":"orb : config_manager : active : local backends : network_discovery : device_discovery : common : diode : target : https://your-instance.netboxcloud.com/diode client_id : ${DIODE_CLIENT_ID} client_secret : ${DIODE_CLIENT_SECRET} agent_name : multi_site_agent policies : network_discovery : headquarters : config : schedule : \"0 */4 * * *\" timeout : 5 scope : targets : - \"192.168.0.0/16\" - \"10.0.0.0/8\" remote_offices : config : schedule : \"0 */12 * * *\" timeout : 10 scope : targets : - \"172.16.0.0/16\" - \"172.17.0.0/16\" device_discovery : core_switches : config : schedule : \"0 */8 * * *\" defaults : site : Headquarters scope : - driver : ios hostname : 192.168.1.10 username : ${SWITCH_USERNAME} password : ${SWITCH_PASSWORD} - driver : junos hostname : 192.168.1.11 username : ${SWITCH_USERNAME} password : ${SWITCH_PASSWORD}","title":"NetBox Enterprise - Multi-Site Discovery"},{"location":"netbox-discovery/getting-started/#netbox-enterprise-device-discovery-focus","text":"orb : config_manager : active : local backends : device_discovery : common : diode : target : https://your-instance.netboxcloud.com/diode client_id : ${DIODE_CLIENT_ID} client_secret : ${DIODE_CLIENT_SECRET} agent_name : device_discovery_agent policies : device_discovery : cisco_infrastructure : config : schedule : \"0 */6 * * *\" defaults : site : Data Center 1 tenant : Infrastructure scope : - driver : ios hostname : core-sw-01.company.local username : ${CISCO_USERNAME} password : ${CISCO_PASSWORD} - driver : ios hostname : core-sw-02.company.local username : ${CISCO_USERNAME} password : ${CISCO_PASSWORD} juniper_edge : config : schedule : \"0 */12 * * *\" defaults : site : Edge Locations scope : - driver : junos hostname : edge-01.company.local username : ${JUNIPER_USERNAME} password : ${JUNIPER_PASSWORD}","title":"NetBox Enterprise - Device Discovery Focus"},{"location":"netbox-discovery/getting-started/#community-setup-instructions","text":"If you're using NetBox Community, you'll need to set up the complete NetBox Discovery infrastructure:","title":"Community Setup Instructions"},{"location":"netbox-discovery/getting-started/#prerequisites_2","text":"NetBox Community version 4.2.3 or later Docker version 27.0.3 or newer bash 4.x or newer jq Sufficient permissions to run Docker commands","title":"Prerequisites"},{"location":"netbox-discovery/getting-started/#step-1-deploy-diode-server","text":"Create a working directory and deploy the Diode server: # Create working directory mkdir -p /opt/diode cd /opt/diode # Download quickstart script curl -sSfLo quickstart.sh https://raw.githubusercontent.com/netboxlabs/diode/release/diode-server/docker/scripts/quickstart.sh chmod +x quickstart.sh # Run setup script ./quickstart.sh https://your-netbox-server.com # Start Diode server docker compose up -d # Verify services are running docker compose ps","title":"Step 1: Deploy Diode Server"},{"location":"netbox-discovery/getting-started/#step-2-install-diode-plugin","text":"Install and configure the Diode plugin in your NetBox Community instance: # Activate NetBox virtual environment cd /opt/netbox source venv/bin/activate # Install plugin pip install netboxlabs-diode-netbox-plugin # Add to configuration.py cat >> /opt/netbox/netbox/netbox/configuration.py << EOF # Diode Plugin Configuration PLUGINS.append(\"netbox_diode_plugin\") PLUGINS_CONFIG[\"netbox_diode_plugin\"] = { \"diode_target_override\": \"grpc://localhost:8080/diode\", \"diode_username\": \"diode\", \"netbox_to_diode_client_secret\": \"your-secret-from-quickstart\" } EOF # Apply migrations cd /opt/netbox/netbox ./manage.py migrate netbox_diode_plugin # Restart NetBox sudo systemctl restart netbox netbox-rq","title":"Step 2: Install Diode Plugin"},{"location":"netbox-discovery/getting-started/#step-3-generate-client-credentials-and-deploy-agents","text":"Follow the same credential generation and agent deployment steps as Enterprise, but use your self-hosted Diode server URL: orb : config_manager : active : local backends : network_discovery : common : diode : target : grpc://your-diode-server.com:8080/diode client_id : ${DIODE_CLIENT_ID} client_secret : ${DIODE_CLIENT_SECRET} agent_name : community_agent policies : network_discovery : home_network : config : schedule : \"0 */6 * * *\" timeout : 5 scope : targets : - \"192.168.1.0/24\"","title":"Step 3: Generate Client Credentials and Deploy Agents"},{"location":"netbox-discovery/getting-started/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"netbox-discovery/getting-started/#cloud-enterprise-common-issues","text":"Authentication Issues Verify client credentials are correct Check that Discovery entitlement is active Ensure credentials haven't expired Agent Connection Issues Verify network connectivity to your NetBox instance Check firewall rules for HTTPS traffic Validate the target URL in agent configuration Discovery Issues Verify agent has network access to target devices Check device credentials and permissions Review agent logs for specific error messages","title":"Cloud &amp; Enterprise Common Issues"},{"location":"netbox-discovery/getting-started/#cloud-specific-issues","text":"Plugin Not Available Contact Customer Support to enable Discovery Verify your subscription includes Discovery entitlement Target URL Issues Use format: https://your-instance.netboxcloud.com/diode Ensure no trailing slashes in URL","title":"Cloud-Specific Issues"},{"location":"netbox-discovery/getting-started/#enterprise-specific-issues","text":"Plugin Not Enabled Verify Discovery entitlement in your license Check with your NetBox Enterprise administrator Review NetBox Enterprise logs for plugin errors Internal Network Access Ensure agents can reach NetBox Enterprise instance Check internal DNS resolution Verify SSL certificates for internal domains","title":"Enterprise-Specific Issues"},{"location":"netbox-discovery/getting-started/#agent-troubleshooting","text":"Enable Debug Logging: docker run --net = host \\ -v $( pwd ) :/opt/orb/ \\ -e DIODE_CLIENT_ID \\ -e DIODE_CLIENT_SECRET \\ -e LOG_LEVEL = DEBUG \\ netboxlabs/orb-agent:latest run -c /opt/orb/agent.yaml Common Log Messages: - \"Connection established\" - Agent connected successfully - \"Discovery completed\" - Discovery cycle finished - \"Authentication failed\" - Check client credentials - \"Connection refused\" - Check target URL and network connectivity","title":"Agent Troubleshooting"},{"location":"netbox-discovery/getting-started/#best-practices","text":"","title":"Best Practices"},{"location":"netbox-discovery/getting-started/#security","text":"Store credentials as environment variables, never in configuration files Use descriptive agent names for easier troubleshooting Rotate client credentials regularly Implement network segmentation for discovery traffic","title":"Security"},{"location":"netbox-discovery/getting-started/#performance","text":"Adjust discovery schedules based on network size and change frequency Use appropriate timeout values for your network conditions Deploy multiple agents for large networks Monitor agent resource usage","title":"Performance"},{"location":"netbox-discovery/getting-started/#operations","text":"Implement monitoring for agent health and connectivity Set up alerting for discovery failures Maintain documentation of agent deployments Regular review of discovered data accuracy","title":"Operations"},{"location":"netbox-discovery/getting-started/#getting-help","text":"","title":"Getting Help"},{"location":"netbox-discovery/getting-started/#support-resources","text":"NetBox Cloud : Contact Customer Support through your cloud portal NetBox Enterprise : Contact your NetBox Labs support representative Community : Join NetDev Community Slack #netbox channel","title":"Support Resources"},{"location":"netbox-discovery/getting-started/#documentation","text":"NetBox Discovery Agent Documentation Diode Documentation NetBox Enterprise Documentation","title":"Documentation"},{"location":"netbox-discovery/getting-started/#troubleshooting_1","text":"GitHub Issues - Report bugs and feature requests Agent logs: docker logs <container-id> NetBox Diode plugin logs: Check the Ingestion Logs view in NetBox Success! You now have NetBox Discovery configured and running. Your agents will automatically discover and update network infrastructure data in NetBox based on your configured schedules.","title":"Troubleshooting"},{"location":"netbox-enterprise/nbe-azure-group-mapping/","text":"NetBox Enterprise Entra ID Group Mapping Place the following in configuration overrides python section Basic SSO REMOTE_AUTH_BACKEND = 'social_core.backends.azuread.AzureADOAuth2' SOCIAL_AUTH_AZUREAD_OAUTH2_KEY = '{APPLICATION_ID}' SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET = '{SECRET_VALUE}' Group Mappings SOCIAL_AUTH_AZUREAD_OAUTH2_RESOURCE = 'https://graph.microsoft.com/' SOCIAL_AUTH_PIPELINE = ( 'social_core.pipeline.social_auth.social_details' , 'social_core.pipeline.social_auth.social_uid' , 'social_core.pipeline.social_auth.social_user' , 'social_core.pipeline.user.get_username' , 'social_core.pipeline.social_auth.associate_by_email' , 'social_core.pipeline.user.create_user' , 'social_core.pipeline.social_auth.associate_user' , 'netbox.authentication.user_default_groups_handler' , 'social_core.pipeline.social_auth.load_extra_data' , 'social_core.pipeline.user.user_details' , 'nbc_auth_extensions.azure_authentication.azuread_map_groups' , ) # Define special user types using groups. Exercise great caution when assigning superuser status. SOCIAL_AUTH_PIPELINE_CONFIG = { 'AZUREAD_USER_FLAGS_BY_GROUP' : { \"is_staff\" : [ '{ENTRA_GROUP_ID1}' , '{ENTRA_GROUP_ID2}' ] , \"is_superuser\" : [ '{ENTRA_GROUP_ID1}' , '{ENTRA_GROUP_ID2}' ] } , 'AZUREAD_GROUP_MAP' : { '{ENTRA_GROUP_ID1}' : '{NETBOX_GROUP1}' , '{ENTRA_GROUP_ID2}' : '{NETBOX_GROUP2}' , } }","title":"Entra ID Group Mapping"},{"location":"netbox-enterprise/nbe-azure-group-mapping/#netbox-enterprise-entra-id-group-mapping","text":"Place the following in configuration overrides python section","title":"NetBox Enterprise Entra ID Group Mapping"},{"location":"netbox-enterprise/nbe-azure-group-mapping/#basic-sso","text":"REMOTE_AUTH_BACKEND = 'social_core.backends.azuread.AzureADOAuth2' SOCIAL_AUTH_AZUREAD_OAUTH2_KEY = '{APPLICATION_ID}' SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET = '{SECRET_VALUE}'","title":"Basic SSO"},{"location":"netbox-enterprise/nbe-azure-group-mapping/#group-mappings","text":"SOCIAL_AUTH_AZUREAD_OAUTH2_RESOURCE = 'https://graph.microsoft.com/' SOCIAL_AUTH_PIPELINE = ( 'social_core.pipeline.social_auth.social_details' , 'social_core.pipeline.social_auth.social_uid' , 'social_core.pipeline.social_auth.social_user' , 'social_core.pipeline.user.get_username' , 'social_core.pipeline.social_auth.associate_by_email' , 'social_core.pipeline.user.create_user' , 'social_core.pipeline.social_auth.associate_user' , 'netbox.authentication.user_default_groups_handler' , 'social_core.pipeline.social_auth.load_extra_data' , 'social_core.pipeline.user.user_details' , 'nbc_auth_extensions.azure_authentication.azuread_map_groups' , ) # Define special user types using groups. Exercise great caution when assigning superuser status. SOCIAL_AUTH_PIPELINE_CONFIG = { 'AZUREAD_USER_FLAGS_BY_GROUP' : { \"is_staff\" : [ '{ENTRA_GROUP_ID1}' , '{ENTRA_GROUP_ID2}' ] , \"is_superuser\" : [ '{ENTRA_GROUP_ID1}' , '{ENTRA_GROUP_ID2}' ] } , 'AZUREAD_GROUP_MAP' : { '{ENTRA_GROUP_ID1}' : '{NETBOX_GROUP1}' , '{ENTRA_GROUP_ID2}' : '{NETBOX_GROUP2}' , } }","title":"Group Mappings"},{"location":"netbox-enterprise/nbe-azure-sso/","text":"Microsoft Entra ID Setup (formerly Azure Active Directory) This guide explains how to configure single sign-on (SSO) support for NetBox Enterprise using Microsoft Entra ID (formerly Azure Active Directory) as an authentication backend. Entra ID Configuration Create a test user (optional) Create a new Entra ID user to be used for testing. You can skip this step if you already have a suitable account created. Create an app registration Under the Microsoft Entra ID dashboard, navigate to Add > App registration . Enter a name for the registration (e.g. \"NetBox Enterprise\") and ensure that the \"single tenant\" option is selected. Under \"Redirect URI\", select \"Web\" for the platform and enter the path to your NetBox Enterprise installation, ending with /oauth/complete/azuread-oauth2/. Eg. https://{your-domain}.com/oauth/complete/azuread-oauth2/ Once finished, make note of the application (client) ID; this will be used when configuring NetBox Enterprise instance. Multitenant authentication NetBox also supports multitenant authentication via Entra ID, however it requires a different backend and an additional configuration parameter. Please see the python-social-auth documentation for details concerning multitenant authentication. Create a secret When viewing the newly-created app registration, click the \"Add a certificate or secret\" link under \"Client credentials\". Under the \"Client secrets\" tab, click the \"New client secret\" button. You can optionally specify a description and select a lifetime for the secret. Once finished, make note of the secret value (not the secret ID); this will be used when configuring your NetBox Enterprise instance. NetBox Enterprise Configuration After completing the app registration, navigate to the Config tab in the NetBox Enterprise admin console, scroll down to Advanced Settings and tick the Show Advanced Settings check box. Then, in the the NetBox Python Configuration Overrides field paste the following value from the previous steps: REMOTE_AUTH_BACKEND = 'social_core.backends.azuread.AzureADOAuth2' SOCIAL_AUTH_AZUREAD_OAUTH2_KEY = 'APPLICATION_ID' SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET = 'SECRET_VALUE' Once added, scroll down to the bottom of the page and click Save config . Follow the prompt to Go to updated version and click the Deploy button to deploy the updated version of your app with the configuration changes. Testing Open your NetBox Instance once it is back up in the Ready state. Log out of NetBox instance if already authenticated, and click the \"Log In\" button at top right. You should see the normal login form as well as an option to authenticate using Entra ID. Click that link. You should be redirected to Microsoft's authentication portal. Enter the username/email and password of your account to continue. You may also be prompted to grant this application access to your account. If successful, you will be redirected back to the NetBox Enterprise UI, and will be logged in as the Entra ID user. You can verify this by navigating to your profile (using the button at top right). This user account has been replicated locally to NetBox Enterprose, and can now be assigned groups and permissions within the NetBox Enterprise admin UI. Troubleshooting Redirect URI does not Match Entra ID requires that the authenticating client request a redirect URI that matches what you've configured for the app in step two. This URI must begin with https:// Not Logged in After Authenticating If you are redirected to the NetBox Enterprise UI after authenticating successfully, but are not logged in, double-check the configured backend and app registration. The instructions in this guide pertain only to the azuread.AzureADOAuth2 backend using a single-tenant app registration.","title":"Microsoft Entra ID SSO"},{"location":"netbox-enterprise/nbe-azure-sso/#microsoft-entra-id-setup-formerly-azure-active-directory","text":"This guide explains how to configure single sign-on (SSO) support for NetBox Enterprise using Microsoft Entra ID (formerly Azure Active Directory) as an authentication backend.","title":"Microsoft Entra ID Setup (formerly Azure Active Directory)"},{"location":"netbox-enterprise/nbe-azure-sso/#entra-id-configuration","text":"Create a test user (optional) Create a new Entra ID user to be used for testing. You can skip this step if you already have a suitable account created. Create an app registration Under the Microsoft Entra ID dashboard, navigate to Add > App registration . Enter a name for the registration (e.g. \"NetBox Enterprise\") and ensure that the \"single tenant\" option is selected. Under \"Redirect URI\", select \"Web\" for the platform and enter the path to your NetBox Enterprise installation, ending with /oauth/complete/azuread-oauth2/. Eg. https://{your-domain}.com/oauth/complete/azuread-oauth2/ Once finished, make note of the application (client) ID; this will be used when configuring NetBox Enterprise instance. Multitenant authentication NetBox also supports multitenant authentication via Entra ID, however it requires a different backend and an additional configuration parameter. Please see the python-social-auth documentation for details concerning multitenant authentication. Create a secret When viewing the newly-created app registration, click the \"Add a certificate or secret\" link under \"Client credentials\". Under the \"Client secrets\" tab, click the \"New client secret\" button. You can optionally specify a description and select a lifetime for the secret. Once finished, make note of the secret value (not the secret ID); this will be used when configuring your NetBox Enterprise instance.","title":"Entra ID Configuration"},{"location":"netbox-enterprise/nbe-azure-sso/#netbox-enterprise-configuration","text":"After completing the app registration, navigate to the Config tab in the NetBox Enterprise admin console, scroll down to Advanced Settings and tick the Show Advanced Settings check box. Then, in the the NetBox Python Configuration Overrides field paste the following value from the previous steps: REMOTE_AUTH_BACKEND = 'social_core.backends.azuread.AzureADOAuth2' SOCIAL_AUTH_AZUREAD_OAUTH2_KEY = 'APPLICATION_ID' SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET = 'SECRET_VALUE' Once added, scroll down to the bottom of the page and click Save config . Follow the prompt to Go to updated version and click the Deploy button to deploy the updated version of your app with the configuration changes.","title":"NetBox Enterprise Configuration"},{"location":"netbox-enterprise/nbe-azure-sso/#testing","text":"Open your NetBox Instance once it is back up in the Ready state. Log out of NetBox instance if already authenticated, and click the \"Log In\" button at top right. You should see the normal login form as well as an option to authenticate using Entra ID. Click that link. You should be redirected to Microsoft's authentication portal. Enter the username/email and password of your account to continue. You may also be prompted to grant this application access to your account. If successful, you will be redirected back to the NetBox Enterprise UI, and will be logged in as the Entra ID user. You can verify this by navigating to your profile (using the button at top right). This user account has been replicated locally to NetBox Enterprose, and can now be assigned groups and permissions within the NetBox Enterprise admin UI.","title":"Testing"},{"location":"netbox-enterprise/nbe-azure-sso/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"netbox-enterprise/nbe-azure-sso/#redirect-uri-does-not-match","text":"Entra ID requires that the authenticating client request a redirect URI that matches what you've configured for the app in step two. This URI must begin with https://","title":"Redirect URI does not Match"},{"location":"netbox-enterprise/nbe-azure-sso/#not-logged-in-after-authenticating","text":"If you are redirected to the NetBox Enterprise UI after authenticating successfully, but are not logged in, double-check the configured backend and app registration. The instructions in this guide pertain only to the azuread.AzureADOAuth2 backend using a single-tenant app registration.","title":"Not Logged in After Authenticating"},{"location":"netbox-enterprise/nbe-backups/","text":"NetBox Enterprise Backups Much like the NetBox software itself, NetBox Enterprise uses 2 main datastores: PostgreSQL, and Redis. PostgreSQL is used for the primary model data in NetBox, including sites, facilities, racks, and so on. Redis is used for internal caching and the task queue. For each type of datastore you can choose to use a built-in deployment, or configure NetBox Enterprise to use an existing external resource already in your environment. External Databases Info If you are providing your own database(s) for use by NetBox Enterprise, it is expected that you have your own processes for high availability, backup, and restore. Using Disaster Recovery for Backups A disaster recovery backup will preserve the complete state of your NetBox Enterprise install, from allocated volumes to databases to custom configuration. This feature is included in NetBox Enterprise installs, and can be enabled by installing some extra dependencies to your cluster for KOTS installs. Backing Up the NetBox Enterprise Installation Navigate to the backup configuration by clicking the Backup settings link in the Disaster Recovery section of the admin console. Input your S3 bucket, credentials, endpoint, and region. Click Update storage settings -- it will spend a few moments validating that your settings work. Perform a backup by clicking the Backups tab, and then clicking Start backup . Restoring the NetBox Enterprise Installation Download the latest NetBox Enterprise installer following the same instructions you did for a new install, if you haven't already. Run: ./netbox-enterprise restore Enter the same S3 credentials you use for backups. Next, it will take a few minutes to bring up the node. When it's complete, you will be prompted to continue the restore: Enter Y to continue, and the restore will launch the cluster. (Optional) If you plan to have more than one node in the new cluster, you can go to the admin console and configure them when prompted. Enter continue to finish bringing the NetBox Enterprise application up. It will take a few more minutes to finish bringing the application up, and then you will see \"Application restored!\" NetBox Enterprise and the Admin Console should now be completely restored and available as normal. Manual Backup and Restore Besides disaster recovery, it is also a good idea to keep backups of your data in case you want to view, partially restore, or move your data to another system. NetBox Enterprise Namespace The default namespace is kotsadm . The instructions below default to kotsadm , but you can change the NETBOX_NAMESPACE variable to match your system. Backing Up Your Data Backing up NetBox Enterprise's data manually is reasonably simple, and Kubernetes makes it easy to access them from the command-line. Before You Back Up: Accessing Your Cluster Before you can back anything up, you must first make sure you can access the cluster on the command line. See the advanced tools documentation for details on connecting to your NetBox Enterprise cluster. Media, Scripts, and Reports Runtime files are stored in a volume accessible from the NetBox containers. To back them up, you can run this: NETBOX_NAMESPACE = \" $( kubectl get deployments \\ -A -l 'app.kubernetes.io/component=netbox' \\ -ojsonpath = '{.items[0].metadata.namespace}' ) \" && \\ NETBOX_MAIN_POD = \" $( kubectl get pod \\ -o name \\ -n \" ${ NETBOX_NAMESPACE } \" \\ -l 'app.kubernetes.io/component=netbox' \\ | head -n 1 \\ ) \" && \\ kubectl exec \" ${ NETBOX_MAIN_POD } \" \\ -n \" ${ NETBOX_NAMESPACE } \" \\ -c netbox \\ -- /bin/sh -c ' \\ cd /opt/netbox/netbox && \\ find media scripts reports static -type f > /tmp/files.txt && \\ tar -czf - \\ --owner=0 \\ --group=0 \\ -T /tmp/files.txt' > netbox-data.tar.gz Built-In PostgreSQL The built-in PostgreSQL is deployed using the CrunchyData Postgres Operator. Since the PostgreSQL CLI tools are already available inside the cluster, all we need to do to dump the database is to call into the correct container and run a pg_dump there. To perform a database dump, run these commands: NETBOX_NAMESPACE = \" $( kubectl get deployments \\ -A -l 'app.kubernetes.io/component=netbox' \\ -ojsonpath = '{.items[0].metadata.namespace}' ) \" && \\ NETBOX_DATABASE_FILE = \"netbox-enterprise.pgsql\" && \\ POSTGRESQL_MAIN_POD = \" $( kubectl get pod \\ -o name \\ -n \" ${ NETBOX_NAMESPACE } \" \\ -l 'postgres-operator.crunchydata.com/role=master' \\ | head -n 1 \\ ) \" && \\ EXCLUDE_DATABASES = \" $( kubectl exec \" ${ POSTGRESQL_MAIN_POD } \" \\ -n \" ${ NETBOX_NAMESPACE } \" \\ -c database \\ -- \\ psql -t -c \"SELECT CONCAT('--exclude-database=', datname) \\ FROM pg_database \\ WHERE datname <> ALL ('{netbox,diode,hydra}')\" \\ ) \" && \\ kubectl exec \" ${ POSTGRESQL_MAIN_POD } \" \\ -n \" ${ NETBOX_NAMESPACE } \" \\ -c database \\ -- \\ pg_dumpall \\ $EXCLUDE_DATABASES \\ > \" ${ NETBOX_DATABASE_FILE } \" This will create a netbox-enterprise.pgsql file in your local directory. Save it somewhere safe for future restores. For more details on backing up NetBox databases, see the official NetBox documentation . Diode and Hydra Secrets (NetBox 1.10 and Up) To ensure that Diode OAuth login information is not lost, you will also need to save the Diode and Hydra secrets from the cluster. Run this set of commands: NETBOX_NAMESPACE = \" $( kubectl get deployments \\ -A -l 'app.kubernetes.io/component=netbox' \\ -ojsonpath = '{.items[0].metadata.namespace}' ) \" && \\ ( kubectl get secrets \\ --namespace \" ${ NETBOX_NAMESPACE } \" \\ --no-headers \\ --output name \\ | grep secret/diode \\ | while read -r SECRET ; do \\ echo \"---\" && \\ kubectl get \\ \" ${ SECRET } \" \\ --namespace \" ${ NETBOX_NAMESPACE } \" \\ -o yaml \\ | grep -v -E '^ (creationTimestamp|resourceVersion|uid):' ; \\ done \\ ) > netbox-enterprise-diode-secrets.yaml Save it alongside your netbox-enterprise.pgsql for future restores. Restoring Your Backups Restoring is almost as simple as backing up. You just need to put NetBox Enterprise into restore mode first. Enabling and Disabling Restore Mode Put NetBox Enterprise into \"Restore Mode\" by going to the Config tab and checking the Enable Restore Mode checkbox. Click the \"Save config\" button at the bottom of the form, and then when the admin console prompts you, click \"go to updated version\". Confirm that the New version available at the top denotes it's a config change, and if so click the \"Deploy\" button. This will shut down NetBox but leave the other NetBox Enterprise infrastructure up, so you can safely restore. When you are done restoring your data, just follow the same steps, unchecking Enable Restore Mode and deploying the updated configuration. Media, Scripts, and Reports To restore media, scripts, and reports, you just need to unpack them into the correct directory inside a NetBox container. Note The backup instructions above back up all three of the media/ , scripts/ , and reports/ subdirectories in one file. If you are restoring a backup from another NetBox instance, you might need to change the name of the tarball and the path after the -C at the end of this command to unpack your backup into the right location. NETBOX_NAMESPACE = \" $( kubectl get deployments \\ -A -l 'app.kubernetes.io/component=netbox' \\ -ojsonpath = '{.items[0].metadata.namespace}' ) \" && \\ NETBOX_RESTORE_POD = \" $( kubectl get pod \\ -o name \\ -n \" ${ NETBOX_NAMESPACE } \" \\ -l 'app.kubernetes.io/component=restore-mode' \\ | head -n 1 \\ ) \" && \\ cat netbox-data.tar.gz | kubectl exec ${ NETBOX_RESTORE_POD } \\ -n \" ${ NETBOX_NAMESPACE } \" \\ -i \\ -- tar -xvzf - \\ --no-same-owner \\ --no-same-permission \\ -C /opt/netbox/netbox Diode and Hydra Secrets (NetBox 1.10 and Up) To restore from a secrets yaml file, pass it to kubectl apply like so: # add/replace existing diode secrets NETBOX_NAMESPACE = \" $( kubectl get deployments \\ -A -l 'app.kubernetes.io/component=netbox' \\ -ojsonpath = '{.items[0].metadata.namespace}' ) \" && \\ kubectl apply \\ --server-side \\ --force-conflicts \\ --namespace \" ${ NETBOX_NAMESPACE } \" \\ --filename netbox-enterprise-diode-secrets.yaml Built-In PostgreSQL To restore from a dump file, pipe the netbox-enterprise.pgsql created during backup into psql in the PostgreSQL pod: NETBOX_NAMESPACE = \" $( kubectl get deployments \\ -A -l 'app.kubernetes.io/component=netbox' \\ -ojsonpath = '{.items[0].metadata.namespace}' ) \" && \\ NETBOX_DATABASE_FILE = \"netbox-enterprise.pgsql\" && \\ DIODE_DEPLOYMENT_COUNT = \" $( kubectl get deployments -n \" ${ NETBOX_NAMESPACE } \" -o name | grep -c diode || : ) \" && \\ HYDRA_DEPLOYMENT_COUNT = \" $( kubectl get deployments -n \" ${ NETBOX_NAMESPACE } \" -o name | grep -c hydra || : ) \" && \\ POSTGRESQL_MAIN_POD = \" $( kubectl get pod \\ -o name \\ -n \" ${ NETBOX_NAMESPACE } \" \\ -l 'postgres-operator.crunchydata.com/role=master' \\ | head -n 1 \\ ) \" && \\ for DB in netbox diode hydra ; do kubectl exec \" ${ POSTGRESQL_MAIN_POD } \" \\ -n \" ${ NETBOX_NAMESPACE } \" \\ -c database \\ -- dropdb --if-exists --force \" ${ DB } \" ; \\ done && \\ ( \\ if [ \" ${ DIODE_DEPLOYMENT_COUNT } \" -gt 0 ] ; then \\ echo \"CREATE DATABASE diode WITH TEMPLATE = template0 ENCODING = 'UTF8';\" ; \\ fi && \\ if [ \" ${ HYDRA_DEPLOYMENT_COUNT } \" -gt 0 ] ; then \\ echo \"CREATE DATABASE hydra WITH TEMPLATE = template0 ENCODING = 'UTF8';\" ; \\ fi && \\ echo \"CREATE DATABASE netbox WITH TEMPLATE = template0 ENCODING = 'UTF8';\" ; \\ ) \\ | kubectl exec \" ${ POSTGRESQL_MAIN_POD } \" \\ -n \" ${ NETBOX_NAMESPACE } \" \\ -i \\ -c database \\ -- psql -d template1 -f- && \\ grep -v -E '^(ALTER|CREATE|DROP) (DATABASE|ROLE) ' \" ${ NETBOX_DATABASE_FILE } \" \\ | kubectl exec \" ${ POSTGRESQL_MAIN_POD } \" \\ -n \" ${ NETBOX_NAMESPACE } \" \\ -i \\ -c database \\ -- psql -d netbox -f- Following this run the below to ensure all database permissions are correct: NETBOX_NAMESPACE = \" $( kubectl get deployments \\ -A -l 'app.kubernetes.io/component=netbox' \\ -ojsonpath = '{.items[0].metadata.namespace}' ) \" && \\ POSTGRESQL_MAIN_POD = \" $( kubectl get pod \\ -o name \\ -n \" ${ NETBOX_NAMESPACE } \" \\ -l 'postgres-operator.crunchydata.com/role=master' \\ | head -n 1 \\ ) \" && \\ for DB in $( kubectl exec \" ${ POSTGRESQL_MAIN_POD } \" \\ -n \" ${ NETBOX_NAMESPACE } \" \\ -c database \\ -- \\ psql -t -c \"SELECT datname FROM pg_database WHERE datname IN ('netbox', 'hydra', 'diode');\" ; \\ ) ; do \\ kubectl exec \" ${ POSTGRESQL_MAIN_POD } \" \\ -n \" ${ NETBOX_NAMESPACE } \" \\ -i \\ -c database \\ -- \\ psql --dbname \" ${ DB } \" -e -c \"\\ ALTER DATABASE ${ DB } OWNER TO ${ DB } ; \\ GRANT ALL PRIVILEGES ON DATABASE ${ DB } TO ${ DB } ; \\ GRANT CREATE ON SCHEMA public TO ${ DB } ; \\ GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO ${ DB } ; \\ GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${ DB } ; \\ GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${ DB } ; \\ \" ; \\ done","title":"Backups"},{"location":"netbox-enterprise/nbe-backups/#netbox-enterprise-backups","text":"Much like the NetBox software itself, NetBox Enterprise uses 2 main datastores: PostgreSQL, and Redis. PostgreSQL is used for the primary model data in NetBox, including sites, facilities, racks, and so on. Redis is used for internal caching and the task queue. For each type of datastore you can choose to use a built-in deployment, or configure NetBox Enterprise to use an existing external resource already in your environment.","title":"NetBox Enterprise Backups"},{"location":"netbox-enterprise/nbe-backups/#external-databases","text":"Info If you are providing your own database(s) for use by NetBox Enterprise, it is expected that you have your own processes for high availability, backup, and restore.","title":"External Databases"},{"location":"netbox-enterprise/nbe-backups/#using-disaster-recovery-for-backups","text":"A disaster recovery backup will preserve the complete state of your NetBox Enterprise install, from allocated volumes to databases to custom configuration. This feature is included in NetBox Enterprise installs, and can be enabled by installing some extra dependencies to your cluster for KOTS installs.","title":"Using Disaster Recovery for Backups"},{"location":"netbox-enterprise/nbe-backups/#backing-up-the-netbox-enterprise-installation","text":"Navigate to the backup configuration by clicking the Backup settings link in the Disaster Recovery section of the admin console. Input your S3 bucket, credentials, endpoint, and region. Click Update storage settings -- it will spend a few moments validating that your settings work. Perform a backup by clicking the Backups tab, and then clicking Start backup .","title":"Backing Up the NetBox Enterprise Installation"},{"location":"netbox-enterprise/nbe-backups/#restoring-the-netbox-enterprise-installation","text":"Download the latest NetBox Enterprise installer following the same instructions you did for a new install, if you haven't already. Run: ./netbox-enterprise restore Enter the same S3 credentials you use for backups. Next, it will take a few minutes to bring up the node. When it's complete, you will be prompted to continue the restore: Enter Y to continue, and the restore will launch the cluster. (Optional) If you plan to have more than one node in the new cluster, you can go to the admin console and configure them when prompted. Enter continue to finish bringing the NetBox Enterprise application up. It will take a few more minutes to finish bringing the application up, and then you will see \"Application restored!\" NetBox Enterprise and the Admin Console should now be completely restored and available as normal.","title":"Restoring the NetBox Enterprise Installation"},{"location":"netbox-enterprise/nbe-backups/#manual-backup-and-restore","text":"Besides disaster recovery, it is also a good idea to keep backups of your data in case you want to view, partially restore, or move your data to another system. NetBox Enterprise Namespace The default namespace is kotsadm . The instructions below default to kotsadm , but you can change the NETBOX_NAMESPACE variable to match your system.","title":"Manual Backup and Restore"},{"location":"netbox-enterprise/nbe-backups/#backing-up-your-data","text":"Backing up NetBox Enterprise's data manually is reasonably simple, and Kubernetes makes it easy to access them from the command-line. Before You Back Up: Accessing Your Cluster Before you can back anything up, you must first make sure you can access the cluster on the command line. See the advanced tools documentation for details on connecting to your NetBox Enterprise cluster.","title":"Backing Up Your Data"},{"location":"netbox-enterprise/nbe-backups/#restoring-your-backups","text":"Restoring is almost as simple as backing up. You just need to put NetBox Enterprise into restore mode first.","title":"Restoring Your Backups"},{"location":"netbox-enterprise/nbe-ec-built-in-plugins/","text":"Built-in Plugins in NetBox Enterprise NetBox Enterprise ships with a curated set of built-in plugins that extend the platform's core capabilities\u2014offering enhanced features without the complexity of manual setup. These plugins are pre-integrated and supported within the platform, ensuring streamlined deployment and reliable performance. Available Plugins Built-in plugins are regularly added to NetBox Enterprise as new releases become available. For the most current list of built-in plugins, refer to the NetBox Enterprise Release Notes . Plugin Management and Deployment The following steps will guide you through installation of built-in plugins: Navigate to the Config tab in the admin console. Enable Advanced Settings by clicking the 'Show Advanced Settings' checkbox: In the NetBox Python Configuration Overrides field, define your plugin list: PLUGINS = ['netbox_topology_views', 'netbox_bgp'] Additional plugin options can be configured in the override as well. Below is an example for NetBox Topology Views: PLUGINS_CONFIG = { 'netbox_topology_views': { 'allow_coordinates_saving': True, 'always_save_coordinates': True } } Be sure to consult the plugin\u2019s GitHub repository for specific configuration details. Save the configuration at the bottom of the page. When prompted, click Go to updated version , then select Deploy to apply the configuration changes. Once your NetBox Enterprise is back in a Ready state, log in to your instance and your plugins will be available.","title":"Built-in Plugin Installation"},{"location":"netbox-enterprise/nbe-ec-built-in-plugins/#built-in-plugins-in-netbox-enterprise","text":"NetBox Enterprise ships with a curated set of built-in plugins that extend the platform's core capabilities\u2014offering enhanced features without the complexity of manual setup. These plugins are pre-integrated and supported within the platform, ensuring streamlined deployment and reliable performance.","title":"Built-in Plugins in NetBox Enterprise"},{"location":"netbox-enterprise/nbe-ec-built-in-plugins/#available-plugins","text":"Built-in plugins are regularly added to NetBox Enterprise as new releases become available. For the most current list of built-in plugins, refer to the NetBox Enterprise Release Notes .","title":"Available Plugins"},{"location":"netbox-enterprise/nbe-ec-built-in-plugins/#plugin-management-and-deployment","text":"The following steps will guide you through installation of built-in plugins: Navigate to the Config tab in the admin console. Enable Advanced Settings by clicking the 'Show Advanced Settings' checkbox: In the NetBox Python Configuration Overrides field, define your plugin list: PLUGINS = ['netbox_topology_views', 'netbox_bgp'] Additional plugin options can be configured in the override as well. Below is an example for NetBox Topology Views: PLUGINS_CONFIG = { 'netbox_topology_views': { 'allow_coordinates_saving': True, 'always_save_coordinates': True } } Be sure to consult the plugin\u2019s GitHub repository for specific configuration details. Save the configuration at the bottom of the page. When prompted, click Go to updated version , then select Deploy to apply the configuration changes. Once your NetBox Enterprise is back in a Ready state, log in to your instance and your plugins will be available.","title":"Plugin Management and Deployment"},{"location":"netbox-enterprise/nbe-ec-custom-plugins/","text":"Installing Custom NetBox Plugins While NetBox Enterprise comes with a variety of certified and other community plugins built-in, there are cases where you will want to include additional plugins in your NetBox runtime. To do so, you will need to create a tarball containing the plugins you wish to install, known as a wheelhouse archive. Note On each startup, the wheelhouse's contents will be re-applied to a fresh NetBox Python environment. Create a working directory First, create a temporary directory for your plugin downloads to go: mkdir /tmp/wheelhouse Dowload the constraints.txt file for your release You can use kubectl cp to download a constraints file that contains a complete list of the pre-installed Python modules in your NetBox Enterprise version. To do so, download it with this command: sudo ./netbox-enterprise shell NBE_SOURCE_POD = \" $( \\ kubectl get pods -A \\ -o go-template = '{{ range .items }}{{ .metadata.name }}{{ \"\\n\" }}{{ end }}' \\ -l com.netboxlabs.netbox-enterprise/custom-plugins-upload = true \\ --field-selector status.phase = Running \\ | head -n 1 \\ ) \" NETBOX_NAMESPACE = \" $( kubectl get deployments \\ -A -l 'app.kubernetes.io/component=netbox' \\ -ojsonpath = '{.items[0].metadata.namespace}' ) \" kubectl cp \\ --namespace \" ${ NETBOX_NAMESPACE } \" \\ \" ${ NBE_SOURCE_POD } :/opt/netbox/constraints.txt\" \\ /tmp/wheelhouse/constraints.txt Create Wheels From Your Custom Modules If you are including any custom Python modules that aren't in PyPy, you will need to create wheel archives from them. You can generate them with pip wheel , passing one or more paths or archives, like so: pip wheel \\ --prefer-binary \\ --wheel-dir \"/tmp/wheelhouse\" \\ --constraint /tmp/wheelhouse/constraints.txt \\ </path/to/your/python-module-dir | /path/to/your/python-module.tar.gz> Note If your custom modules require compilation, you should build them on an x86_64 platform running Ubuntu 24 LTS and Python 3.12 so they match NetBox Enterprise's containers. Create a requirements.txt Create a file called requirements.txt in your /tmp/wheelhouse directory, listing each of the plugins you'd like to include. If you created custom wheels, make sure you add them to requirements.txt like any other dependency. For details on the format of requirements files, please see the pip documentation . However, it is strongly recommended that you use == to include a specific known and tested version in your requirements file. Use pip to download the plugins and their dependencies Next, use pip to populate the wheelhouse folder with any other dependencies, by running it with the download command, and the arguments necessary to pull the correct architecture and version to run inside the NetBox Enterprise container: pip download \\ --platform = \"manylinux_2_17_x86_64\" \\ --only-binary = \":all:\" \\ --python-version = \"3.12\" \\ --dest \"/tmp/wheelhouse\" \\ --find-links \"/tmp/wheelhouse\" \\ -c /tmp/wheelhouse/constraints.txt \\ -r /tmp/wheelhouse/requirements.txt If all went well, you should see *.whl files in the /tmp/wheelhouse/ folder for each of the packages you specified, as well as their dependencies. Create the archive Finally, create the archive: tar -C /tmp \\ -czf /tmp/wheelhouse.tar.gz \\ wheelhouse This should create a tarball that contains the wheelhouse/ directory and everything inside of it. Add your plugins to NetBox Enterprise On your NetBox Enterprise node, you can now upload the wheelhouse to a media directory. Note that this should work whether or not you are in restore mode. Both are configured to be able to accept wheelhouse uploads. To do so, run this: sudo ./netbox-enterprise shell NBE_SOURCE_POD = \" $( \\ kubectl get pods -A \\ -o go-template = '{{ range .items }}{{ .metadata.name }}{{ \"\\n\" }}{{ end }}' \\ -l com.netboxlabs.netbox-enterprise/custom-plugins-upload = true \\ --field-selector status.phase = Running \\ | head -n 1 \\ ) \" NETBOX_NAMESPACE = \" $( kubectl get deployments \\ -A -l 'app.kubernetes.io/component=netbox' \\ -ojsonpath = '{.items[0].metadata.namespace}' ) \" kubectl cp \\ --namespace \" ${ NETBOX_NAMESPACE } \" \\ /tmp/wheelhouse.tar.gz \\ \" ${ NBE_SOURCE_POD } :/opt/netbox/netbox/media/wheelhouse.tar.gz\" Enable and Configure Your Plugins In the Admin Console configuration, make sure Show Advanced Settings is checked. In the Python configuration overrides box, you can enter PLUGINS = [...] and PLUGINS_CONFIG = {} just as you would for any NetBox install. For details, see the NetBox plugin documentation . Restart the NetBox containers The next time the NetBox pods restart, your changes should be automatically applied. If you are in restore mode, switching out of restore mode will enable installation of your plugins. If you are not, a \"redeploy\" in the admin console will trigger the same. Migrations and Upgrades When upgrading to a new NetBox Enterprise version which includes a different version of the included NetBox, you will likely need to generate a new wheelhouse file that matches its changed dependencies. To do so, you should perform the following steps: Put NetBox Enterprise into \"restore mode\" in the Admin Console configuration, and deploy the config change. Deploy the new NetBox Enterprise version. Redo the instructions above to download the new constraints.txt file, create, and then upload a new wheelhouse tarball. Uncheck \"restore mode\" and deploy.","title":"Custom Plugin Installation"},{"location":"netbox-enterprise/nbe-ec-custom-plugins/#installing-custom-netbox-plugins","text":"While NetBox Enterprise comes with a variety of certified and other community plugins built-in, there are cases where you will want to include additional plugins in your NetBox runtime. To do so, you will need to create a tarball containing the plugins you wish to install, known as a wheelhouse archive. Note On each startup, the wheelhouse's contents will be re-applied to a fresh NetBox Python environment.","title":"Installing Custom NetBox Plugins"},{"location":"netbox-enterprise/nbe-ec-custom-plugins/#create-a-working-directory","text":"First, create a temporary directory for your plugin downloads to go: mkdir /tmp/wheelhouse","title":"Create a working directory"},{"location":"netbox-enterprise/nbe-ec-custom-plugins/#dowload-the-constraintstxt-file-for-your-release","text":"You can use kubectl cp to download a constraints file that contains a complete list of the pre-installed Python modules in your NetBox Enterprise version. To do so, download it with this command: sudo ./netbox-enterprise shell NBE_SOURCE_POD = \" $( \\ kubectl get pods -A \\ -o go-template = '{{ range .items }}{{ .metadata.name }}{{ \"\\n\" }}{{ end }}' \\ -l com.netboxlabs.netbox-enterprise/custom-plugins-upload = true \\ --field-selector status.phase = Running \\ | head -n 1 \\ ) \" NETBOX_NAMESPACE = \" $( kubectl get deployments \\ -A -l 'app.kubernetes.io/component=netbox' \\ -ojsonpath = '{.items[0].metadata.namespace}' ) \" kubectl cp \\ --namespace \" ${ NETBOX_NAMESPACE } \" \\ \" ${ NBE_SOURCE_POD } :/opt/netbox/constraints.txt\" \\ /tmp/wheelhouse/constraints.txt","title":"Dowload the constraints.txt file for your release"},{"location":"netbox-enterprise/nbe-ec-custom-plugins/#create-wheels-from-your-custom-modules","text":"If you are including any custom Python modules that aren't in PyPy, you will need to create wheel archives from them. You can generate them with pip wheel , passing one or more paths or archives, like so: pip wheel \\ --prefer-binary \\ --wheel-dir \"/tmp/wheelhouse\" \\ --constraint /tmp/wheelhouse/constraints.txt \\ </path/to/your/python-module-dir | /path/to/your/python-module.tar.gz> Note If your custom modules require compilation, you should build them on an x86_64 platform running Ubuntu 24 LTS and Python 3.12 so they match NetBox Enterprise's containers.","title":"Create Wheels From Your Custom Modules"},{"location":"netbox-enterprise/nbe-ec-custom-plugins/#create-a-requirementstxt","text":"Create a file called requirements.txt in your /tmp/wheelhouse directory, listing each of the plugins you'd like to include. If you created custom wheels, make sure you add them to requirements.txt like any other dependency. For details on the format of requirements files, please see the pip documentation . However, it is strongly recommended that you use == to include a specific known and tested version in your requirements file.","title":"Create a requirements.txt"},{"location":"netbox-enterprise/nbe-ec-custom-plugins/#use-pip-to-download-the-plugins-and-their-dependencies","text":"Next, use pip to populate the wheelhouse folder with any other dependencies, by running it with the download command, and the arguments necessary to pull the correct architecture and version to run inside the NetBox Enterprise container: pip download \\ --platform = \"manylinux_2_17_x86_64\" \\ --only-binary = \":all:\" \\ --python-version = \"3.12\" \\ --dest \"/tmp/wheelhouse\" \\ --find-links \"/tmp/wheelhouse\" \\ -c /tmp/wheelhouse/constraints.txt \\ -r /tmp/wheelhouse/requirements.txt If all went well, you should see *.whl files in the /tmp/wheelhouse/ folder for each of the packages you specified, as well as their dependencies.","title":"Use pip to download the plugins and their dependencies"},{"location":"netbox-enterprise/nbe-ec-custom-plugins/#create-the-archive","text":"Finally, create the archive: tar -C /tmp \\ -czf /tmp/wheelhouse.tar.gz \\ wheelhouse This should create a tarball that contains the wheelhouse/ directory and everything inside of it.","title":"Create the archive"},{"location":"netbox-enterprise/nbe-ec-custom-plugins/#add-your-plugins-to-netbox-enterprise","text":"On your NetBox Enterprise node, you can now upload the wheelhouse to a media directory. Note that this should work whether or not you are in restore mode. Both are configured to be able to accept wheelhouse uploads. To do so, run this: sudo ./netbox-enterprise shell NBE_SOURCE_POD = \" $( \\ kubectl get pods -A \\ -o go-template = '{{ range .items }}{{ .metadata.name }}{{ \"\\n\" }}{{ end }}' \\ -l com.netboxlabs.netbox-enterprise/custom-plugins-upload = true \\ --field-selector status.phase = Running \\ | head -n 1 \\ ) \" NETBOX_NAMESPACE = \" $( kubectl get deployments \\ -A -l 'app.kubernetes.io/component=netbox' \\ -ojsonpath = '{.items[0].metadata.namespace}' ) \" kubectl cp \\ --namespace \" ${ NETBOX_NAMESPACE } \" \\ /tmp/wheelhouse.tar.gz \\ \" ${ NBE_SOURCE_POD } :/opt/netbox/netbox/media/wheelhouse.tar.gz\"","title":"Add your plugins to NetBox Enterprise"},{"location":"netbox-enterprise/nbe-ec-custom-plugins/#enable-and-configure-your-plugins","text":"In the Admin Console configuration, make sure Show Advanced Settings is checked. In the Python configuration overrides box, you can enter PLUGINS = [...] and PLUGINS_CONFIG = {} just as you would for any NetBox install. For details, see the NetBox plugin documentation .","title":"Enable and Configure Your Plugins"},{"location":"netbox-enterprise/nbe-ec-custom-plugins/#restart-the-netbox-containers","text":"The next time the NetBox pods restart, your changes should be automatically applied. If you are in restore mode, switching out of restore mode will enable installation of your plugins. If you are not, a \"redeploy\" in the admin console will trigger the same.","title":"Restart the NetBox containers"},{"location":"netbox-enterprise/nbe-ec-custom-plugins/#migrations-and-upgrades","text":"When upgrading to a new NetBox Enterprise version which includes a different version of the included NetBox, you will likely need to generate a new wheelhouse file that matches its changed dependencies. To do so, you should perform the following steps: Put NetBox Enterprise into \"restore mode\" in the Admin Console configuration, and deploy the config change. Deploy the new NetBox Enterprise version. Redo the instructions above to download the new constraints.txt file, create, and then upload a new wheelhouse tarball. Uncheck \"restore mode\" and deploy.","title":"Migrations and Upgrades"},{"location":"netbox-enterprise/nbe-ec-installation/","text":"NetBox Enterprise Installation You should be able to follow these instructions for installing NetBox Enterprise in most environments. Note The hostname and IP address of the host cannot be changed after installation, and must be finalized before proceeding. Deploying the cluster The following steps are required for a NetBox Enterprise installation. Download the installer and license file to your host (the Authorization token should be provided by NetBox Labs): curl -f \"https://app.enterprise.netboxlabs.com/embedded/netbox-enterprise/stable\" -H \"Authorization: <provided by NetBox Labs>\" -o netbox-enterprise-stable.tgz Confirm the file size is ~300MB Uncompress the package and launch the installation: tar -xvzf netbox-enterprise-stable.tgz sudo ./netbox-enterprise install --license license.yaml You\u2019ll be requested to create a password for the NetBox Enterprise admin console. A Kubernetes cluster will then be deployed, ready to host all the NetBox application components. The deployment of the cluster is complete with this message: Visit the Admin Console to configure and install netbox-enterprise: http://my.netbox-enterprise.host:30000 Deploying NetBox Access the NetBox Enterprise admin console and configure NetBox. Open the provided URL in a browser. A prompt will require the password created in Step 2: Click Start and you will be greeted by a warning about self-signed certificates: Click Continue and accept the self-signed TLS certificate according to the instructions for your browser. You will then be prompted to optionally set a hostname and upload a self-signed certificate. It is recommended that you set the hostname now, but if you do not upload a TLS certificate you can do it later. Instructions for TLS configuration are available in the TLS and Ingress documentation Log In to the Admin Console Once TLS is configured, you will be prompted to log in to the NetBox Enterprise Admin Console. Enter the password you created in the installer CLI. Once logged in, you'll be presented with the option to add additional nodes to the cluster. Do not configure additional nodes, it is currently not supported. Multi-Node Clusters Adding nodes to the cluster is currently not supported . Click Continue to move on to the NetBox Enterprise configuration wizard. Configure NetBox Enterprise A wizard will guide the configuration of NetBox for the environment: Provisions a Superuser and password: Set the number of replicas and choose a preset for the resources allocated to NetBox. It is recommended that you set the number of replicas to 1 until initial installation has completed, and then update it to a higher value. Be Advised Do not enable Restore Mode when initially setting up NetBox or the installation will fail. Configure your PostgreSQL database and Redis cache: Choose the built-in or external PostgreSQL: Choose the built-in or external Redis object store: Finally, accept the terms of service by writing \"ACCEPT\" (case-insensitive) and you can proceed to the deployment. Finish the Deployment Once you have accepted the terms of service, the installer will run some additional checks to make sure your host can run NetBox Enterprise. Click Deploy to launch the first deployment. You will then be redirected to the admin console Dashboard. The initial deployment will take longer than subsequent ones, as it brings up all subsystems for the first time and runs migrations to initialize the database. The Unavailable status will change to Ready once the deployment is complete and NetBox has fully initialized: Verify the Deployment Once you see Ready , NetBox Enterprise is fully deployed, and available on ports 80 and 443 .","title":"Installation"},{"location":"netbox-enterprise/nbe-ec-installation/#netbox-enterprise-installation","text":"You should be able to follow these instructions for installing NetBox Enterprise in most environments. Note The hostname and IP address of the host cannot be changed after installation, and must be finalized before proceeding.","title":"NetBox Enterprise Installation"},{"location":"netbox-enterprise/nbe-ec-installation/#deploying-the-cluster","text":"The following steps are required for a NetBox Enterprise installation. Download the installer and license file to your host (the Authorization token should be provided by NetBox Labs): curl -f \"https://app.enterprise.netboxlabs.com/embedded/netbox-enterprise/stable\" -H \"Authorization: <provided by NetBox Labs>\" -o netbox-enterprise-stable.tgz Confirm the file size is ~300MB Uncompress the package and launch the installation: tar -xvzf netbox-enterprise-stable.tgz sudo ./netbox-enterprise install --license license.yaml You\u2019ll be requested to create a password for the NetBox Enterprise admin console. A Kubernetes cluster will then be deployed, ready to host all the NetBox application components. The deployment of the cluster is complete with this message: Visit the Admin Console to configure and install netbox-enterprise: http://my.netbox-enterprise.host:30000","title":"Deploying the cluster"},{"location":"netbox-enterprise/nbe-ec-installation/#deploying-netbox","text":"Access the NetBox Enterprise admin console and configure NetBox. Open the provided URL in a browser. A prompt will require the password created in Step 2: Click Start and you will be greeted by a warning about self-signed certificates: Click Continue and accept the self-signed TLS certificate according to the instructions for your browser. You will then be prompted to optionally set a hostname and upload a self-signed certificate. It is recommended that you set the hostname now, but if you do not upload a TLS certificate you can do it later. Instructions for TLS configuration are available in the TLS and Ingress documentation Log In to the Admin Console Once TLS is configured, you will be prompted to log in to the NetBox Enterprise Admin Console. Enter the password you created in the installer CLI. Once logged in, you'll be presented with the option to add additional nodes to the cluster. Do not configure additional nodes, it is currently not supported. Multi-Node Clusters Adding nodes to the cluster is currently not supported . Click Continue to move on to the NetBox Enterprise configuration wizard.","title":"Deploying NetBox"},{"location":"netbox-enterprise/nbe-ec-installation/#configure-netbox-enterprise","text":"A wizard will guide the configuration of NetBox for the environment: Provisions a Superuser and password: Set the number of replicas and choose a preset for the resources allocated to NetBox. It is recommended that you set the number of replicas to 1 until initial installation has completed, and then update it to a higher value. Be Advised Do not enable Restore Mode when initially setting up NetBox or the installation will fail. Configure your PostgreSQL database and Redis cache: Choose the built-in or external PostgreSQL: Choose the built-in or external Redis object store: Finally, accept the terms of service by writing \"ACCEPT\" (case-insensitive) and you can proceed to the deployment.","title":"Configure\u00a0NetBox Enterprise"},{"location":"netbox-enterprise/nbe-ec-installation/#finish-the-deployment","text":"Once you have accepted the terms of service, the installer will run some additional checks to make sure your host can run NetBox Enterprise. Click Deploy to launch the first deployment. You will then be redirected to the admin console Dashboard. The initial deployment will take longer than subsequent ones, as it brings up all subsystems for the first time and runs migrations to initialize the database. The Unavailable status will change to Ready once the deployment is complete and NetBox has fully initialized:","title":"Finish the Deployment"},{"location":"netbox-enterprise/nbe-ec-installation/#verify-the-deployment","text":"Once you see Ready , NetBox Enterprise is fully deployed, and available on ports 80 and 443 .","title":"Verify the Deployment"},{"location":"netbox-enterprise/nbe-ec-linux-changes/","text":"Linux Root-Level Changes This document summarizes the system-level changes made to a Linux host when installing a NetBox Enterprise Embedded Cluster, particularly in relation to directories, files, and runtime configurations affected under / . Key Directories Created During installation, the Embedded Cluster creates several directories for container runtimes, network configuration, logging, and Kubernetes internals. These directories may be used for binary placement, socket communication, runtime data, or logging. Path Description /etc/cni CNI (Container Network Interface) configuration /etc/k0s Configuration for the k0s Kubernetes distribution /opt/cni Optional location for CNI plugin binaries /opt/containerd Data and binaries for containerd runtime /run/calico Calico's runtime data and state /run/containerd Runtime socket and process management for containerd /run/k0s Runtime files and PID info for k0s /sys/fs/cgroup/kubepods cgroup hierarchy for Kubernetes pods /sys/fs/cgroup/system.slice/containerd.service cgroup slice for the containerd system service /sys/fs/cgroup/system.slice/k0scontroller.service cgroup slice for the k0scontroller service /usr/libexec/k0s Executables used by k0s, potentially for internal service components /usr/local/bin/k0s The k0s binary, typically symlinked or copied here /var/lib/calico Persistent data for the Calico network plugin /var/lib/cni CNI state and cache /var/lib/containers OCI container storage (may contain container images and layers) /var/lib/kubelet State for the kubelet, pod manifests, volumes, etc. /var/log/calico Logs generated by Calico agents /var/log/containers Logs for individual containers, typically symlinked from journald /var/log/embedded-cluster Logs specific to Embedded Cluster installation and runtime /var/log/pods Logs organized by pod name/namespace Runtime & Kernel Modifications cgroups are used extensively to isolate resources: kubepods cgroup under /sys/fs/cgroup Systemd slices for services like containerd and k0scontroller These modifications may impact systems with strict lockdowns or non-standard cgroup hierarchies. Binaries and Services The k0s binary is located at /usr/local/bin/k0s . Services for k0scontroller , containerd , and possibly calico will be active post-install. Services will install unit files in /etc/systemd/system/ . Firewall Requirements To allow proper operation of the Embedded Cluster, the following network ports must be open: Port Protocol Purpose 6443 TCP Kubernetes API server (used by kubelets, kubectl, etc.) 2379-2380 TCP etcd (Kubernetes backing store \u2013 internal traffic) 10250 TCP Kubelet API for health checks and logs 4789 UDP VXLAN overlay (used by Calico) 8472 UDP VXLAN (alternative port for Calico) 51820 UDP WireGuard (if enabled for Calico networking) 179 TCP BGP (used if Calico is in BGP mode) 443 TCP NetBox Enterprise UI and API access 8800 TCP Admin Console (legacy or diagnostic use) Note: Ingress/egress rules must permit internal pod-to-pod communication. For systems in restricted environments, please refer to the Special Cases for Restricted Environments section in the requirements documentation. This provides detailed guidance on configuring firewalls and network policies to ensure proper operation of the Embedded Cluster.","title":"Linux System Changes"},{"location":"netbox-enterprise/nbe-ec-linux-changes/#linux-root-level-changes","text":"This document summarizes the system-level changes made to a Linux host when installing a NetBox Enterprise Embedded Cluster, particularly in relation to directories, files, and runtime configurations affected under / .","title":"Linux Root-Level Changes"},{"location":"netbox-enterprise/nbe-ec-linux-changes/#key-directories-created","text":"During installation, the Embedded Cluster creates several directories for container runtimes, network configuration, logging, and Kubernetes internals. These directories may be used for binary placement, socket communication, runtime data, or logging. Path Description /etc/cni CNI (Container Network Interface) configuration /etc/k0s Configuration for the k0s Kubernetes distribution /opt/cni Optional location for CNI plugin binaries /opt/containerd Data and binaries for containerd runtime /run/calico Calico's runtime data and state /run/containerd Runtime socket and process management for containerd /run/k0s Runtime files and PID info for k0s /sys/fs/cgroup/kubepods cgroup hierarchy for Kubernetes pods /sys/fs/cgroup/system.slice/containerd.service cgroup slice for the containerd system service /sys/fs/cgroup/system.slice/k0scontroller.service cgroup slice for the k0scontroller service /usr/libexec/k0s Executables used by k0s, potentially for internal service components /usr/local/bin/k0s The k0s binary, typically symlinked or copied here /var/lib/calico Persistent data for the Calico network plugin /var/lib/cni CNI state and cache /var/lib/containers OCI container storage (may contain container images and layers) /var/lib/kubelet State for the kubelet, pod manifests, volumes, etc. /var/log/calico Logs generated by Calico agents /var/log/containers Logs for individual containers, typically symlinked from journald /var/log/embedded-cluster Logs specific to Embedded Cluster installation and runtime /var/log/pods Logs organized by pod name/namespace","title":"Key Directories Created"},{"location":"netbox-enterprise/nbe-ec-linux-changes/#runtime-kernel-modifications","text":"cgroups are used extensively to isolate resources: kubepods cgroup under /sys/fs/cgroup Systemd slices for services like containerd and k0scontroller These modifications may impact systems with strict lockdowns or non-standard cgroup hierarchies.","title":"Runtime &amp; Kernel Modifications"},{"location":"netbox-enterprise/nbe-ec-linux-changes/#binaries-and-services","text":"The k0s binary is located at /usr/local/bin/k0s . Services for k0scontroller , containerd , and possibly calico will be active post-install. Services will install unit files in /etc/systemd/system/ .","title":"Binaries and Services"},{"location":"netbox-enterprise/nbe-ec-linux-changes/#firewall-requirements","text":"To allow proper operation of the Embedded Cluster, the following network ports must be open: Port Protocol Purpose 6443 TCP Kubernetes API server (used by kubelets, kubectl, etc.) 2379-2380 TCP etcd (Kubernetes backing store \u2013 internal traffic) 10250 TCP Kubelet API for health checks and logs 4789 UDP VXLAN overlay (used by Calico) 8472 UDP VXLAN (alternative port for Calico) 51820 UDP WireGuard (if enabled for Calico networking) 179 TCP BGP (used if Calico is in BGP mode) 443 TCP NetBox Enterprise UI and API access 8800 TCP Admin Console (legacy or diagnostic use) Note: Ingress/egress rules must permit internal pod-to-pod communication. For systems in restricted environments, please refer to the Special Cases for Restricted Environments section in the requirements documentation. This provides detailed guidance on configuring firewalls and network policies to ensure proper operation of the Embedded Cluster.","title":"Firewall Requirements"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/","text":"NetBox Enterprise Requirements for Red Hat Enterprise Linux (RHEL) Tested Versions This guide was used on fresh installs of the following versions of RHEL: RHEL 9 RHEL 9.5 Steps to prepare RHEL Disable Swap Swap can lead to unpredictable memory behavior in Kubernetes. sudo swapoff -a sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab Set SELinux to Permissibe mode (can be enforced later) sudo setenforce Permissive sudo sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/sysconfig/selinux Configure Firewall If firewalld isn't installed sudo dnf -y install dnf-plugins-core sudo dnf -y install firewalld sudo systemctl enable --now firewalld Open required ports for the internal kubernetes platform. # Kubernetes API, etcd, and control plane components sudo firewall-cmd --permanent --add-port ={ 6443 ,2379,2380,10250,10251,10252,10255,5473,10257,10259 } /tcp # NodePort range sudo firewall-cmd --permanent --add-port = 30000 -32767/tcp # BGP and VXLAN (optional, for Calico) sudo firewall-cmd --permanent --add-port = 4789 /udp sudo firewall-cmd --permanent --add-port = 179 /tcp # Reload firewall sudo firewall-cmd --reload Configure Kernel Modules and Parameters Install kernel headers: sudo dnf -y install kernel-devel- $( uname -r ) Load and persist modules: sudo modprobe br_netfilter ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh overlay cat <<EOF | sudo tee /etc/modules-load.d/kubernetes.conf br_netfilter ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh overlay EOF sudo sysctl --system Install containerd (optional runtime) sudo dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo sudo dnf makecache sudo dnf install containerd.io -y sudo mkdir -p /etc/containerd containerd config default | sudo tee /etc/containerd/config.toml sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml sudo systemctl enable --now containerd Reboot Reboot to apply changes sudo reboot now Install NetBox Enterprise Run through the regular installation here . Optional - Enable SELinux Enforcing Install SELinux Tools sudo dnf -y inst all setroubleshoot-server setools mcstrans Run the suggestions from the enterprise install for SELinux export EC_DIR = \"/var/lib/embedded-cluster\" export KUBE_DIR = \" ${ EC_DIR } /k0s\" # tell SELinux the Cluster directory is owned by Containerd sudo semanage fcontext -a -t container_var_lib_t \" ${ EC_DIR } \" sudo restorecon -R -v \" ${ EC_DIR } \" # additionally, binaries should be allowed to execute sudo semanage fcontext -a -t container_runtime_exec_t \" ${ KUBE_DIR } /bin/containerd.*\" sudo semanage fcontext -a -t container_runtime_exec_t \" ${ KUBE_DIR } /bin/runc\" sudo restorecon -R -v \" ${ KUBE_DIR } /bin\" # fix permissions for containerd and restrict some folders to read-only sudo semanage fcontext -a -t container_var_lib_t \" ${ KUBE_DIR } /containerd(/.*)?\" sudo semanage fcontext -a -t container_ro_file_t \" ${ KUBE_DIR } /containerd/io.containerd.snapshotter.*/snapshots(/.*)?\" sudo restorecon -R -v ${ KUBE_DIR } /containerd Check for errors Run sealert to look for issues sealert -a /var/log/audit/audit.log Look for messages like this and run the command suggested based on confidence Note It is important you understand these before enabling and that you can possible be creating security risks if you do not understand what you're enabling. SELinux is preventing /usr/sbin/setfiles from 'read, append' accesses on the file /var/lib/embedded-cluster/tmp/tmph3gb9qv1. ***** Plugin leaks (86.2 confidence) suggests ***************************** If you want to ignore setfiles trying to read append access the tmph3gb9qv1 file, because you believe it should not need this access. Then you should report this as a bug. You can generate a local policy module to dontaudit this access. Do # ausearch -x /usr/sbin/setfiles --raw | audit2allow -D -M my-setfiles # semodule -X 300 -i my-setfiles.pp ***** Plugin catchall (14.7 confidence) suggests ************************** If you believe that setfiles should be allowed read append access on the tmph3gb9qv1 file by default. Then you should report this as a bug. You can generate a local policy module to allow this access. Do allow this access for now by executing: # ausearch -c 'setfiles' --raw | audit2allow -M my-setfiles # semodule -X 300 -i my-setfiles.pp Additional Information: Source Context unconfined_u:unconfined_r:setfiles_t:s0-s0:c0.c102 3 Target Context unconfined_u:object_r:var_lib_t:s0 Target Objects /var/lib/embedded-cluster/tmp/tmph3gb9qv1 [ file ] Source setfiles Source Path /usr/sbin/setfiles Port <Unknown> Host <Unknown> Source RPM Packages policycoreutils-3.6-2.1.el9.x86_64 Target RPM Packages SELinux Policy RPM selinux-policy-targeted-38.1.45-3.el9_5.noarch Local Policy RPM selinux-policy-targeted-38.1.45-3.el9_5.noarch Selinux Enabled True Policy Type targeted Enforcing Mode Permissive Host Name tom-testing-rhel Platform Linux tom-testing-rhel 5.14.0-503.38.1.el9_5.x86_64 #1 SMP PREEMPT_DYNAMIC Sun Apr 13 22:01:49 EDT 2025 x86_64 x86_64 Alert Count 1 First Seen 2025-04-24 12:39:11 EDT Last Seen 2025-04-24 12:39:11 EDT Local ID fb07cf19-dcea-4b68-8990-59a7a5ba57e8 Raw Audit Messages type=AVC msg=audit(1745512751.796:1240): avc: denied { read append } for pid=62558 comm=\"setfiles\" path=\"/var/lib/embedded-cluster/tmp/tmph3gb9qv1\" dev=\"vda4\" ino=209964330 scontext=unconfined_u:unconfined_r:setfiles_t:s0-s0:c0.c1023 tcontext=unconfined_u:object_r:var_lib_t:s0 tclass=file permissive=1 type=SYSCALL msg=audit(1745512751.796:1240): arch=x86_64 syscall=execve success=yes exit=0 a0=5609fe032210 a1=560a0902dfa0 a2=0 a3=19dd30 items=0 ppid=62146 pid=62558 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts1 ses=1 comm=setfiles exe=/usr/sbin/setfiles subj=unconfined_u:unconfined_r:setfiles_t:s0-s0:c0.c1023 key=(null)ARCH=x86_64 SYSCALL=execve AUID=root UID=root GID=root EUID=root SUID=root FSUID=root EGID=root SGID=root FSGID=root Hash: setfiles,setfiles_t,var_lib_t,file,read,append Run suggested commands An example from the above log message would be: ausearch -x /usr/sbin/groupadd --raw | audit2allow -D -M my-groupadd semodule -X 300 -i my-groupadd.pp Ensure no errors remain Repeat the above two seteps until the following command returns nothing. sealert -a /var/log/audit/audit.log Set Enforcing sudo setenforce Enforcing sudo sed -i --follow-symlinks 's/SELINUX=permissive/SELINUX=enforcing/g' /etc/sysconfig/selinux Note Enable Permissive again for any upgrades, plug-ins and changes and run through the sealert and suggestions until no errors remain before re-enabling selinux.","title":"RHEL"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#netbox-enterprise-requirements-for-red-hat-enterprise-linux-rhel","text":"","title":"NetBox Enterprise Requirements for Red Hat Enterprise Linux (RHEL)"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#tested-versions","text":"This guide was used on fresh installs of the following versions of RHEL: RHEL 9 RHEL 9.5","title":"Tested Versions"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#steps-to-prepare-rhel","text":"","title":"Steps to prepare RHEL"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#disable-swap","text":"Swap can lead to unpredictable memory behavior in Kubernetes. sudo swapoff -a sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab","title":"Disable Swap"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#set-selinux-to-permissibe-mode-can-be-enforced-later","text":"sudo setenforce Permissive sudo sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/sysconfig/selinux","title":"Set SELinux to Permissibe mode (can be enforced later)"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#configure-firewall","text":"If firewalld isn't installed sudo dnf -y install dnf-plugins-core sudo dnf -y install firewalld sudo systemctl enable --now firewalld Open required ports for the internal kubernetes platform. # Kubernetes API, etcd, and control plane components sudo firewall-cmd --permanent --add-port ={ 6443 ,2379,2380,10250,10251,10252,10255,5473,10257,10259 } /tcp # NodePort range sudo firewall-cmd --permanent --add-port = 30000 -32767/tcp # BGP and VXLAN (optional, for Calico) sudo firewall-cmd --permanent --add-port = 4789 /udp sudo firewall-cmd --permanent --add-port = 179 /tcp # Reload firewall sudo firewall-cmd --reload","title":"Configure Firewall"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#configure-kernel-modules-and-parameters","text":"Install kernel headers: sudo dnf -y install kernel-devel- $( uname -r ) Load and persist modules: sudo modprobe br_netfilter ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh overlay cat <<EOF | sudo tee /etc/modules-load.d/kubernetes.conf br_netfilter ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh overlay EOF sudo sysctl --system","title":"Configure Kernel Modules and Parameters"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#install-containerd-optional-runtime","text":"sudo dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo sudo dnf makecache sudo dnf install containerd.io -y sudo mkdir -p /etc/containerd containerd config default | sudo tee /etc/containerd/config.toml sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml sudo systemctl enable --now containerd","title":"Install containerd (optional runtime)"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#reboot","text":"Reboot to apply changes sudo reboot now","title":"Reboot"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#install-netbox-enterprise","text":"Run through the regular installation here .","title":"Install NetBox Enterprise"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#optional-enable-selinux-enforcing","text":"","title":"Optional - Enable SELinux Enforcing"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#install-selinux-tools","text":"sudo dnf -y inst all setroubleshoot-server setools mcstrans","title":"Install SELinux Tools"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#run-the-suggestions-from-the-enterprise-install-for-selinux","text":"export EC_DIR = \"/var/lib/embedded-cluster\" export KUBE_DIR = \" ${ EC_DIR } /k0s\" # tell SELinux the Cluster directory is owned by Containerd sudo semanage fcontext -a -t container_var_lib_t \" ${ EC_DIR } \" sudo restorecon -R -v \" ${ EC_DIR } \" # additionally, binaries should be allowed to execute sudo semanage fcontext -a -t container_runtime_exec_t \" ${ KUBE_DIR } /bin/containerd.*\" sudo semanage fcontext -a -t container_runtime_exec_t \" ${ KUBE_DIR } /bin/runc\" sudo restorecon -R -v \" ${ KUBE_DIR } /bin\" # fix permissions for containerd and restrict some folders to read-only sudo semanage fcontext -a -t container_var_lib_t \" ${ KUBE_DIR } /containerd(/.*)?\" sudo semanage fcontext -a -t container_ro_file_t \" ${ KUBE_DIR } /containerd/io.containerd.snapshotter.*/snapshots(/.*)?\" sudo restorecon -R -v ${ KUBE_DIR } /containerd","title":"Run the suggestions from the enterprise install for SELinux"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#check-for-errors","text":"Run sealert to look for issues sealert -a /var/log/audit/audit.log Look for messages like this and run the command suggested based on confidence Note It is important you understand these before enabling and that you can possible be creating security risks if you do not understand what you're enabling. SELinux is preventing /usr/sbin/setfiles from 'read, append' accesses on the file /var/lib/embedded-cluster/tmp/tmph3gb9qv1. ***** Plugin leaks (86.2 confidence) suggests ***************************** If you want to ignore setfiles trying to read append access the tmph3gb9qv1 file, because you believe it should not need this access. Then you should report this as a bug. You can generate a local policy module to dontaudit this access. Do # ausearch -x /usr/sbin/setfiles --raw | audit2allow -D -M my-setfiles # semodule -X 300 -i my-setfiles.pp ***** Plugin catchall (14.7 confidence) suggests ************************** If you believe that setfiles should be allowed read append access on the tmph3gb9qv1 file by default. Then you should report this as a bug. You can generate a local policy module to allow this access. Do allow this access for now by executing: # ausearch -c 'setfiles' --raw | audit2allow -M my-setfiles # semodule -X 300 -i my-setfiles.pp Additional Information: Source Context unconfined_u:unconfined_r:setfiles_t:s0-s0:c0.c102 3 Target Context unconfined_u:object_r:var_lib_t:s0 Target Objects /var/lib/embedded-cluster/tmp/tmph3gb9qv1 [ file ] Source setfiles Source Path /usr/sbin/setfiles Port <Unknown> Host <Unknown> Source RPM Packages policycoreutils-3.6-2.1.el9.x86_64 Target RPM Packages SELinux Policy RPM selinux-policy-targeted-38.1.45-3.el9_5.noarch Local Policy RPM selinux-policy-targeted-38.1.45-3.el9_5.noarch Selinux Enabled True Policy Type targeted Enforcing Mode Permissive Host Name tom-testing-rhel Platform Linux tom-testing-rhel 5.14.0-503.38.1.el9_5.x86_64 #1 SMP PREEMPT_DYNAMIC Sun Apr 13 22:01:49 EDT 2025 x86_64 x86_64 Alert Count 1 First Seen 2025-04-24 12:39:11 EDT Last Seen 2025-04-24 12:39:11 EDT Local ID fb07cf19-dcea-4b68-8990-59a7a5ba57e8 Raw Audit Messages type=AVC msg=audit(1745512751.796:1240): avc: denied { read append } for pid=62558 comm=\"setfiles\" path=\"/var/lib/embedded-cluster/tmp/tmph3gb9qv1\" dev=\"vda4\" ino=209964330 scontext=unconfined_u:unconfined_r:setfiles_t:s0-s0:c0.c1023 tcontext=unconfined_u:object_r:var_lib_t:s0 tclass=file permissive=1 type=SYSCALL msg=audit(1745512751.796:1240): arch=x86_64 syscall=execve success=yes exit=0 a0=5609fe032210 a1=560a0902dfa0 a2=0 a3=19dd30 items=0 ppid=62146 pid=62558 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts1 ses=1 comm=setfiles exe=/usr/sbin/setfiles subj=unconfined_u:unconfined_r:setfiles_t:s0-s0:c0.c1023 key=(null)ARCH=x86_64 SYSCALL=execve AUID=root UID=root GID=root EUID=root SUID=root FSUID=root EGID=root SGID=root FSGID=root Hash: setfiles,setfiles_t,var_lib_t,file,read,append","title":"Check for errors"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#run-suggested-commands","text":"An example from the above log message would be: ausearch -x /usr/sbin/groupadd --raw | audit2allow -D -M my-groupadd semodule -X 300 -i my-groupadd.pp","title":"Run suggested commands"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#ensure-no-errors-remain","text":"Repeat the above two seteps until the following command returns nothing. sealert -a /var/log/audit/audit.log","title":"Ensure no errors remain"},{"location":"netbox-enterprise/nbe-ec-requirements-rhel/#set-enforcing","text":"sudo setenforce Enforcing sudo sed -i --follow-symlinks 's/SELINUX=permissive/SELINUX=enforcing/g' /etc/sysconfig/selinux Note Enable Permissive again for any upgrades, plug-ins and changes and run through the sealert and suggestions until no errors remain before re-enabling selinux.","title":"Set Enforcing"},{"location":"netbox-enterprise/nbe-ec-requirements-ubuntu/","tags":["enterprise","netbox","installation","ubuntu","requirements","kubernetes","administration"],"text":"NetBox Enterprise Requirements for Ubuntu Ubuntu-specific preparation steps. See the main requirements document for general requirements and special cases. Firewall Configuration Choose either direct iptables (Required Commands) OR UFW (Optional section), not both, to avoid conflicts. Tested Versions Ubuntu 22.04 LTS (Jammy Jellyfish) Ubuntu 24.04 LTS (Noble Numbat) Required Commands (Direct iptables approach) # Disable swap sudo swapoff -a sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab # Install iptables-persistent sudo apt update && sudo apt install -y iptables-persistent # Configure pod networking (required for Kubernetes - skip if using UFW) sudo iptables -I FORWARD -s 10 .244.0.0/17 -d 10 .244.128.0/17 -j ACCEPT sudo iptables -I OUTPUT -s 10 .244.0.0/17 -d 10 .244.128.0/17 -j ACCEPT sudo iptables -I FORWARD -s 10 .244.128.0/17 -d 10 .244.0.0/17 -j ACCEPT sudo iptables -I OUTPUT -s 10 .244.128.0/17 -d 10 .244.0.0/17 -j ACCEPT sudo netfilter-persistent save # Load kernel modules (identical to RHEL requirements) sudo modprobe br_netfilter ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh overlay cat <<EOF | sudo tee /etc/modules-load.d/kubernetes.conf br_netfilter ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh overlay EOF sudo sysctl --system # Reboot and proceed with installation sudo reboot now Optional: If Using UFW UFW and iptables If using UFW, apply pod networking rules through UFW instead of direct iptables to avoid conflicts. # Install and configure UFW for Kubernetes ports sudo apt install -y ufw sudo ufw --force enable sudo ufw allow 6443 /tcp sudo ufw allow 2379 :2380/tcp sudo ufw allow 10250 ,10251,10252,10255,5473,10257,10259/tcp sudo ufw allow 30000 :32767/tcp sudo ufw allow 4789 /udp sudo ufw allow 179 /tcp # Configure pod networking through UFW (instead of direct iptables) sudo ufw route allow from 10 .244.0.0/17 to 10 .244.128.0/17 sudo ufw route allow from 10 .244.128.0/17 to 10 .244.0.0/17 sudo ufw reload After reboot, follow the installation guide .","title":"Ubuntu"},{"location":"netbox-enterprise/nbe-ec-requirements-ubuntu/#netbox-enterprise-requirements-for-ubuntu","text":"Ubuntu-specific preparation steps. See the main requirements document for general requirements and special cases. Firewall Configuration Choose either direct iptables (Required Commands) OR UFW (Optional section), not both, to avoid conflicts.","title":"NetBox Enterprise Requirements for Ubuntu"},{"location":"netbox-enterprise/nbe-ec-requirements-ubuntu/#tested-versions","text":"Ubuntu 22.04 LTS (Jammy Jellyfish) Ubuntu 24.04 LTS (Noble Numbat)","title":"Tested Versions"},{"location":"netbox-enterprise/nbe-ec-requirements-ubuntu/#required-commands-direct-iptables-approach","text":"# Disable swap sudo swapoff -a sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab # Install iptables-persistent sudo apt update && sudo apt install -y iptables-persistent # Configure pod networking (required for Kubernetes - skip if using UFW) sudo iptables -I FORWARD -s 10 .244.0.0/17 -d 10 .244.128.0/17 -j ACCEPT sudo iptables -I OUTPUT -s 10 .244.0.0/17 -d 10 .244.128.0/17 -j ACCEPT sudo iptables -I FORWARD -s 10 .244.128.0/17 -d 10 .244.0.0/17 -j ACCEPT sudo iptables -I OUTPUT -s 10 .244.128.0/17 -d 10 .244.0.0/17 -j ACCEPT sudo netfilter-persistent save # Load kernel modules (identical to RHEL requirements) sudo modprobe br_netfilter ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh overlay cat <<EOF | sudo tee /etc/modules-load.d/kubernetes.conf br_netfilter ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh overlay EOF sudo sysctl --system # Reboot and proceed with installation sudo reboot now","title":"Required Commands (Direct iptables approach)"},{"location":"netbox-enterprise/nbe-ec-requirements-ubuntu/#optional-if-using-ufw","text":"UFW and iptables If using UFW, apply pod networking rules through UFW instead of direct iptables to avoid conflicts. # Install and configure UFW for Kubernetes ports sudo apt install -y ufw sudo ufw --force enable sudo ufw allow 6443 /tcp sudo ufw allow 2379 :2380/tcp sudo ufw allow 10250 ,10251,10252,10255,5473,10257,10259/tcp sudo ufw allow 30000 :32767/tcp sudo ufw allow 4789 /udp sudo ufw allow 179 /tcp # Configure pod networking through UFW (instead of direct iptables) sudo ufw route allow from 10 .244.0.0/17 to 10 .244.128.0/17 sudo ufw route allow from 10 .244.128.0/17 to 10 .244.0.0/17 sudo ufw reload After reboot, follow the installation guide .","title":"Optional: If Using UFW"},{"location":"netbox-enterprise/nbe-ec-requirements/","text":"NetBox Enterprise Requirements Host system requirements Recommended The following are the recommended system requirements for a production deployment of NetBox Enterprise running two replicas. For larger environments with more replicas, additional resources should be allocated. 8 Virtual CPU (vCPU) 24 GB Memory (RAM) 100 GB SSD free disk space in /var/lib disable swap if enabled Note For non-production deployments of NetBox Enterprise, the minimum system requirements can be reduced to 4 Virtual CPU (vCPU) and 16 GB Memory (RAM). All other requirements remain the same. Host operating system Linux (Kernel versions 4.3 and above) Note For Red Hat Enterprise Linux (RHEL) deployments please see additional requirements here . Note For Ubuntu deployments please see additional requirements here . Architecture x86-64 Special Cases for Restricted Environments In some restricted environments, you will need to take additional steps alongside the basic installation instructions . Traditional Proxies As of version 1.6.0, NetBox Enterprise supports installing through proxies using the following configuration. Proxy Configuration Before you can install, you must configure your proxy to allow the following hostnames: app.enterprise.netboxlabs.com get.enterprise.netboxlabs.com proxy.enterprise.netboxlabs.com registry.enterprise.netboxlabs.com replicated.app proxy.replicated.com *.enterprise.netboxlabs.com They are required to access various resources used in the NetBox Enterprise installation. Installation Once you have configured your proxy to allow access to the NetBox Enterprise hosts, you will need to pass some additional arguments to the NetBox Enterprise installer when following the basic installation instructions . Note NetBox Enterprise will not inherit proxy settings from the shell environment, they must be explicitly provided on the installation command-line. --http-proxy <proxy-url> and --https-proxy <proxy-url> The proxy url should be a complete URL to reach the proxy. (eg, http://myhost:8888 ) --no-proxy By default, the installer will automatically disable proxying on the internal cluster addresses, as well as the default network interface on your host. In some cases, if the installer can't autodetect an interface or if you have a more complicated network, you may need to specify this manually. It should be in the form of a comma-separated list of addresses with CIDR netmasks ( 1.2.3.4/32 ), or domains ( foo.com , *.bar.com ). Man-In-The-Middle (MITM) Proxies If you are using a MITM proxy (ie, one which uses an internal TLS certificate authority for communication with the proxy, rather than directly passing encrypted traffic), you will need an additional option: --private-ca </path/to/private-ca-bundle> This will allow the cluster to accept traffic that has been encrypted using your internal CA. Firewalld If you are using Firewalld (commonly found on RHEL installations), you will need to create a zone for the cluster before installing. Determine any host IP addresses or networks (external or otherwise) that might need access to the cluster. Create a file called /etc/firewalld/zones/netbox-enterprise.xml with the following contents: ```xml netbox-enterprise Zone for NetBox Enterprise communication ``` In the spot where it says <!-- HOST IP ADDRESSES GO HERE --> , add a <source /> tag for each host or network you want to allow. For example, if your external IP is 1.2.3.4 , and you also have a private class C network 192.168.123.0 , you would add two lines: <source address= \"1.2.3.4/32\" /> <source address= \"192.168.123.0/24\" /> Run sudo firewall-cmd --reload to load the zone configuration. Then you can follow the basic installation instructions as normal. SELinux There are two steps to installing with SELinux enabled with enforcement turned on. First, before you install NetBox Enterprise, run: sudo setenforce 0 This will temporarily disable SELinux enforcement until you explicitly reenable it or reboot. Next, follow the basic installation instructions . Finally, run the following commands to make sure your NetBox Enterprise installation is accessible with enforcement enabled: export EC_DIR = \"/var/lib/embedded-cluster\" export KUBE_DIR = \" ${ EC_DIR } /k0s\" # tell SELinux the Cluster directory is owned by Containerd sudo semanage fcontext -a -t container_var_lib_t \" ${ EC_DIR } \" sudo restorecon -R -v \" ${ EC_DIR } \" # additionally, binaries should be allowed to execute sudo semanage fcontext -a -t container_runtime_exec_t \" ${ KUBE_DIR } /bin/containerd.*\" sudo semanage fcontext -a -t container_runtime_exec_t \" ${ KUBE_DIR } /bin/runc\" sudo restorecon -R -v \" ${ KUBE_DIR } /bin\" # fix permissions for containerd and restrict some folders to read-only sudo semanage fcontext -a -t container_var_lib_t \" ${ KUBE_DIR } /containerd(/.*)?\" sudo semanage fcontext -a -t container_ro_file_t \" ${ KUBE_DIR } /containerd/io.containerd.snapshotter.*/snapshots(/.*)?\" sudo restorecon -R -v ${ KUBE_DIR } /containerd You can then reboot, or run sudo setenforce 1 to put your system back into a normal state.","title":"Requirements"},{"location":"netbox-enterprise/nbe-ec-requirements/#netbox-enterprise-requirements","text":"","title":"NetBox Enterprise Requirements"},{"location":"netbox-enterprise/nbe-ec-requirements/#host-system-requirements","text":"","title":"Host system requirements"},{"location":"netbox-enterprise/nbe-ec-requirements/#host-operating-system","text":"Linux (Kernel versions 4.3 and above) Note For Red Hat Enterprise Linux (RHEL) deployments please see additional requirements here . Note For Ubuntu deployments please see additional requirements here .","title":"Host operating system"},{"location":"netbox-enterprise/nbe-ec-requirements/#architecture","text":"x86-64","title":"Architecture"},{"location":"netbox-enterprise/nbe-ec-requirements/#special-cases-for-restricted-environments","text":"In some restricted environments, you will need to take additional steps alongside the basic installation instructions .","title":"Special Cases for Restricted Environments"},{"location":"netbox-enterprise/nbe-ec-requirements/#traditional-proxies","text":"As of version 1.6.0, NetBox Enterprise supports installing through proxies using the following configuration.","title":"Traditional Proxies"},{"location":"netbox-enterprise/nbe-ec-requirements/#man-in-the-middle-mitm-proxies","text":"If you are using a MITM proxy (ie, one which uses an internal TLS certificate authority for communication with the proxy, rather than directly passing encrypted traffic), you will need an additional option: --private-ca </path/to/private-ca-bundle> This will allow the cluster to accept traffic that has been encrypted using your internal CA.","title":"Man-In-The-Middle (MITM) Proxies"},{"location":"netbox-enterprise/nbe-ec-requirements/#firewalld","text":"If you are using Firewalld (commonly found on RHEL installations), you will need to create a zone for the cluster before installing. Determine any host IP addresses or networks (external or otherwise) that might need access to the cluster. Create a file called /etc/firewalld/zones/netbox-enterprise.xml with the following contents: ```xml netbox-enterprise Zone for NetBox Enterprise communication ``` In the spot where it says <!-- HOST IP ADDRESSES GO HERE --> , add a <source /> tag for each host or network you want to allow. For example, if your external IP is 1.2.3.4 , and you also have a private class C network 192.168.123.0 , you would add two lines: <source address= \"1.2.3.4/32\" /> <source address= \"192.168.123.0/24\" /> Run sudo firewall-cmd --reload to load the zone configuration. Then you can follow the basic installation instructions as normal.","title":"Firewalld"},{"location":"netbox-enterprise/nbe-ec-requirements/#selinux","text":"There are two steps to installing with SELinux enabled with enforcement turned on. First, before you install NetBox Enterprise, run: sudo setenforce 0 This will temporarily disable SELinux enforcement until you explicitly reenable it or reboot. Next, follow the basic installation instructions . Finally, run the following commands to make sure your NetBox Enterprise installation is accessible with enforcement enabled: export EC_DIR = \"/var/lib/embedded-cluster\" export KUBE_DIR = \" ${ EC_DIR } /k0s\" # tell SELinux the Cluster directory is owned by Containerd sudo semanage fcontext -a -t container_var_lib_t \" ${ EC_DIR } \" sudo restorecon -R -v \" ${ EC_DIR } \" # additionally, binaries should be allowed to execute sudo semanage fcontext -a -t container_runtime_exec_t \" ${ KUBE_DIR } /bin/containerd.*\" sudo semanage fcontext -a -t container_runtime_exec_t \" ${ KUBE_DIR } /bin/runc\" sudo restorecon -R -v \" ${ KUBE_DIR } /bin\" # fix permissions for containerd and restrict some folders to read-only sudo semanage fcontext -a -t container_var_lib_t \" ${ KUBE_DIR } /containerd(/.*)?\" sudo semanage fcontext -a -t container_ro_file_t \" ${ KUBE_DIR } /containerd/io.containerd.snapshotter.*/snapshots(/.*)?\" sudo restorecon -R -v ${ KUBE_DIR } /containerd You can then reboot, or run sudo setenforce 1 to put your system back into a normal state.","title":"SELinux"},{"location":"netbox-enterprise/nbe-ldap/","text":"LDAP Configuration for NetBox Enterprise In the Admin Console for NetBox Enterprise, navigate to the Config tab and scroll to the bottom to check Advanced Settings Apply the following into NetBox Python Configuration Overrides REMOTE_AUTH_ENABLED = True REMOTE_AUTH_BACKEND = 'netbox.authentication.LDAPBackend' REMOTE_AUTH_CREATE_USER = True Apply the following into NetBox Environment Overrides , replacing the relevant information specific to your environment AUTH_LDAP_SERVER_URI : \"ldaps://xxxxxxx:636\" AUTH_LDAP_BIND_DN : \"cn=administrator,cn=users,DC=nifry,DC=local\" AUTH_LDAP_BIND_PASSWORD : \"xxxxxx\" AUTH_LDAP_CONNECTION_OPTIONS : \"{ ldap.OPT_REFERRALS: 0 }\" AUTH_LDAP_USER_SEARCH_BASEDN : \"cn=users,dc=nifry,dc=local\" AUTH_LDAP_USER_SEARCH : 'LDAPSearch(\"cn=users,dc=nifry,dc=local\", ldap.SCOPE_SUBTREE, \"sAMAccountName= %(user)s \")' AUTH_LDAP_GROUP_TYPE : \"NestedGroupOfNamesType\" AUTH_LDAP_GROUP_SEARCH_BASEDN : \"cn=users,DC=nifry,DC=local\" AUTH_LDAP_FIND_GROUP_PERMS : true AUTH_LDAP_MIRROR_GROUPS : true AUTH_LDAP_REQUIRE_GROUP_DN : \"CN=Netbox Users,CN=Users,DC=nifry,DC=local\" AUTH_LDAP_IS_ADMIN_DN : \"CN=Netbox Admins,CN=Users,DC=nifry,DC=local\" AUTH_LDAP_IS_SUPERUSER_DN : \"CN=Netbox Superusers,CN=Users,DC=nifry,DC=local\" AUTH_LDAP_CACHE_TIMEOUT : 0 LDAP_IGNORE_CERT_ERRORS : true Here's how it should look in the end","title":"LDAP"},{"location":"netbox-enterprise/nbe-ldap/#ldap-configuration-for-netbox-enterprise","text":"In the Admin Console for NetBox Enterprise, navigate to the Config tab and scroll to the bottom to check Advanced Settings Apply the following into NetBox Python Configuration Overrides REMOTE_AUTH_ENABLED = True REMOTE_AUTH_BACKEND = 'netbox.authentication.LDAPBackend' REMOTE_AUTH_CREATE_USER = True Apply the following into NetBox Environment Overrides , replacing the relevant information specific to your environment AUTH_LDAP_SERVER_URI : \"ldaps://xxxxxxx:636\" AUTH_LDAP_BIND_DN : \"cn=administrator,cn=users,DC=nifry,DC=local\" AUTH_LDAP_BIND_PASSWORD : \"xxxxxx\" AUTH_LDAP_CONNECTION_OPTIONS : \"{ ldap.OPT_REFERRALS: 0 }\" AUTH_LDAP_USER_SEARCH_BASEDN : \"cn=users,dc=nifry,dc=local\" AUTH_LDAP_USER_SEARCH : 'LDAPSearch(\"cn=users,dc=nifry,dc=local\", ldap.SCOPE_SUBTREE, \"sAMAccountName= %(user)s \")' AUTH_LDAP_GROUP_TYPE : \"NestedGroupOfNamesType\" AUTH_LDAP_GROUP_SEARCH_BASEDN : \"cn=users,DC=nifry,DC=local\" AUTH_LDAP_FIND_GROUP_PERMS : true AUTH_LDAP_MIRROR_GROUPS : true AUTH_LDAP_REQUIRE_GROUP_DN : \"CN=Netbox Users,CN=Users,DC=nifry,DC=local\" AUTH_LDAP_IS_ADMIN_DN : \"CN=Netbox Admins,CN=Users,DC=nifry,DC=local\" AUTH_LDAP_IS_SUPERUSER_DN : \"CN=Netbox Superusers,CN=Users,DC=nifry,DC=local\" AUTH_LDAP_CACHE_TIMEOUT : 0 LDAP_IGNORE_CERT_ERRORS : true Here's how it should look in the end","title":"LDAP Configuration for NetBox Enterprise"},{"location":"netbox-enterprise/nbe-migrating/","text":"Migrating to NetBox Enterprise Migrating from NetBox open source to NetBox Labs Enterprise is a simple and efficient process. Because NetBox Enterprise is built on the same open source platform, database imports can be completed quickly, enabling a smooth transition. Database Compatibility Check The database being migrated must match the major and minor version of the NetBox deployed with NetBox Enterprise. NetBox Labs support can upgrade older databases on your behalf to assist in the migration process. Exporting the Open Source Database Use the following command to export your existing NetBox database: pg_dump --username netbox --password --host localhost netbox > netbox.pgsql Info Notify the NetBox Labs team if you used any additional flags for the 'pg_dump' command, or if you exported the data to a different format. Importing the Database to NetBox Enterprise Follow the steps outlined here to import the database into NetBox Enterprise. Media Files (Optional) If images and/or scripts are used in your NetBox, migrate them to the NetBox Labs deployment. Info The steps below assume the default paths used by the open source deployment. If the Media or Scripts locations have been changed with the MEDIA_ROOT or SCRIPTS_ROOT parameters in configuration.py, modify the following steps according to those paths. Images Locate existing images in your open source installation's media root directory: cd /opt/netbox/netbox/ && ls -lR media Copy and transfer the entire media directory to the NetBox Enterprise server. Enable the NetBox Enterprise shell and identify a running netbox-enterprise pod: sudo ./netbox-enterprise shell kubectl get pods -n kotsadm NAME READY STATUS RESTARTS AGE kotsadm-54bbd64487-dkj6t 1/1 Running 1 (24h ago) 3d18h kotsadm-rqlite-0 1/1 Running 1 (24h ago) 3d18h kurl-proxy-kotsadm-6c7c96b4cb-66p6g 1/1 Running 2 (24h ago) 3d18h netbox-enterprise-backup-labeler-29028255-rxlzm 0/1 Completed 0 39m netbox-enterprise-backup-labeler-29028270-7x2w8 0/1 Completed 0 24m netbox-enterprise-backup-labeler-29028285-xqqn6 0/1 Completed 0 9m34s ----> netbox-enterprise-c769578d5-f9kl7 1/1 Running 1 (24h ago) 24h netbox-enterprise-housekeeping-29023200-mm7wd 0/1 Completed 0 3d12h netbox-enterprise-housekeeping-29024640-9zq9s 0/1 Completed 0 2d12h netbox-enterprise-housekeeping-29026080-dxb6j 0/1 Completed 0 36h netbox-enterprise-housekeeping-29027520-fj7zk 0/1 Completed 0 12h netbox-enterprise-postgres-cluster-instance1-59f8-0 2/2 Running 2 (24h ago) 3d16h netbox-enterprise-redis-no-persistence-master-0 2/2 Running 2 (24h ago) 3d17h netbox-enterprise-redis-no-persistence-replicas-0 2/2 Running 2 (24h ago) 3d17h netbox-enterprise-worker-589cf884c4-z57pg 1/1 Running 2 (24h ago) 3d16h pgo-88dccd7c9-w766g 1/1 Running 1 (24h ago) 3d17h replicated-56c85b569f-b22hm 1/1 Running 1 (24h ago) 3d16h Copy the media directory contents into the pod. kubectl cp -n kotsadm ./media netbox-enterprise-c769578d5-f9kl7:/opt/netbox/netbox Note Pod names are randomly generated and need to be identified. If multiple replicas are running, select any pod with the pattern \"netbox-enterprise-########-XXXXX\" Scripts Locate existing scripts in your open source installation's scripts root directory: cd /opt/netbox/netbox/ && ls -lR scripts Copy and transfer scripts onto an endpoint with access to the NetBox Enterprise web interface. Login to NetBox Enterprise and navigate to Customization > Scripts . Click Add and upload the first script. Repeat the previous step for any remaining scripts.","title":"Migrating"},{"location":"netbox-enterprise/nbe-migrating/#migrating-to-netbox-enterprise","text":"Migrating from NetBox open source to NetBox Labs Enterprise is a simple and efficient process. Because NetBox Enterprise is built on the same open source platform, database imports can be completed quickly, enabling a smooth transition.","title":"Migrating to NetBox Enterprise"},{"location":"netbox-enterprise/nbe-migrating/#database","text":"Compatibility Check The database being migrated must match the major and minor version of the NetBox deployed with NetBox Enterprise. NetBox Labs support can upgrade older databases on your behalf to assist in the migration process.","title":"Database"},{"location":"netbox-enterprise/nbe-migrating/#exporting-the-open-source-database","text":"Use the following command to export your existing NetBox database: pg_dump --username netbox --password --host localhost netbox > netbox.pgsql Info Notify the NetBox Labs team if you used any additional flags for the 'pg_dump' command, or if you exported the data to a different format.","title":"Exporting the Open Source Database"},{"location":"netbox-enterprise/nbe-migrating/#importing-the-database-to-netbox-enterprise","text":"Follow the steps outlined here to import the database into NetBox Enterprise.","title":"Importing the Database to NetBox Enterprise"},{"location":"netbox-enterprise/nbe-migrating/#media-files-optional","text":"If images and/or scripts are used in your NetBox, migrate them to the NetBox Labs deployment. Info The steps below assume the default paths used by the open source deployment. If the Media or Scripts locations have been changed with the MEDIA_ROOT or SCRIPTS_ROOT parameters in configuration.py, modify the following steps according to those paths.","title":"Media Files (Optional)"},{"location":"netbox-enterprise/nbe-migrating/#images","text":"Locate existing images in your open source installation's media root directory: cd /opt/netbox/netbox/ && ls -lR media Copy and transfer the entire media directory to the NetBox Enterprise server. Enable the NetBox Enterprise shell and identify a running netbox-enterprise pod: sudo ./netbox-enterprise shell kubectl get pods -n kotsadm NAME READY STATUS RESTARTS AGE kotsadm-54bbd64487-dkj6t 1/1 Running 1 (24h ago) 3d18h kotsadm-rqlite-0 1/1 Running 1 (24h ago) 3d18h kurl-proxy-kotsadm-6c7c96b4cb-66p6g 1/1 Running 2 (24h ago) 3d18h netbox-enterprise-backup-labeler-29028255-rxlzm 0/1 Completed 0 39m netbox-enterprise-backup-labeler-29028270-7x2w8 0/1 Completed 0 24m netbox-enterprise-backup-labeler-29028285-xqqn6 0/1 Completed 0 9m34s ----> netbox-enterprise-c769578d5-f9kl7 1/1 Running 1 (24h ago) 24h netbox-enterprise-housekeeping-29023200-mm7wd 0/1 Completed 0 3d12h netbox-enterprise-housekeeping-29024640-9zq9s 0/1 Completed 0 2d12h netbox-enterprise-housekeeping-29026080-dxb6j 0/1 Completed 0 36h netbox-enterprise-housekeeping-29027520-fj7zk 0/1 Completed 0 12h netbox-enterprise-postgres-cluster-instance1-59f8-0 2/2 Running 2 (24h ago) 3d16h netbox-enterprise-redis-no-persistence-master-0 2/2 Running 2 (24h ago) 3d17h netbox-enterprise-redis-no-persistence-replicas-0 2/2 Running 2 (24h ago) 3d17h netbox-enterprise-worker-589cf884c4-z57pg 1/1 Running 2 (24h ago) 3d16h pgo-88dccd7c9-w766g 1/1 Running 1 (24h ago) 3d17h replicated-56c85b569f-b22hm 1/1 Running 1 (24h ago) 3d16h Copy the media directory contents into the pod. kubectl cp -n kotsadm ./media netbox-enterprise-c769578d5-f9kl7:/opt/netbox/netbox Note Pod names are randomly generated and need to be identified. If multiple replicas are running, select any pod with the pattern \"netbox-enterprise-########-XXXXX\"","title":"Images"},{"location":"netbox-enterprise/nbe-migrating/#scripts","text":"Locate existing scripts in your open source installation's scripts root directory: cd /opt/netbox/netbox/ && ls -lR scripts Copy and transfer scripts onto an endpoint with access to the NetBox Enterprise web interface. Login to NetBox Enterprise and navigate to Customization > Scripts . Click Add and upload the first script. Repeat the previous step for any remaining scripts.","title":"Scripts"},{"location":"netbox-enterprise/nbe-overview/","tags":["enterprise","community","netbox","kubernetes","administration","operations","installation","integration"],"text":"NetBox Enterprise Overview NetBox Enterprise is a distribution of NetBox built by NetBox Labs for organizations deploying NetBox in their own infrastructure. NetBox Enterprise users gain a simplified installation and upgrade process, as well as advanced features and integrations not available in the community editon of NetBox. The NetBox Enterprise installer provides a fully managed, hands-off installation experience for installing NetBox Enterprise, including deploying and managing an underlying Kubernetes cluster. A bare Linux operating system with adequately sized compute resources is the only requirement. NetBox Enterprise installer deployments deliver all the components and dependencies required to deploy and operate NetBox, including databases, application servers, application load balancers, and object stores. This deployment still provides the flexibility of leveraging external components, such as a PostgreSQL cluster or a Redis key-value store. See the NetBox Enterprise Installation guide for more details.","title":"Overview"},{"location":"netbox-enterprise/nbe-overview/#netbox-enterprise","text":"","title":"NetBox Enterprise"},{"location":"netbox-enterprise/nbe-overview/#overview","text":"NetBox Enterprise is a distribution of NetBox built by NetBox Labs for organizations deploying NetBox in their own infrastructure. NetBox Enterprise users gain a simplified installation and upgrade process, as well as advanced features and integrations not available in the community editon of NetBox. The NetBox Enterprise installer provides a fully managed, hands-off installation experience for installing NetBox Enterprise, including deploying and managing an underlying Kubernetes cluster. A bare Linux operating system with adequately sized compute resources is the only requirement. NetBox Enterprise installer deployments deliver all the components and dependencies required to deploy and operate NetBox, including databases, application servers, application load balancers, and object stores. This deployment still provides the flexibility of leveraging external components, such as a PostgreSQL cluster or a Redis key-value store. See the NetBox Enterprise Installation guide for more details.","title":"Overview"},{"location":"netbox-enterprise/nbe-release-notes/","text":"NetBox Enterprise 1.x Release Notes 1.10.1/1.10.2 Minor releases to fix a number of issues with Diode and Assurance integration. Bug Fixes db: move postgresql permissions-setting to an init diode: backport runtime-secret script from 1.11 netbox: make sure netbox refreshes when override hostname changes redis: remove redis modules no longer needed for diode Features config: add hostname override to the KOTS config config: show Diode/Assurance license status in KOTS UI diode: add deployments and services for diode components in replicated-app.yaml Versions This release uses the following upstream software: NetBox 4.2.9 Redis 7.4.2 (if built-in Redis is enabled) PostgreSQL 16.8 (if built-in database is enabled) Diode 1.2.0 Plugins The following plugins are included in this release: Plugin Config Name Version Certified netbox-acls netbox_acls 1.8.1 \u2611\ufe0e netbox-bgp netbox_bgp 0.15.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.9.0 \u2610 netbox-documents netbox_documents 0.7.2 \u2610 netbox-floorplan-plugin netbox_floorplan 0.6.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.6 \u2610 netbox-inventory netbox_inventory 2.3.0 \u2610 netbox-lifecycle netbox_lifecycle 1.1.5 \u2610 netbox-plugin-dns netbox_dns 1.2.6 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.17 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.2.0 \u2611\ufe0e netbox-topology-views netbox_topology_views 4.2.1 \u2611\ufe0e netbox-validity validity 3.1.3 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 1.1.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.6 \u2611\ufe0e slurpit_netbox slurpit_netbox 1.1.13 \u2611\ufe0e 1.10.0 This in the first release to include Diode and the NetBox Assurance plugin. Features cluster: import basic diode chart cluster: only pull images if necessary diode: add diode chart dependency and enable configuration diode: add diode reconciler and ingester configuration to netbox enterprise chart diode: add proxy to diode image pull diode: auto-configure diode plugin in netbox config diode: always update the host secret diode: bump assurance plugin to 1.0.1 diode: change diode/hydra to use NBE PostgreSQL diode: configure plugin based on ingress hostname diode: don't auto-apply changesets if assurance is enabled diode: generate a secret containing the external host reliably diode: wait for backend to be running before configuring the diode plugin docker: switch chart to use production (1.20.0) nbe image Versions This release uses the following upstream software: NetBox 4.2.9 Redis 7.4.2 (if built-in Redis is enabled) PostgreSQL 16.8 (if built-in database is enabled) Diode 1.2.0 Plugins The following plugins are included in this release: Plugin Config Name Version Certified netbox-acls netbox_acls 1.8.1 \u2611\ufe0e netbox-bgp netbox_bgp 0.15.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.9.0 \u2610 netbox-documents netbox_documents 0.7.2 \u2610 netbox-floorplan-plugin netbox_floorplan 0.6.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.6 \u2610 netbox-inventory netbox_inventory 2.3.0 \u2610 netbox-lifecycle netbox_lifecycle 1.1.5 \u2610 netbox-plugin-dns netbox_dns 1.2.6 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.17 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.2.0 \u2610 netbox-topology-views netbox_topology_views 4.2.1 \u2611\ufe0e netbox-validity validity 3.1.3 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 1.0.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.4 \u2611\ufe0e slurpit_netbox slurpit_netbox 1.1.13 \u2611\ufe0e 1.9.3 Fix a bug that caused failure to download resources in airgap and proxied environments. Also includes an updated Branching plugin that fixes a number of bugs. Bug Fixes cluster: clean up proxy references for dependencies Versions This release uses the following upstream software: NetBox 4.2.9 Redis 7.4.2 (if built-in Redis is enabled) PostgreSQL 16.8 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified netbox-acls netbox_acls 1.8.1 \u2611\ufe0e netbox-bgp netbox_bgp 0.15.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.9.0 \u2610 netbox-documents netbox_documents 0.7.2 \u2610 netbox-floorplan-plugin netbox_floorplan 0.6.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.6 \u2610 netbox-inventory netbox_inventory 2.3.0 \u2610 netbox-lifecycle netbox_lifecycle 1.1.5 \u2610 netbox-plugin-dns netbox_dns 1.2.6 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.17 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.2.0 \u2611\ufe0e netbox-topology-views netbox_topology_views 4.2.1 \u2611\ufe0e netbox-validity validity 3.1.3 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 1.1.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.6 \u2610 slurpit_netbox slurpit_netbox 1.1.13 \u2611\ufe0e 1.9.2 Updates NetBox to 4.2.9, plus includes an update to the cluster software which improves the handling of upgrades. NOTE: This update will upgrade NetBox to 4.2.9. If you have custom plugins installed, you will need to upgrade to NetBox Enterprise 1.9.2 and then create a new wheelhouse that contains plugins compatible with 4.2.9. Please review the upstream NetBox release notes from your current version through 4.2.9 for a complete list of breaking changes, enhancements, and bug fixes. Features cluster: bump to 2.4.0 netbox: bump to NetBox 4.2.9 Versions This release uses the following upstream software: * NetBox 4.2.9 * Redis 7.4.2 (if built-in Redis is enabled) * PostgreSQL 16.8 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified netbox-acls netbox_acls 1.8.1 \u2611\ufe0e netbox-bgp netbox_bgp 0.15.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.9.0 \u2610 netbox-documents netbox_documents 0.7.1 \u2610 netbox-floorplan-plugin netbox_floorplan 0.6.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.6 \u2610 netbox-inventory netbox_inventory 2.3.0 \u2610 netbox-lifecycle netbox_lifecycle 1.1.5 \u2610 netbox-plugin-dns netbox_dns 1.2.6 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.17 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.2.0 \u2610 netbox-topology-views netbox_topology_views 4.2.1 \u2611\ufe0e netbox-validity validity 3.1.3 \u2610 netboxlabs-netbox-branching netbox_branching 0.5.4 \u2611\ufe0e slurpit_netbox slurpit_netbox 1.1.13 \u2611\ufe0e 1.9.1 A minor release that contains build process updates under the covers, plus the Python XML fixes introduced in NetBox Enterprise 1.8.6. Versions This release uses the following upstream software: * NetBox 4.2.6 * Redis 7.4.2 (if built-in Redis is enabled) * PostgreSQL 16.8 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified netbox-acls netbox_acls 1.8.1 \u2611\ufe0e netbox-bgp netbox_bgp 0.15.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.9.0 \u2610 netbox-documents netbox_documents 0.7.1 \u2610 netbox-floorplan-plugin netbox_floorplan 0.6.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.6 \u2610 netbox-inventory netbox_inventory 2.3.0 \u2610 netbox-lifecycle netbox_lifecycle 1.1.5 \u2610 netbox-plugin-dns netbox_dns 1.2.6 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.17 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.2.0 \u2610 netbox-topology-views netbox_topology_views 4.2.1 \u2611\ufe0e netbox-validity validity 3.1.3 \u2610 netboxlabs-netbox-branching netbox_branching 0.5.4 \u2611\ufe0e slurpit_netbox slurpit_netbox 1.1.13 \u2611\ufe0e 1.9.0 Updates the embedded NetBox to 4.2.6. Also upgrades a number of dependencies to their latest versions, adds some extra system consistency validation checks, and reduces the number of proxied domains necessary to install NetBox Enterprise. Bug Fixes netbox: update to docker image with pydantic fix (NBE-185) add exit statements for better error handling in configmap-executable.yaml adjust formatting in cronjob-backup-labeler.yaml for consistency remove branch reference for command bar disabling from CI workflow and update Docker image tag remove unnecessary conditional for nodeSelector in cronjob-backup-labeler.yaml replace hardcoded imagePullPolicy with configurable value in cronjob-backup-labeler.yaml restore TTL and backoff limit in backup labeler CronJob configuration update Docker image tag to indicate command bar disabling update imagePullPolicy to 'IfNotPresent' in cronjob-backup-labeler.yaml update system validation query to use jq and change backup labeler image to netboxlabs/nbe-utils:latest update system validation query image version to netboxlabs/nbe-utils:1 Features add CronJob for netbox sidecar task to do system validation add system validation check CronJob with service account and role binding add TTL and backoff limit to backup labeler CronJob configuration cluster: add settings for the improved proxy support cluster: update to 2.3.1 config: create some macros for nbe-utils and replace busybox deps: update pgo to 5.7.4, replicated-sdk to 1.5.0 increase replicas for postgres instance to improve availability netbox: bump to netbox 4.2.6 and ensure versions are correct rename replicas_node_count to node_count for consistency in postgres configuration update backup labeler configuration with TTL and backoff limit update backup labeler to routines labeler and improve system validation error handling update dependencies in Chart.lock for netbox-enterprise update netbox sidecar CronJob to run every 5 minutes and improve error handling update postgres replica configuration to use dynamic node count Versions This release uses the following upstream software: * NetBox 4.2.6 * Redis 7.4.2 (if built-in Redis is enabled) * PostgreSQL 16.8 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified netbox-acls netbox_acls 1.8.1 \u2611\ufe0e netbox-bgp netbox_bgp 0.15.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.9.0 \u2610 netbox-documents netbox_documents 0.7.1 \u2610 netbox-floorplan-plugin netbox_floorplan 0.6.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.6 \u2610 netbox-inventory netbox_inventory 2.3.0 \u2610 netbox-lifecycle netbox_lifecycle 1.1.5 \u2610 netbox-plugin-dns netbox_dns 1.2.6 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.17 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.2.0 \u2610 netbox-topology-views netbox_topology_views 4.2.1 \u2611\ufe0e netbox-validity validity 3.1.3 \u2610 netboxlabs-netbox-branching netbox_branching 0.5.4 \u2611\ufe0e 1.8.6 Contains a fix for mismatched XML modules used by some 3rd-party plugins. Bug Fixes docker: ignore low-priority trivy warning about KOTS dep docker: make sure lxml and xmlsec match (NBE-193) Versions This release uses the following upstream software: * NetBox 4.1.11 * Redis 7.4.2 (if built-in database is enabled) * PostgreSQL 16.8 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified nbrisk nb_risk 41.0.1 \u2610 netbox-acls netbox_acls 1.7.0 \u2611\ufe0e netbox-bgp netbox_bgp 0.14.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.8.0 \u2610 netbox-documents netbox_documents 0.7.0 \u2610 netbox-floorplan-plugin netbox_floorplan 0.5.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.4 \u2610 netbox-inventory netbox_inventory 2.2.1 \u2610 netbox-lifecycle netbox_lifecycle 1.1.3 \u2610 netbox-plugin-dns netbox_dns 1.1.7 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.15 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.1.2 \u2610 netbox-topology-views netbox_topology_views 4.1.0 \u2611\ufe0e netbox-validity validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.3 \u2611\ufe0e phonebox-plugin phonebox_plugin 0.0.10 \u2610 slurpit_netbox slurpit_netbox 1.0.45 \u2611\ufe0e 1.8.5 Contains a fix for upgrades freezing in some situations. Bug Fixes cluster: remove unnecessary repository entry in ingress-nginx config Versions This release uses the following upstream software: * NetBox 4.1.11 * Redis 7.4.2 (if built-in database is enabled) * PostgreSQL 16.8 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified nbrisk nb_risk 41.0.1 \u2610 netbox-acls netbox_acls 1.7.0 \u2611\ufe0e netbox-bgp netbox_bgp 0.14.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.8.0 \u2610 netbox-documents netbox_documents 0.7.0 \u2610 netbox-floorplan-plugin netbox_floorplan 0.5.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.4 \u2610 netbox-inventory netbox_inventory 2.2.1 \u2610 netbox-lifecycle netbox_lifecycle 1.1.3 \u2610 netbox-plugin-dns netbox_dns 1.1.7 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.15 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.1.2 \u2610 netbox-topology-views netbox_topology_views 4.1.0 \u2611\ufe0e netbox-validity validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.3 \u2611\ufe0e phonebox-plugin phonebox_plugin 0.0.10 \u2610 slurpit_netbox slurpit_netbox 1.0.45 \u2611\ufe0e 1.8.4 Provides a number of updates to custom plugin installation, as well as other small enhancements and bug fixes, included in the 1.7.x series, most notably the security fix for the ingress-nginx controller (CVE-2025-1974). Bug Fixes cluster: properly show \"ready\" in restore mode cluster: remove the admission controller from status checks cluster: repair some shellcheck issues, remove vestigial config netbox: a few small cosmetic fixes to plugin install netbox: improve plugin installation issues for custom tarballs Versions This release uses the following upstream software: * NetBox 4.1.11 * Redis 7.4.2 (if built-in database is enabled) * PostgreSQL 16.8 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified nbrisk nb_risk 41.0.1 \u2610 netbox-acls netbox_acls 1.7.0 \u2611\ufe0e netbox-bgp netbox_bgp 0.14.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.8.0 \u2610 netbox-documents netbox_documents 0.7.0 \u2610 netbox-floorplan-plugin netbox_floorplan 0.5.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.4 \u2610 netbox-inventory netbox_inventory 2.2.1 \u2610 netbox-lifecycle netbox_lifecycle 1.1.3 \u2610 netbox-plugin-dns netbox_dns 1.1.7 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.15 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.1.2 \u2610 netbox-topology-views netbox_topology_views 4.1.0 \u2611\ufe0e netbox-validity validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.3 \u2611\ufe0e phonebox-plugin phonebox_plugin 0.0.10 \u2610 slurpit_netbox slurpit_netbox 1.0.45 \u2611\ufe0e 1.8.3 Provides a number of updates to custom plugin installation, as well as other small enhancements and bug fixes, included in the 1.7.x series, most notably the security fix for the ingress-nginx controller (CVE-2025-1974). Bug Fixes cluster: properly show \"ready\" in restore mode netbox: a few small cosmetic fixes to plugin install repair some shellcheck issues, remove vestigial config Features cluster: make a label to tag pods supporting upload Versions This release uses the following upstream software: * NetBox 4.1.11 * Redis 7.4.2 (if built-in database is enabled) * PostgreSQL 16.6 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified nbrisk nb_risk 41.0.1 \u2610 netbox-acls netbox_acls 1.7.0 \u2611\ufe0e netbox-bgp netbox_bgp 0.14.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.8.0 \u2610 netbox-documents netbox_documents 0.7.0 \u2610 netbox-floorplan-plugin netbox_floorplan 0.5.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.4 \u2610 netbox-inventory netbox_inventory 2.2.1 \u2610 netbox-lifecycle netbox_lifecycle 1.1.3 \u2610 netbox-plugin-dns netbox_dns 1.1.7 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.15 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.1.2 \u2610 netbox-topology-views netbox_topology_views 4.1.0 \u2611\ufe0e netbox-validity validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.3 \u2611\ufe0e phonebox-plugin phonebox_plugin 0.0.10 \u2610 slurpit_netbox slurpit_netbox 1.0.45 \u2611\ufe0e 1.8.1 Fixes user creation, password validation, and group/SSO issues in NetBox. Bug Fixes netbox: use proper import location of the OWASP validator docker: fix nbce-common install, remove deprecated nbc_auth docker: make sure nbc_auth_extensions are in the right place Versions This release uses the following upstream software: * NetBox 4.1.11 * Redis 7.4.2 (if built-in database is enabled) * PostgreSQL 16.6 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified nbrisk nb_risk 41.0.1 \u2610 netbox-acls netbox_acls 1.7.0 \u2611\ufe0e netbox-bgp netbox_bgp 0.14.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.8.0 \u2610 netbox-documents netbox_documents 0.7.0 \u2610 netbox-floorplan-plugin netbox_floorplan 0.5.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.4 \u2610 netbox-inventory netbox_inventory 2.2.1 \u2610 netbox-lifecycle netbox_lifecycle 1.1.3 \u2610 netbox-plugin-dns netbox_dns 1.1.7 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.15 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.1.2 \u2610 netbox-topology-views netbox_topology_views 4.1.0 \u2611\ufe0e netbox-validity validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.3 \u2611\ufe0e phonebox-plugin phonebox_plugin 0.0.10 \u2610 slurpit_netbox slurpit_netbox 1.0.45 \u2611\ufe0e 1.8.0 Improves logging in the NetBox containers, and adds support for uploading custom plugins. Bug Fixes cluster: fixed a few pod label macros config: feedback - use bash for extra script safety config: remove vestigial validation mount Features config: adding log fixing branch to the CI workflow to create a release in Replicated config: allow uploading plugins for pip install Versions This release uses the following upstream software: * NetBox 4.1.11 * Redis 7.4.2 (if built-in database is enabled) * PostgreSQL 16.6 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified nbrisk nb_risk 41.0.1 \u2610 netbox-acls netbox_acls 1.7.0 \u2611\ufe0e netbox-bgp netbox_bgp 0.14.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.8.0 \u2610 netbox-documents netbox_documents 0.7.0 \u2610 netbox-floorplan-plugin netbox_floorplan 0.5.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.4 \u2610 netbox-inventory netbox_inventory 2.2.1 \u2610 netbox-lifecycle netbox_lifecycle 1.1.3 \u2610 netbox-plugin-dns netbox_dns 1.1.7 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.15 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.1.2 \u2610 netbox-topology-views netbox_topology_views 4.1.0 \u2611\ufe0e netbox-validity validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.3 \u2611\ufe0e phonebox-plugin phonebox_plugin 0.0.10 \u2610 slurpit_netbox slurpit_netbox 1.0.45 \u2611\ufe0e 1.7.6 Contains a fix for incorrect permissions in the media folder after restore from backup. Bug Fixes cluster: remove the admission controller from status checks netbox: make sure volume permissions are correct Versions This release uses the following upstream software: * NetBox 4.1.11 * Redis 7.4.2 (if built-in database is enabled) * PostgreSQL 16.8 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified nbrisk nb_risk 41.0.1 \u2610 netbox-acls netbox_acls 1.7.0 \u2611\ufe0e netbox-bgp netbox_bgp 0.14.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.8.0 \u2610 netbox-documents netbox_documents 0.7.0 \u2610 netbox-floorplan-plugin netbox_floorplan 0.5.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.4 \u2610 netbox-inventory netbox_inventory 2.2.1 \u2610 netbox-lifecycle netbox_lifecycle 1.1.3 \u2610 netbox-plugin-dns netbox_dns 1.1.7 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.15 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.1.2 \u2610 netbox-topology-views netbox_topology_views 4.1.0 \u2611\ufe0e netbox-validity validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.3 \u2611\ufe0e phonebox-plugin phonebox_plugin 0.0.10 \u2610 slurpit_netbox slurpit_netbox 1.0.45 \u2611\ufe0e 1.7.5 Contains a security fix for the ingress-nginx controller (CVE-2025-1974). Bug Fixes cluster: disable ingress-nginx admission controller Versions This release uses the following upstream software: * NetBox 4.1.11 * Redis 7.4.2 (if built-in database is enabled) * PostgreSQL 16.6 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified nbrisk nb_risk 41.0.1 \u2610 netbox-acls netbox_acls 1.7.0 \u2611\ufe0e netbox-bgp netbox_bgp 0.14.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.8.0 \u2610 netbox-documents netbox_documents 0.7.0 \u2610 netbox-floorplan-plugin netbox_floorplan 0.5.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.4 \u2610 netbox-inventory netbox_inventory 2.2.1 \u2610 netbox-lifecycle netbox_lifecycle 1.1.3 \u2610 netbox-plugin-dns netbox_dns 1.1.7 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.15 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.1.2 \u2610 netbox-topology-views netbox_topology_views 4.1.0 \u2611\ufe0e netbox-validity validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.2 \u2611\ufe0e phonebox-plugin phonebox_plugin 0.0.10 \u2610 slurpit_netbox slurpit_netbox 1.0.45 \u2611\ufe0e 1.7.4 Fix missing authentication plugins for group and SSO configs. Bug Fixes docker: make sure nbc_auth_extensions are in the right place Versions This release uses the following upstream software: * NetBox 4.1.11 * Redis 7.4.2 (if built-in database is enabled) * PostgreSQL 16.6 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified nbrisk nb_risk 41.0.1 \u2610 netbox-acls netbox_acls 1.7.0 \u2611\ufe0e netbox-bgp netbox_bgp 0.14.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.8.0 \u2610 netbox-documents netbox_documents 0.7.0 \u2610 netbox-floorplan-plugin netbox_floorplan 0.5.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.4 \u2610 netbox-inventory netbox_inventory 2.2.1 \u2610 netbox-lifecycle netbox_lifecycle 1.1.3 \u2610 netbox-plugin-dns netbox_dns 1.1.7 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.15 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.1.2 \u2610 netbox-topology-views netbox_topology_views 4.1.0 \u2611\ufe0e netbox-validity validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.3 \u2611\ufe0e phonebox-plugin phonebox_plugin 0.0.10 \u2610 slurpit_netbox slurpit_netbox 1.0.45 \u2611\ufe0e 1.7.3 Re-release of 1.7.2 with additional password validator fixes, plus reverting to a previous working redis chart. Bug Fixes netbox: use proper import location of the OWASP validator Versions This release uses the following upstream software: * NetBox 4.1.11 * Redis 7.4.2 (if built-in database is enabled) * PostgreSQL 16.6 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified nbrisk nb_risk 41.0.1 \u2610 netbox-acls netbox_acls 1.7.0 \u2611\ufe0e netbox-bgp netbox_bgp 0.14.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.8.0 \u2610 netbox-documents netbox_documents 0.7.0 \u2610 netbox-floorplan-plugin netbox_floorplan 0.5.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.4 \u2610 netbox-inventory netbox_inventory 2.2.1 \u2610 netbox-lifecycle netbox_lifecycle 1.1.3 \u2610 netbox-plugin-dns netbox_dns 1.1.7 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.15 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.1.2 \u2610 netbox-topology-views netbox_topology_views 4.1.0 \u2611\ufe0e netbox-validity validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.3 \u2611\ufe0e phonebox-plugin phonebox_plugin 0.0.10 \u2610 slurpit_netbox slurpit_netbox 1.0.45 \u2611\ufe0e 1.7.2 Fixes a bug where the custom password validator was missing. Bug Fixes docker: fix nbce-common install, remove deprecated nbc_auth Versions This release uses the following upstream software: * NetBox 4.1.11 * Redis 7.4.2 (if built-in database is enabled) * PostgreSQL 16.6 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified nbrisk nb_risk 41.0.1 \u2610 netbox-acls netbox_acls 1.7.0 \u2611\ufe0e netbox-bgp netbox_bgp 0.14.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.8.0 \u2610 netbox-documents netbox_documents 0.7.0 \u2610 netbox-floorplan-plugin netbox_floorplan 0.5.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.4 \u2610 netbox-inventory netbox_inventory 2.2.1 \u2610 netbox-lifecycle netbox_lifecycle 1.1.3 \u2610 netbox-plugin-dns netbox_dns 1.1.7 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.15 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.1.2 \u2610 netbox-topology-views netbox_topology_views 4.1.0 \u2611\ufe0e netbox-validity validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.3 \u2611\ufe0e phonebox-plugin phonebox_plugin 0.0.10 \u2610 slurpit_netbox slurpit_netbox 1.0.45 \u2611\ufe0e 1.7.1 Fixes a bug in downloading the ingress Helm chart when using a proxy for installation. Bug Fixes cluster: use the proxy to download the ingress chart Versions This release uses the following upstream software: * NetBox 4.1.11 * Redis 7.4.2 (if built-in database is enabled) * PostgreSQL 16.6 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified nbrisk nb_risk 41.0.1 \u2610 netbox-acls netbox_acls 1.7.0 \u2611\ufe0e netbox-bgp netbox_bgp 0.14.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.8.0 \u2610 netbox-documents netbox_documents 0.7.0 \u2610 netbox-floorplan-plugin netbox_floorplan 0.5.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.4 \u2610 netbox-inventory netbox_inventory 2.2.1 \u2610 netbox-lifecycle netbox_lifecycle 1.1.3 \u2610 netbox-plugin-dns netbox_dns 1.1.7 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.15 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.1.2 \u2610 netbox-topology-views netbox_topology_views 4.1.0 \u2611\ufe0e netbox-validity validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.2 \u2611\ufe0e phonebox-plugin phonebox_plugin 0.0.10 \u2610 slurpit_netbox slurpit_netbox 1.0.45 \u2611\ufe0e 1.7.0 Updates the embedded NetBox to 4.1.11. Also upgrades the cluster software, which brings many bug fixes and features, including better preflight checks, and a direct link to the NetBox UI from the admin console. Features cluster: update to 1.19.0 cluster: add a link to the NetBox UI from the admin console deps: update to NetBox 4.1.11 + latest NetBox chart Versions This release uses the following upstream software: * NetBox 4.1.11 * Redis 7.4.2 * PostgreSQL 16.6 (if built-in database is enabled) Plugins The following plugins are included in this release: Plugin Config Name Version Certified nbrisk nb_risk 41.0.1 \u2610 netbox-acls netbox_acls 1.7.0 \u2611\ufe0e netbox-bgp netbox_bgp 0.14.0 \u2611\ufe0e netbox-config-diff netbox_config_diff 2.8.0 \u2610 netbox-documents netbox_documents 0.7.0 \u2610 netbox-floorplan-plugin netbox_floorplan 0.5.0 \u2611\ufe0e netbox-interface-synchronization netbox_interface_synchronization 4.1.4 \u2610 netbox-inventory netbox_inventory 2.2.1 \u2610 netbox-lifecycle netbox_lifecycle 1.1.3 \u2610 netbox-plugin-dns netbox_dns 1.1.7 \u2611\ufe0e netbox-qrcode netbox_qrcode 0.0.15 \u2611\ufe0e netbox-reorder-rack netbox_reorder_rack 1.1.3 \u2610 netbox-secrets netbox_secrets 2.1.2 \u2610 netbox-topology-views netbox_topology_views 4.1.0 \u2611\ufe0e netbox-validity validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin netbox_diode_plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching netbox_branching 0.5.2 \u2611\ufe0e phonebox-plugin phonebox_plugin 0.0.10 \u2610 slurpit_netbox slurpit_netbox 1.0.45 \u2611\ufe0e 1.6.5 Fixes a small bug that would cause the admin console to improperly display an error on upgrade. Also updates a few dependencies. Bug Fixes cluster: move ingress back to ingress-nginx namespace Features deps: bump to latest docker image + current plugins deps: update bitnami-common and netbox oss charts netbox: update to latest 4.0.x-compatible plugins Plugins The following plugins are included in this release: Plugin Version Certified nbrisk 41.0.1 \u2610 netbox-acls 1.7.0 \u2611\ufe0e netbox-bgp 0.14.0 \u2611\ufe0e netbox-config-diff 2.7.0 \u2610 netbox-documents 0.7.0 \u2610 netbox-floorplan-plugin 0.5.0 \u2611\ufe0e netbox-interface-synchronization 4.1.4 \u2610 netbox-inventory 2.1.0 \u2610 netbox-lifecycle 1.1.3 \u2610 netbox-plugin-dns 1.1.6 \u2611\ufe0e netbox-qrcode 0.0.15 \u2611\ufe0e netbox-secrets 2.1.0 \u2610 netbox-topology-views 4.1.0 \u2611\ufe0e netbox-validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching 0.5.2 \u2611\ufe0e phonebox-plugin 0.0.10 \u2610 slurpit_netbox 1.0.43 \u2611\ufe0e 1.6.4 Disable unnecessary Redis persistence and redundant PostgreSQL backups, plus fix an issue with file upload limits and missing static content from enabled plugins. NetBox Enterprise 1.6.4 includes NetBox 4.1.7, and is anticipated to be a release candidate for stable. Plugins The following plugins are included in this release: Plugin Version Certified nbrisk 41.0.1 \u2610 netbox-acls 1.7.0 \u2611\ufe0e netbox-bgp 0.14.0 \u2611\ufe0e netbox-config-diff 2.7.0 \u2610 netbox-documents 0.7.0 \u2610 netbox-floorplan-plugin 0.5.0 \u2611\ufe0e netbox-interface-synchronization 4.1.4 \u2610 netbox-inventory 2.1.0 \u2610 netbox-lifecycle 1.1.3 \u2610 netbox-plugin-dns 1.1.6 \u2611\ufe0e netbox-qrcode 0.0.15 \u2611\ufe0e netbox-secrets 2.1.0 \u2610 netbox-topology-views 4.1.0 \u2611\ufe0e netbox-validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin 0.6.0 \u2611\ufe0e netboxlabs-netbox-branching 0.5.2 \u2611\ufe0e phonebox-plugin 0.0.10 \u2610 slurpit_netbox 1.0.43 \u2611\ufe0e 1.6.3 Just a few small bug fixes, mostly related to internal changes. Also contains dependency updates. 1.6.2 Primarily internal and build-related changes. No new features. 1.6.1 Fixes a number of bugs related to file uploads and proxy environments. 1.6.0 Adds the changes plugin by default, and upgrades NetBox to 4.1.7. Fixes some small bugs in plugin initialization and proxied installs. 1.5.0 The 1.5.x series was released internally for development testing of upgrades to NetBox 4.1 and branching plugin inclusion. 1.4.2 A re-release of 1.4.1 with a fix that makes sure plugin versions that are only compatible with NetBox 4.1 are not included. Plugins The following plugins are included in this release: Plugin Version Certified nbrisk 40.0.1 \u2610 netbox-acls 1.6.1 \u2610 netbox-bgp 0.13.3 \u2611\ufe0e netbox-config-diff 2.7.0 \u2610 netbox-documents 0.7.0 \u2610 netbox-floorplan-plugin 0.4.1 \u2611\ufe0e netbox-interface-synchronization 4.1.4 \u2610 netbox-inventory 2.0.2 \u2610 netbox-lifecycle 1.0.4 \u2610 netbox-plugin-dns 1.1.5 \u2611\ufe0e netbox-qrcode 0.0.14 \u2611\ufe0e netbox-reorder-rack 1.1.3 \u2610 netbox-secrets 2.0.3 \u2610 netbox-topology-views 4.0.1 \u2611\ufe0e netbox-validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin 0.3.0 \u2610 phonebox-plugin 0.0.9 \u2610 slurpit_netbox 0.9.84 \u2611\ufe0e 1.4.1 A small release with some dependency updates and the latest set of NetBox 4.0-compatible plugins. Plugins The following plugins are included in this release: Plugin Version Certified nbrisk 41.0.1 \u2610 netbox-acls 1.7.0 \u2611\ufe0e netbox-bgp 0.14.0 \u2611\ufe0e netbox-config-diff 2.7.0 \u2610 netbox-documents 0.7.0 \u2610 netbox-floorplan-plugin 0.4.1 \u2611\ufe0e netbox-interface-synchronization 4.1.4 \u2610 netbox-inventory 2.1.0 \u2610 netbox-lifecycle 1.1.3 \u2610 netbox-plugin-dns 1.1.5 \u2611\ufe0e netbox-qrcode 0.0.15 \u2611\ufe0e netbox-reorder-rack 1.1.3 \u2610 netbox-secrets 2.1.0 \u2610 netbox-topology-views 4.1.0 \u2611\ufe0e netbox-validity 3.0.5 \u2610 netboxlabs-diode-netbox-plugin 0.6.0 \u2611\ufe0e phonebox-plugin 0.0.10 \u2610 slurpit_netbox 1.0.33 \u2611\ufe0e 1.4.0 Adds support for supplying custom environment variables (eg, for LDAP config). It also contains a small auth change to allow curly braces and spaces in the new password validator. A number of included plugins were updated to their latest compatible versions: * netbox_bgp was updated to 0.13.3 * netbox_floorplan_plugin was updated to 0.4.1 * netbox_plugin_dns was updated to 1.1.3 * netbox_topology_views was updated to 4.0.1 * slurpit_netbox was updated to 0.9.84 1.3.0 Compatible with any standard Kubernetes ingress controller now in KOTS installs, rather than only Nginx. Also fixes a potential data loss issue with uploaded images, as well as enabling script and report uploads. 1.2.0 Improves ingress configuration, adds support for inheriting the TLS configuration from the Admin Console configuration, and adds a \"restore mode\" for restoring manual backup data, plus many dependency updates and internal improvements. 1.1.0 Simplifies the firewall configuration necessary for installation by making sure all initialization downloads go through our proxy domain. 1.0.6 Adds support for NetBox resource usage adjustment and some improvements to startup time on a first install. It also adds support for backup and restore, depending on your environment and license. 1.0.5 Adds support for scraping Prometheus metrics from NetBox, as well as the embedded PostgreSQL, Redis, and SeaweedFS if they are enabled. Updated to support NetBox v4.0.9, and includes additional bug fixes and startup time improvements. 1.0.4 Adds OWASP password complexity validation to NetBox, and includes dependency updates. 1.0.3 Fixes issues with preflight checks, and includes minor dependency updates. 1.0.2 Provides a number of dependency updates and bug fixes, and includes initial support for backups of built-in Redis and PostgreSQL. 1.0.1 Provides bug fixes encountered during the initial rollout of the NetBox Enterprise application. 1.0.0 Provides final cleanup of the Beta stream in preparation for the wider release. Provides a number of internal changes, and includes fixes for an issue where annotations could render improperly and cause problems with upgrades. Updated to support NetBox v4.0.7.","title":"Release Notes"},{"location":"netbox-enterprise/nbe-release-notes/#netbox-enterprise-1x-release-notes","text":"","title":"NetBox Enterprise 1.x Release Notes"},{"location":"netbox-enterprise/nbe-release-notes/#11011102","text":"Minor releases to fix a number of issues with Diode and Assurance integration.","title":"1.10.1/1.10.2"},{"location":"netbox-enterprise/nbe-release-notes/#1100","text":"This in the first release to include Diode and the NetBox Assurance plugin.","title":"1.10.0"},{"location":"netbox-enterprise/nbe-release-notes/#193","text":"Fix a bug that caused failure to download resources in airgap and proxied environments. Also includes an updated Branching plugin that fixes a number of bugs.","title":"1.9.3"},{"location":"netbox-enterprise/nbe-release-notes/#192","text":"Updates NetBox to 4.2.9, plus includes an update to the cluster software which improves the handling of upgrades. NOTE: This update will upgrade NetBox to 4.2.9. If you have custom plugins installed, you will need to upgrade to NetBox Enterprise 1.9.2 and then create a new wheelhouse that contains plugins compatible with 4.2.9. Please review the upstream NetBox release notes from your current version through 4.2.9 for a complete list of breaking changes, enhancements, and bug fixes.","title":"1.9.2"},{"location":"netbox-enterprise/nbe-release-notes/#191","text":"A minor release that contains build process updates under the covers, plus the Python XML fixes introduced in NetBox Enterprise 1.8.6.","title":"1.9.1"},{"location":"netbox-enterprise/nbe-release-notes/#190","text":"Updates the embedded NetBox to 4.2.6. Also upgrades a number of dependencies to their latest versions, adds some extra system consistency validation checks, and reduces the number of proxied domains necessary to install NetBox Enterprise.","title":"1.9.0"},{"location":"netbox-enterprise/nbe-release-notes/#186","text":"Contains a fix for mismatched XML modules used by some 3rd-party plugins.","title":"1.8.6"},{"location":"netbox-enterprise/nbe-release-notes/#185","text":"Contains a fix for upgrades freezing in some situations.","title":"1.8.5"},{"location":"netbox-enterprise/nbe-release-notes/#184","text":"Provides a number of updates to custom plugin installation, as well as other small enhancements and bug fixes, included in the 1.7.x series, most notably the security fix for the ingress-nginx controller (CVE-2025-1974).","title":"1.8.4"},{"location":"netbox-enterprise/nbe-release-notes/#183","text":"Provides a number of updates to custom plugin installation, as well as other small enhancements and bug fixes, included in the 1.7.x series, most notably the security fix for the ingress-nginx controller (CVE-2025-1974).","title":"1.8.3"},{"location":"netbox-enterprise/nbe-release-notes/#181","text":"Fixes user creation, password validation, and group/SSO issues in NetBox.","title":"1.8.1"},{"location":"netbox-enterprise/nbe-release-notes/#180","text":"Improves logging in the NetBox containers, and adds support for uploading custom plugins.","title":"1.8.0"},{"location":"netbox-enterprise/nbe-release-notes/#176","text":"Contains a fix for incorrect permissions in the media folder after restore from backup.","title":"1.7.6"},{"location":"netbox-enterprise/nbe-release-notes/#175","text":"Contains a security fix for the ingress-nginx controller (CVE-2025-1974).","title":"1.7.5"},{"location":"netbox-enterprise/nbe-release-notes/#174","text":"Fix missing authentication plugins for group and SSO configs.","title":"1.7.4"},{"location":"netbox-enterprise/nbe-release-notes/#173","text":"Re-release of 1.7.2 with additional password validator fixes, plus reverting to a previous working redis chart.","title":"1.7.3"},{"location":"netbox-enterprise/nbe-release-notes/#172","text":"Fixes a bug where the custom password validator was missing.","title":"1.7.2"},{"location":"netbox-enterprise/nbe-release-notes/#171","text":"Fixes a bug in downloading the ingress Helm chart when using a proxy for installation.","title":"1.7.1"},{"location":"netbox-enterprise/nbe-release-notes/#170","text":"Updates the embedded NetBox to 4.1.11. Also upgrades the cluster software, which brings many bug fixes and features, including better preflight checks, and a direct link to the NetBox UI from the admin console.","title":"1.7.0"},{"location":"netbox-enterprise/nbe-release-notes/#165","text":"Fixes a small bug that would cause the admin console to improperly display an error on upgrade. Also updates a few dependencies.","title":"1.6.5"},{"location":"netbox-enterprise/nbe-release-notes/#164","text":"Disable unnecessary Redis persistence and redundant PostgreSQL backups, plus fix an issue with file upload limits and missing static content from enabled plugins. NetBox Enterprise 1.6.4 includes NetBox 4.1.7, and is anticipated to be a release candidate for stable.","title":"1.6.4"},{"location":"netbox-enterprise/nbe-release-notes/#163","text":"Just a few small bug fixes, mostly related to internal changes. Also contains dependency updates.","title":"1.6.3"},{"location":"netbox-enterprise/nbe-release-notes/#162","text":"Primarily internal and build-related changes. No new features.","title":"1.6.2"},{"location":"netbox-enterprise/nbe-release-notes/#161","text":"Fixes a number of bugs related to file uploads and proxy environments.","title":"1.6.1"},{"location":"netbox-enterprise/nbe-release-notes/#160","text":"Adds the changes plugin by default, and upgrades NetBox to 4.1.7. Fixes some small bugs in plugin initialization and proxied installs.","title":"1.6.0"},{"location":"netbox-enterprise/nbe-release-notes/#150","text":"The 1.5.x series was released internally for development testing of upgrades to NetBox 4.1 and branching plugin inclusion.","title":"1.5.0"},{"location":"netbox-enterprise/nbe-release-notes/#142","text":"A re-release of 1.4.1 with a fix that makes sure plugin versions that are only compatible with NetBox 4.1 are not included.","title":"1.4.2"},{"location":"netbox-enterprise/nbe-release-notes/#141","text":"A small release with some dependency updates and the latest set of NetBox 4.0-compatible plugins.","title":"1.4.1"},{"location":"netbox-enterprise/nbe-release-notes/#140","text":"Adds support for supplying custom environment variables (eg, for LDAP config). It also contains a small auth change to allow curly braces and spaces in the new password validator. A number of included plugins were updated to their latest compatible versions: * netbox_bgp was updated to 0.13.3 * netbox_floorplan_plugin was updated to 0.4.1 * netbox_plugin_dns was updated to 1.1.3 * netbox_topology_views was updated to 4.0.1 * slurpit_netbox was updated to 0.9.84","title":"1.4.0"},{"location":"netbox-enterprise/nbe-release-notes/#130","text":"Compatible with any standard Kubernetes ingress controller now in KOTS installs, rather than only Nginx. Also fixes a potential data loss issue with uploaded images, as well as enabling script and report uploads.","title":"1.3.0"},{"location":"netbox-enterprise/nbe-release-notes/#120","text":"Improves ingress configuration, adds support for inheriting the TLS configuration from the Admin Console configuration, and adds a \"restore mode\" for restoring manual backup data, plus many dependency updates and internal improvements.","title":"1.2.0"},{"location":"netbox-enterprise/nbe-release-notes/#110","text":"Simplifies the firewall configuration necessary for installation by making sure all initialization downloads go through our proxy domain.","title":"1.1.0"},{"location":"netbox-enterprise/nbe-release-notes/#106","text":"Adds support for NetBox resource usage adjustment and some improvements to startup time on a first install. It also adds support for backup and restore, depending on your environment and license.","title":"1.0.6"},{"location":"netbox-enterprise/nbe-release-notes/#105","text":"Adds support for scraping Prometheus metrics from NetBox, as well as the embedded PostgreSQL, Redis, and SeaweedFS if they are enabled. Updated to support NetBox v4.0.9, and includes additional bug fixes and startup time improvements.","title":"1.0.5"},{"location":"netbox-enterprise/nbe-release-notes/#104","text":"Adds OWASP password complexity validation to NetBox, and includes dependency updates.","title":"1.0.4"},{"location":"netbox-enterprise/nbe-release-notes/#103","text":"Fixes issues with preflight checks, and includes minor dependency updates.","title":"1.0.3"},{"location":"netbox-enterprise/nbe-release-notes/#102","text":"Provides a number of dependency updates and bug fixes, and includes initial support for backups of built-in Redis and PostgreSQL.","title":"1.0.2"},{"location":"netbox-enterprise/nbe-release-notes/#101","text":"Provides bug fixes encountered during the initial rollout of the NetBox Enterprise application.","title":"1.0.1"},{"location":"netbox-enterprise/nbe-release-notes/#100","text":"Provides final cleanup of the Beta stream in preparation for the wider release. Provides a number of internal changes, and includes fixes for an issue where annotations could render improperly and cause problems with upgrades. Updated to support NetBox v4.0.7.","title":"1.0.0"},{"location":"netbox-enterprise/nbe-saml-group-map/","text":"Configuring SAML Group Mapping in NetBox Enterprise Setting up Group Mapping for SAML requires the base SAML SSO Setup to be configured and working first. Configure the IdP NetBox Enterprise expects a SAML group attribute statement to be named groups , which contains a list of group names the user belongs to. If your IdP sends group information under a different attribute name, such as MemberOf , you must update its configuration to use groups to ensure proper mapping. Example: Configuring Group Mappings Desired groups must first be configured within NetBox In the Admin Console for NetBox Enterprise, navigate to the Config tab and scroll to the bottom to check Advanced Settings Apply the following into NetBox Python Configuration Overrides , replacing the relevant information. SOCIAL_AUTH_PIPELINE = ( 'social_core.pipeline.social_auth.social_details' , 'social_core.pipeline.social_auth.social_uid' , 'social_core.pipeline.social_auth.social_user' , 'social_core.pipeline.user.get_username' , 'social_core.pipeline.social_auth.associate_by_email' , 'social_core.pipeline.user.create_user' , 'social_core.pipeline.social_auth.associate_user' , 'netbox.authentication.user_default_groups_handler' , 'social_core.pipeline.social_auth.load_extra_data' , 'social_core.pipeline.user.user_details' , 'nbc_auth_extensions.saml_authentication.saml_map_groups' , ) SOCIAL_AUTH_PIPELINE_CONFIG = { 'SAML_USER_FLAGS_BY_GROUP' : { \"is_staff\" : { \"idp-staff-group-name\" # remove this line if no group should be granted 'Staff' }, \"is_superuser\" : { \"idp-superuser-group-name\" # remove this line if no group should be granted 'Superuser' } }, 'SAML_GROUP_MAP' : { \"idp-group-name-1\" : \"netbox-group-name-1\" , \"idp-group-name-2\" : \"netbox-group-name-2\" } }","title":"SAML Group Mapping"},{"location":"netbox-enterprise/nbe-saml-group-map/#configuring-saml-group-mapping-in-netbox-enterprise","text":"Setting up Group Mapping for SAML requires the base SAML SSO Setup to be configured and working first.","title":"Configuring SAML Group Mapping in NetBox Enterprise"},{"location":"netbox-enterprise/nbe-saml-group-map/#configure-the-idp","text":"NetBox Enterprise expects a SAML group attribute statement to be named groups , which contains a list of group names the user belongs to. If your IdP sends group information under a different attribute name, such as MemberOf , you must update its configuration to use groups to ensure proper mapping. Example:","title":"Configure the IdP"},{"location":"netbox-enterprise/nbe-saml-group-map/#configuring-group-mappings","text":"Desired groups must first be configured within NetBox In the Admin Console for NetBox Enterprise, navigate to the Config tab and scroll to the bottom to check Advanced Settings Apply the following into NetBox Python Configuration Overrides , replacing the relevant information. SOCIAL_AUTH_PIPELINE = ( 'social_core.pipeline.social_auth.social_details' , 'social_core.pipeline.social_auth.social_uid' , 'social_core.pipeline.social_auth.social_user' , 'social_core.pipeline.user.get_username' , 'social_core.pipeline.social_auth.associate_by_email' , 'social_core.pipeline.user.create_user' , 'social_core.pipeline.social_auth.associate_user' , 'netbox.authentication.user_default_groups_handler' , 'social_core.pipeline.social_auth.load_extra_data' , 'social_core.pipeline.user.user_details' , 'nbc_auth_extensions.saml_authentication.saml_map_groups' , ) SOCIAL_AUTH_PIPELINE_CONFIG = { 'SAML_USER_FLAGS_BY_GROUP' : { \"is_staff\" : { \"idp-staff-group-name\" # remove this line if no group should be granted 'Staff' }, \"is_superuser\" : { \"idp-superuser-group-name\" # remove this line if no group should be granted 'Superuser' } }, 'SAML_GROUP_MAP' : { \"idp-group-name-1\" : \"netbox-group-name-1\" , \"idp-group-name-2\" : \"netbox-group-name-2\" } }","title":"Configuring Group Mappings"},{"location":"netbox-enterprise/nbe-saml/","text":"NetBox Enterprise SAML Configuration Guide Required Information Entity ID : This is your IdP's Entity ID obtained from the SAML metadata SSO URL : Your IdP's SSO login URL x509 Certificate : The Base64-encoded X.509 certificate used to sign SAML assertions NetBox Enterprise URL : URL For the NetBox Enterprise instance Generate Public and Private Keys These will be used later during configuration and can be generated from anywhere. Be sure to keep the private key secure. openssl genpkey -algorithm RSA -out saml_private_key.pem -pkeyopt rsa_keygen_bits:2048 openssl req -new -x509 -key saml_private_key.pem -out saml_cert.pem -days <specify number of days valid> Configure the IdP Set up the IdP using the public key from the previous section, and the ACS URL (based on the NetBox Enterprise URL). These steps will vary depending on the IdP in use. ACS URL : \"{NetBox Enterprise URL}/oauth/complete/saml/\" SP Entity ID : \"{NetBox Enterprise URL}\" Example: Configure Attributes or Claims Setup similar mappings in the IdP's \"Attributes\" or \"Claims\" section. Names may vary on different platforms. \"attr_first_name\" : \"first_name\" \"attr_last_name\" : \"last_name\" \"attr_username\" : \"email\" \"attr_email\" : \"email\" Example: Capture x509 Certificate After setting up the IdP, generate a certificate in the IdP (this may be done by default). The x509 certificate can either be downloaded or viewed in the SAML metadata URL. This certificate data will be used in the next step. Update NetBox Enterprise Config In the Admin Console for NetBox Enterprise, navigate to the Config tab and scroll to the bottom to check Advanced Settings Apply the following into NetBox Python Configuration Overrides , replacing the relevant information from previous steps. REMOTE_AUTH_ENABLED = True REMOTE_AUTH_AUTO_CREATE_USER = True REMOTE_AUTH_BACKEND = 'social_core.backends.saml.SAMLAuth' SOCIAL_AUTH_REDIRECT_IS_HTTPS = True SOCIAL_AUTH_SAML_SP_ENTITY_ID = \"<NetBox Enterprise Instance URL>\" SOCIAL_AUTH_SAML_SP_PUBLIC_CERT = \"-----BEGIN CERTIFICATE-----<Public Key goes here>-----END CERTIFICATE-----\" SOCIAL_AUTH_SAML_SP_PRIVATE_KEY = \"-----BEGIN PRIVATE KEY-----<Private Key goes here>-----END PRIVATE KEY-----\" SOCIAL_AUTH_SAML_ORG_INFO = { \"en-US\" : { \"name\" : \"<Org Name>\" , \"displayname\" : \"<Org Display Name>\" , \"url\" : \"<Org Website>\" , } } SOCIAL_AUTH_SAML_TECHNICAL_CONTACT = { \"givenName\" : \"support\" , \"emailAddress\" : \"[<Support Email Address>](mailto:<Support Email Address>)\" } SOCIAL_AUTH_SAML_SUPPORT_CONTACT = { \"givenName\" : \"support\" , \"emailAddress\" : \"[<Support Email Address>](mailto:<Support Email Address>)\" } SOCIAL_AUTH_SAML_ENABLED_IDPS = { \"idp\" : { \"entity_id\" : \"<SAML Entity ID>\" , \"url\" : \"<SAML Sign-on URL>\" , \"x509cert\" : \"<x509 Certificate>\" , \"attr_user_permanent_id\" : \"email\" , \"attr_first_name\" : \"first_name\" , \"attr_last_name\" : \"last_name\" , \"attr_username\" : \"email\" , \"attr_email\" : \"email\" , } }","title":"SAML SSO Setup"},{"location":"netbox-enterprise/nbe-saml/#netbox-enterprise-saml-configuration-guide","text":"","title":"NetBox Enterprise SAML Configuration Guide"},{"location":"netbox-enterprise/nbe-saml/#required-information","text":"Entity ID : This is your IdP's Entity ID obtained from the SAML metadata SSO URL : Your IdP's SSO login URL x509 Certificate : The Base64-encoded X.509 certificate used to sign SAML assertions NetBox Enterprise URL : URL For the NetBox Enterprise instance","title":"Required Information"},{"location":"netbox-enterprise/nbe-saml/#generate-public-and-private-keys","text":"These will be used later during configuration and can be generated from anywhere. Be sure to keep the private key secure. openssl genpkey -algorithm RSA -out saml_private_key.pem -pkeyopt rsa_keygen_bits:2048 openssl req -new -x509 -key saml_private_key.pem -out saml_cert.pem -days <specify number of days valid>","title":"Generate Public and Private Keys"},{"location":"netbox-enterprise/nbe-saml/#configure-the-idp","text":"Set up the IdP using the public key from the previous section, and the ACS URL (based on the NetBox Enterprise URL). These steps will vary depending on the IdP in use. ACS URL : \"{NetBox Enterprise URL}/oauth/complete/saml/\" SP Entity ID : \"{NetBox Enterprise URL}\" Example:","title":"Configure the IdP"},{"location":"netbox-enterprise/nbe-saml/#configure-attributes-or-claims","text":"Setup similar mappings in the IdP's \"Attributes\" or \"Claims\" section. Names may vary on different platforms. \"attr_first_name\" : \"first_name\" \"attr_last_name\" : \"last_name\" \"attr_username\" : \"email\" \"attr_email\" : \"email\" Example:","title":"Configure Attributes or Claims"},{"location":"netbox-enterprise/nbe-saml/#capture-x509-certificate","text":"After setting up the IdP, generate a certificate in the IdP (this may be done by default). The x509 certificate can either be downloaded or viewed in the SAML metadata URL. This certificate data will be used in the next step.","title":"Capture x509 Certificate"},{"location":"netbox-enterprise/nbe-saml/#update-netbox-enterprise-config","text":"In the Admin Console for NetBox Enterprise, navigate to the Config tab and scroll to the bottom to check Advanced Settings Apply the following into NetBox Python Configuration Overrides , replacing the relevant information from previous steps. REMOTE_AUTH_ENABLED = True REMOTE_AUTH_AUTO_CREATE_USER = True REMOTE_AUTH_BACKEND = 'social_core.backends.saml.SAMLAuth' SOCIAL_AUTH_REDIRECT_IS_HTTPS = True SOCIAL_AUTH_SAML_SP_ENTITY_ID = \"<NetBox Enterprise Instance URL>\" SOCIAL_AUTH_SAML_SP_PUBLIC_CERT = \"-----BEGIN CERTIFICATE-----<Public Key goes here>-----END CERTIFICATE-----\" SOCIAL_AUTH_SAML_SP_PRIVATE_KEY = \"-----BEGIN PRIVATE KEY-----<Private Key goes here>-----END PRIVATE KEY-----\" SOCIAL_AUTH_SAML_ORG_INFO = { \"en-US\" : { \"name\" : \"<Org Name>\" , \"displayname\" : \"<Org Display Name>\" , \"url\" : \"<Org Website>\" , } } SOCIAL_AUTH_SAML_TECHNICAL_CONTACT = { \"givenName\" : \"support\" , \"emailAddress\" : \"[<Support Email Address>](mailto:<Support Email Address>)\" } SOCIAL_AUTH_SAML_SUPPORT_CONTACT = { \"givenName\" : \"support\" , \"emailAddress\" : \"[<Support Email Address>](mailto:<Support Email Address>)\" } SOCIAL_AUTH_SAML_ENABLED_IDPS = { \"idp\" : { \"entity_id\" : \"<SAML Entity ID>\" , \"url\" : \"<SAML Sign-on URL>\" , \"x509cert\" : \"<x509 Certificate>\" , \"attr_user_permanent_id\" : \"email\" , \"attr_first_name\" : \"first_name\" , \"attr_last_name\" : \"last_name\" , \"attr_username\" : \"email\" , \"attr_email\" : \"email\" , } }","title":"Update NetBox Enterprise Config"},{"location":"netbox-enterprise/nbe-tls-ingress/","text":"TLS and Ingress: Accessing NetBox Enterprise NetBox Enterprise Installs Ingress The NetBox Enterprise installation provides its own ingress controller. No additional configuration is required to reach NetBox on HTTP and HTTPS. TLS Configuration When you first install NetBox Enterprise and log into the Admin Console, it asks you to configure the TLS certificate. By default, it will generate a self-signed certificate, but you are able to instead upload private key and certificate chain files. This key and certificate chain are used for any TLS connections to the cluster, whether it's the Admin Console (on port 30000) or the main NetBox interface (on port 443). Key Replacement/Rotation If you configured your Admin Console to use a self-signed certificate on install and wish to replace it with your own key, or if you have an existing custom key that needs rotation, you can follow these steps to do so. Note Ensure you have your private key and a full certificate chain in PEM format. If you're using Let's Encrypt, this will be the privkeyXX.pem and fullchainXX.pem files. For other certificate providers, consult their documentation. First, access the NetBox Enterprise shell: /var/lib/embedded-cluster/bin/netbox-enterprise shell Then, delete the old secret and create the new one, providing the path to your chain and key files: kubectl -n kotsadm delete secret kotsadm-tls && \\ kubectl -n kotsadm create secret tls kotsadm-tls --cert = /path/to/cert.pem --key = /path/to/key.pem Finally, delete the proxy and ingress pods, so they relaunch with the new configuration: NGINX_POD = \" $( kubectl -n ingress-nginx get pods --selector = 'app.kubernetes.io/name=ingress-nginx' -o name ) \" PROXY_POD = \" $( kubectl -n kotsadm get pods --selector = 'app==kurl-proxy-kotsadm' -o name ) \" kubectl -n ingress-nginx delete \" ${ NGINX_POD } \" && \\ kubectl -n kotsadm delete \" ${ PROXY_POD } \"","title":"TLS and Ingress"},{"location":"netbox-enterprise/nbe-tls-ingress/#tls-and-ingress-accessing-netbox-enterprise","text":"","title":"TLS and Ingress: Accessing NetBox Enterprise"},{"location":"netbox-enterprise/nbe-tls-ingress/#netbox-enterprise-installs","text":"","title":"NetBox Enterprise Installs"},{"location":"netbox-enterprise/nbe-tls-ingress/#ingress","text":"The NetBox Enterprise installation provides its own ingress controller. No additional configuration is required to reach NetBox on HTTP and HTTPS.","title":"Ingress"},{"location":"netbox-enterprise/nbe-tls-ingress/#tls","text":"","title":"TLS"},{"location":"netbox-enterprise/nbe-troubleshooting/","text":"Advanced Tools and Troubleshooting NetBox Enterprise is designed to harness the power of Kubernetes while minimizing the amount of work the average person needs to manage it. However, sometimes it's still useful or necessary to peek under the hood. Applications The following applications are used for various facets of administration: kubectl *: CLI for interacting with clusters. preflight *: CLI for manually running preflight validation checks. Install by running: curl https://krew.sh/preflight | bash support-bundle *: CLI for manually generating support bundles. Install by running: curl https://krew.sh/support-bundle | bash k9s : a TUI for managing and viewing cluster resources. * provided by the NetBox Enterprise install Accessing Your Cluster from the Command Line If you are running the NetBox Enterprise installer, you will need to first execute a command to get a shell environment that knows how to interact with it. To do this, run: /var/lib/embedded-cluster/bin/netbox-enterprise shell Accessing Your Cluster from the Web The admin console is always available at https://your-cluster-host-or-ip:30000/ in a default NetBox Enterprise install. Generating a Support Bundle Command-Line Access your cluster from the shell. If you haven't installed the support-bundle package , do so now. Run: kubectl support-bundle /var/lib/embedded-cluster/support/host-support-bundle.yaml --load-cluster-specs This will run a series of tests and provide a short summary of what it found, much like the preflights that run during install and when deploying. When complete, the TUI will display, like so: Typing s to save will save a short summary .txt file of the output you can see in the TUI. Typing q to quit will quit without saving the summary. In both cases, a .tar.gz support bundle will also be created in the current directory. This file can be used by NetBox Labs to troubleshoot your system. Debug Logging \u26a0\ufe0f Warning : Do not enable debug logging in production environments. Debug logging can expose sensitive information to unauthenticated users and significantly impact system performance. Enable debug logging to increase log verbosity for troubleshooting issues. Debug logs provide detailed information about system operations and can help diagnose problems. Enabling Debug Mode Access the admin console Navigate to \"Config\" section Find \"Enable Debug Logging\" toggle Enable the toggle Click \"Save Config\" Deploy the updated configuration Viewing Debug Logs Access the logs using: kubectl logs netbox-enterprise-<pod_id> -n kotsadm Log example:","title":"Advanced Tools and Troubleshooting"},{"location":"netbox-enterprise/nbe-troubleshooting/#advanced-tools-and-troubleshooting","text":"NetBox Enterprise is designed to harness the power of Kubernetes while minimizing the amount of work the average person needs to manage it. However, sometimes it's still useful or necessary to peek under the hood.","title":"Advanced Tools and Troubleshooting"},{"location":"netbox-enterprise/nbe-troubleshooting/#applications","text":"The following applications are used for various facets of administration: kubectl *: CLI for interacting with clusters. preflight *: CLI for manually running preflight validation checks. Install by running: curl https://krew.sh/preflight | bash support-bundle *: CLI for manually generating support bundles. Install by running: curl https://krew.sh/support-bundle | bash k9s : a TUI for managing and viewing cluster resources. * provided by the NetBox Enterprise install","title":"Applications"},{"location":"netbox-enterprise/nbe-troubleshooting/#accessing-your-cluster-from-the-command-line","text":"If you are running the NetBox Enterprise installer, you will need to first execute a command to get a shell environment that knows how to interact with it. To do this, run: /var/lib/embedded-cluster/bin/netbox-enterprise shell","title":"Accessing Your Cluster from the Command Line"},{"location":"netbox-enterprise/nbe-troubleshooting/#accessing-your-cluster-from-the-web","text":"The admin console is always available at https://your-cluster-host-or-ip:30000/ in a default NetBox Enterprise install.","title":"Accessing Your Cluster from the Web"},{"location":"netbox-enterprise/nbe-troubleshooting/#generating-a-support-bundle","text":"","title":"Generating a Support Bundle"},{"location":"netbox-enterprise/nbe-troubleshooting/#command-line","text":"Access your cluster from the shell. If you haven't installed the support-bundle package , do so now. Run: kubectl support-bundle /var/lib/embedded-cluster/support/host-support-bundle.yaml --load-cluster-specs This will run a series of tests and provide a short summary of what it found, much like the preflights that run during install and when deploying. When complete, the TUI will display, like so: Typing s to save will save a short summary .txt file of the output you can see in the TUI. Typing q to quit will quit without saving the summary. In both cases, a .tar.gz support bundle will also be created in the current directory. This file can be used by NetBox Labs to troubleshoot your system.","title":"Command-Line"},{"location":"netbox-enterprise/nbe-troubleshooting/#debug-logging","text":"\u26a0\ufe0f Warning : Do not enable debug logging in production environments. Debug logging can expose sensitive information to unauthenticated users and significantly impact system performance. Enable debug logging to increase log verbosity for troubleshooting issues. Debug logs provide detailed information about system operations and can help diagnose problems.","title":"Debug Logging"},{"location":"netbox-enterprise/nbe-troubleshooting/#enabling-debug-mode","text":"Access the admin console Navigate to \"Config\" section Find \"Enable Debug Logging\" toggle Enable the toggle Click \"Save Config\" Deploy the updated configuration","title":"Enabling Debug Mode"},{"location":"netbox-enterprise/nbe-troubleshooting/#viewing-debug-logs","text":"Access the logs using: kubectl logs netbox-enterprise-<pod_id> -n kotsadm Log example:","title":"Viewing Debug Logs"},{"location":"netbox-extensions/changes/","text":"NetBox Change Management This plugin adds change management support to NetBox . Leveraging the netbox-branching plugin, it implements policy and workflow controls to ensure proposed changes undergo formal review prior to being merged. It also retains a written record of all approved changes. Getting Started Defining a Policy Change policies determine who is eligible to approve a change request and how many approvals a change request requires. Each policy contains one or more rules which define these parameters. Begin by creating a new policy with a name of your choosing, then add however many rules are necessary to enforce your organization's change policy. For example, suppose your team requires that every change be approved by two engineers (members of the Engineering group in NetBox) and one of the two lead engineers (Alice and Bob). This can be achieved by adding two rules to the policy. Rule Minimum reviews Reviewer groups Reviewers #1 2 Engineering - #2 1 - Alice, Bob This policy will be met only when at least two members of the Engineering group and Alice or Bob submit approvals. Create a Change Request When you've finished staging your changes in a branch, click the \"request review\" button at the top of the branch view. This will take you to the change request creation form. Enter a name for your change request (or keep the default value, taken from the branch's name) and select the change policy which applies to your request. Each change request will be opened in \"draft\" status with medium priority by default, but these can be changed. Go ahead and change the status to \"needs review\" if it's ready for review now. Finally, provide a brief summary of your changes for reviewers. Reviewing a Change Request Once a change request has been submitted, it can be reviewed by other users. To review a change request, click the \"add a review\" link above the list of reviews (if any). Select the status of your review and provide any comments you have. Your review will now show up under the change request. Alternatively, if you'd like to provide more detailed feedback, select the \"changes\" tab. Here, you can comment on specific changes within the branch and cite any concerns or suggestions you have. Other users can then reply to your comments. Applying a Change Request Once a change request has been approved, the \"merge\" button will appear. Clicking it will take you to the form to merge the corresponding branch. Once the branch has been merged successfully, the change request's status will be automatically updated to \"completed.\"","title":"Overview"},{"location":"netbox-extensions/changes/#netbox-change-management","text":"This plugin adds change management support to NetBox . Leveraging the netbox-branching plugin, it implements policy and workflow controls to ensure proposed changes undergo formal review prior to being merged. It also retains a written record of all approved changes.","title":"NetBox Change Management"},{"location":"netbox-extensions/changes/#getting-started","text":"","title":"Getting Started"},{"location":"netbox-extensions/changes/#defining-a-policy","text":"Change policies determine who is eligible to approve a change request and how many approvals a change request requires. Each policy contains one or more rules which define these parameters. Begin by creating a new policy with a name of your choosing, then add however many rules are necessary to enforce your organization's change policy. For example, suppose your team requires that every change be approved by two engineers (members of the Engineering group in NetBox) and one of the two lead engineers (Alice and Bob). This can be achieved by adding two rules to the policy. Rule Minimum reviews Reviewer groups Reviewers #1 2 Engineering - #2 1 - Alice, Bob This policy will be met only when at least two members of the Engineering group and Alice or Bob submit approvals.","title":"Defining a Policy"},{"location":"netbox-extensions/changes/#create-a-change-request","text":"When you've finished staging your changes in a branch, click the \"request review\" button at the top of the branch view. This will take you to the change request creation form. Enter a name for your change request (or keep the default value, taken from the branch's name) and select the change policy which applies to your request. Each change request will be opened in \"draft\" status with medium priority by default, but these can be changed. Go ahead and change the status to \"needs review\" if it's ready for review now. Finally, provide a brief summary of your changes for reviewers.","title":"Create a Change Request"},{"location":"netbox-extensions/changes/#reviewing-a-change-request","text":"Once a change request has been submitted, it can be reviewed by other users. To review a change request, click the \"add a review\" link above the list of reviews (if any). Select the status of your review and provide any comments you have. Your review will now show up under the change request. Alternatively, if you'd like to provide more detailed feedback, select the \"changes\" tab. Here, you can comment on specific changes within the branch and cite any concerns or suggestions you have. Other users can then reply to your comments.","title":"Reviewing a Change Request"},{"location":"netbox-extensions/changes/#applying-a-change-request","text":"Once a change request has been approved, the \"merge\" button will appear. Clicking it will take you to the form to merge the corresponding branch. Once the branch has been merged successfully, the change request's status will be automatically updated to \"completed.\"","title":"Applying a Change Request"},{"location":"netbox-extensions/changes/changelog/","text":"Change Log v0.2.0 Initial release","title":"Changelog"},{"location":"netbox-extensions/changes/changelog/#change-log","text":"","title":"Change Log"},{"location":"netbox-extensions/changes/changelog/#v020","text":"Initial release","title":"v0.2.0"},{"location":"netbox-extensions/changes/configuration/","text":"Configuration Parameters The following plugin configuration parameters are available. protect_main Default: False When enabled, all object creations, changes, and deletions must be made within a branch. Changes to objects in main will not be permitted, except for those object types which do not support branching.","title":"Configuration"},{"location":"netbox-extensions/changes/configuration/#configuration-parameters","text":"The following plugin configuration parameters are available.","title":"Configuration Parameters"},{"location":"netbox-extensions/changes/configuration/#protect_main","text":"Default: False When enabled, all object creations, changes, and deletions must be made within a branch. Changes to objects in main will not be permitted, except for those object types which do not support branching.","title":"protect_main"},{"location":"netbox-extensions/changes/models/changerequest/","text":"Change Requests A change request is submitted to request approval of proposed changes in a branch before it can be merged. All rules of the assigned change policy must be met for the request to be approved. When submitting a change request for a branch, the owner selects the governing policy and designates a priority. Fields Name The user-defined name of the change request. Owner The user who submitted the change request. Policy The policy which must be met for the change request to be approved. Note The policy is selected by the change request owner. Branch The branch which will be merged when the change request has been approved. Status The current status of the change request. Valid statuses are listed below. Status Description Draft Not yet ready for review Needs review Waiting for reviews to satisfy the assigned policy Approved The assigned policy has been met Completed The assigned branch has been merged Rejected The proposed changes have been rejected Priority The priority of the change request relative to other open requests. Valid priorities are listed below. High (5) Medium/high (4) Medium (3) Medium/low (2) Low (1) Summary A short summary of the proposed changes, reasoning for why they are being made, and any other relevant notes for reviewers.","title":"Change Request"},{"location":"netbox-extensions/changes/models/changerequest/#change-requests","text":"A change request is submitted to request approval of proposed changes in a branch before it can be merged. All rules of the assigned change policy must be met for the request to be approved. When submitting a change request for a branch, the owner selects the governing policy and designates a priority.","title":"Change Requests"},{"location":"netbox-extensions/changes/models/changerequest/#fields","text":"","title":"Fields"},{"location":"netbox-extensions/changes/models/changerequest/#name","text":"The user-defined name of the change request.","title":"Name"},{"location":"netbox-extensions/changes/models/changerequest/#owner","text":"The user who submitted the change request.","title":"Owner"},{"location":"netbox-extensions/changes/models/changerequest/#policy","text":"The policy which must be met for the change request to be approved. Note The policy is selected by the change request owner.","title":"Policy"},{"location":"netbox-extensions/changes/models/changerequest/#branch","text":"The branch which will be merged when the change request has been approved.","title":"Branch"},{"location":"netbox-extensions/changes/models/changerequest/#status","text":"The current status of the change request. Valid statuses are listed below. Status Description Draft Not yet ready for review Needs review Waiting for reviews to satisfy the assigned policy Approved The assigned policy has been met Completed The assigned branch has been merged Rejected The proposed changes have been rejected","title":"Status"},{"location":"netbox-extensions/changes/models/changerequest/#priority","text":"The priority of the change request relative to other open requests. Valid priorities are listed below. High (5) Medium/high (4) Medium (3) Medium/low (2) Low (1)","title":"Priority"},{"location":"netbox-extensions/changes/models/changerequest/#summary","text":"A short summary of the proposed changes, reasoning for why they are being made, and any other relevant notes for reviewers.","title":"Summary"},{"location":"netbox-extensions/changes/models/comment/","text":"Comments As part of the review process, users can leave comments on change requests to ask question or suggest changes. Each comment may start a thread of replies and can be marked resolved, which will hide the reply thread. Fields Author The user who created the comment. Change Request The change request to which the comment applies. Change Diff The specific change within the change request the comment applies (optional). Content The comment body. Resolved A boolean attribute indicating whether the comment has been addressed by the change request owner.","title":"Comment"},{"location":"netbox-extensions/changes/models/comment/#comments","text":"As part of the review process, users can leave comments on change requests to ask question or suggest changes. Each comment may start a thread of replies and can be marked resolved, which will hide the reply thread.","title":"Comments"},{"location":"netbox-extensions/changes/models/comment/#fields","text":"","title":"Fields"},{"location":"netbox-extensions/changes/models/comment/#author","text":"The user who created the comment.","title":"Author"},{"location":"netbox-extensions/changes/models/comment/#change-request","text":"The change request to which the comment applies.","title":"Change Request"},{"location":"netbox-extensions/changes/models/comment/#change-diff","text":"The specific change within the change request the comment applies (optional).","title":"Change Diff"},{"location":"netbox-extensions/changes/models/comment/#content","text":"The comment body.","title":"Content"},{"location":"netbox-extensions/changes/models/comment/#resolved","text":"A boolean attribute indicating whether the comment has been addressed by the change request owner.","title":"Resolved"},{"location":"netbox-extensions/changes/models/commentreply/","text":"Comment Replies Each comment on a change request starts a new discussion thread to which users can reply. This helps keep the discussion around a change request organized. Fields Author The user who created the reply. Comment The comment to which the reply thread belongs. Content The reply body.","title":"Comment Reply"},{"location":"netbox-extensions/changes/models/commentreply/#comment-replies","text":"Each comment on a change request starts a new discussion thread to which users can reply. This helps keep the discussion around a change request organized.","title":"Comment Replies"},{"location":"netbox-extensions/changes/models/commentreply/#fields","text":"","title":"Fields"},{"location":"netbox-extensions/changes/models/commentreply/#author","text":"The user who created the reply.","title":"Author"},{"location":"netbox-extensions/changes/models/commentreply/#comment","text":"The comment to which the reply thread belongs.","title":"Comment"},{"location":"netbox-extensions/changes/models/commentreply/#content","text":"The reply body.","title":"Content"},{"location":"netbox-extensions/changes/models/policy/","text":"Policies A policy defines the conditions that must be met for a change request to be merged. Each policy defines one or more rules which assert these conditions. All rules must be met for the policy to be satisfied. Note A policy with no rules defined will always fail. Fields Name The name by which the policy is referenced.","title":"Policy"},{"location":"netbox-extensions/changes/models/policy/#policies","text":"A policy defines the conditions that must be met for a change request to be merged. Each policy defines one or more rules which assert these conditions. All rules must be met for the policy to be satisfied. Note A policy with no rules defined will always fail.","title":"Policies"},{"location":"netbox-extensions/changes/models/policy/#fields","text":"","title":"Fields"},{"location":"netbox-extensions/changes/models/policy/#name","text":"The name by which the policy is referenced.","title":"Name"},{"location":"netbox-extensions/changes/models/policyrule/","text":"Policy Rules Each policy contains one or more rules which assert certain conditions that must be met for the policy to be met. For example, you might define a policy that requires the approval of two engineers and one manager. Users whose reviews will satisfy the rule are identified by assigning individual users and/or groups of users for each rule. The minimum reviews parameter defines how many approved must be submitted for the rule to be met. Fields Name The short name by which the rule is identified. Enabled A boolean indicating whether the rule is enabled. Rules are enabled by default. Minimum Reviews The minimum number of eligible reviewers which must approve the change in order for the rule to pass. Note A value of zero may be set to assert that a rule shall always pass, although this is generally not recommended. Reviewer Groups Groups of users whose approval will satisfy this rule. Reviewers Individual users whose approval will satisfy this rule.","title":"Policy Rule"},{"location":"netbox-extensions/changes/models/policyrule/#policy-rules","text":"Each policy contains one or more rules which assert certain conditions that must be met for the policy to be met. For example, you might define a policy that requires the approval of two engineers and one manager. Users whose reviews will satisfy the rule are identified by assigning individual users and/or groups of users for each rule. The minimum reviews parameter defines how many approved must be submitted for the rule to be met.","title":"Policy Rules"},{"location":"netbox-extensions/changes/models/policyrule/#fields","text":"","title":"Fields"},{"location":"netbox-extensions/changes/models/policyrule/#name","text":"The short name by which the rule is identified.","title":"Name"},{"location":"netbox-extensions/changes/models/policyrule/#enabled","text":"A boolean indicating whether the rule is enabled. Rules are enabled by default.","title":"Enabled"},{"location":"netbox-extensions/changes/models/policyrule/#minimum-reviews","text":"The minimum number of eligible reviewers which must approve the change in order for the rule to pass. Note A value of zero may be set to assert that a rule shall always pass, although this is generally not recommended.","title":"Minimum Reviews"},{"location":"netbox-extensions/changes/models/policyrule/#reviewer-groups","text":"Groups of users whose approval will satisfy this rule.","title":"Reviewer Groups"},{"location":"netbox-extensions/changes/models/policyrule/#reviewers","text":"Individual users whose approval will satisfy this rule.","title":"Reviewers"},{"location":"netbox-extensions/changes/models/review/","text":"Reviews Reviews are submitted to approve, reject, or comment on a change request . The users eligible to review a particular change request are determined by its assigned change policy . Fields Change Request The change request being reviewed. User The author of the review. Status The current status of the review. Valid statuses are listed below. Status Description Pending The review is in progress Comment The reviewer has questions or feedback Changes Requested The reviewer has requested modifications to the proposed changes Approved The proposed changes are accepted Rejected The proposed changes are rejected","title":"Review"},{"location":"netbox-extensions/changes/models/review/#reviews","text":"Reviews are submitted to approve, reject, or comment on a change request . The users eligible to review a particular change request are determined by its assigned change policy .","title":"Reviews"},{"location":"netbox-extensions/changes/models/review/#fields","text":"","title":"Fields"},{"location":"netbox-extensions/changes/models/review/#change-request","text":"The change request being reviewed.","title":"Change Request"},{"location":"netbox-extensions/changes/models/review/#user","text":"The author of the review.","title":"User"},{"location":"netbox-extensions/changes/models/review/#status","text":"The current status of the review. Valid statuses are listed below. Status Description Pending The review is in progress Comment The reviewer has questions or feedback Changes Requested The reviewer has requested modifications to the proposed changes Approved The proposed changes are accepted Rejected The proposed changes are rejected","title":"Status"},{"location":"netbox-extensions/diode/","text":"Diode Diode is a data ingestion service for NetBox that greatly simplifies and enhances the process of adding and updating data in NetBox, ensuring your network source of truth is always accurate and up to date. Our guiding principle in designing Diode has been to make it as easy as possible to get data into NetBox, removing as much burden as possible from the user while shifting that effort to technology. Project Status The Diode project is currently in the Public Preview stage. Please see NetBox Labs Product and Feature Lifecycle for more details. We actively welcome feedback to help identify and prioritize bugs, new features and areas of improvement. Prerequisites NetBox 4.2.3 or later Python 3.8 or later (for Python SDK) Go 1.18 or later (for Go SDK) Network connectivity between Diode and NetBox Quick Start For a quick step-by-step guide, see our Getting Started Guide . Deploy the Diode Server See deployment instructions Install the Diode NetBox Plugin See installation instructions Choose Your Data Ingestion Method Use the NetBox Discovery agent for automated network discovery: see instructions to run Orb agent Build custom integrations using our SDKs: Python SDK Go SDK Documentation Diode Protocol Documentation Metrics Example scripts and tutorials can be found in the NetBox Labs NetBox Learning repository Related Projects Orb Agent : Network discovery agent that uses Diode for data ingestion Diode NetBox Plugin : Required NetBox plugin for Diode integration Diode Protocol : Protocol definitions for Diode Community & Support GitHub Issues NetBox Community Slack - Join the #orb channel License Diode is released under the NetBox Limited Use License 1.0 .","title":"Introduction"},{"location":"netbox-extensions/diode/#diode","text":"Diode is a data ingestion service for NetBox that greatly simplifies and enhances the process of adding and updating data in NetBox, ensuring your network source of truth is always accurate and up to date. Our guiding principle in designing Diode has been to make it as easy as possible to get data into NetBox, removing as much burden as possible from the user while shifting that effort to technology.","title":"Diode"},{"location":"netbox-extensions/diode/#project-status","text":"The Diode project is currently in the Public Preview stage. Please see NetBox Labs Product and Feature Lifecycle for more details. We actively welcome feedback to help identify and prioritize bugs, new features and areas of improvement.","title":"Project Status"},{"location":"netbox-extensions/diode/#prerequisites","text":"NetBox 4.2.3 or later Python 3.8 or later (for Python SDK) Go 1.18 or later (for Go SDK) Network connectivity between Diode and NetBox","title":"Prerequisites"},{"location":"netbox-extensions/diode/#quick-start","text":"For a quick step-by-step guide, see our Getting Started Guide . Deploy the Diode Server See deployment instructions Install the Diode NetBox Plugin See installation instructions Choose Your Data Ingestion Method Use the NetBox Discovery agent for automated network discovery: see instructions to run Orb agent Build custom integrations using our SDKs: Python SDK Go SDK","title":"Quick Start"},{"location":"netbox-extensions/diode/#documentation","text":"Diode Protocol Documentation Metrics Example scripts and tutorials can be found in the NetBox Labs NetBox Learning repository","title":"Documentation"},{"location":"netbox-extensions/diode/#related-projects","text":"Orb Agent : Network discovery agent that uses Diode for data ingestion Diode NetBox Plugin : Required NetBox plugin for Diode integration Diode Protocol : Protocol definitions for Diode","title":"Related Projects"},{"location":"netbox-extensions/diode/#community-support","text":"GitHub Issues NetBox Community Slack - Join the #orb channel","title":"Community &amp; Support"},{"location":"netbox-extensions/diode/#license","text":"Diode is released under the NetBox Limited Use License 1.0 .","title":"License"},{"location":"netbox-extensions/diode/getting-started/","text":"Getting Started with Diode This guide will help you set up and start using Diode to ingest data into NetBox. Prerequisites Before you begin, ensure you have: NetBox version 4.2.3 or later Docker version 27.0.3 or newer bash 4.x or newer jq Network connectivity between your NetBox server and the Diode server Sufficient permissions to run Docker commands Installation Steps Deploy Diode server Host : These steps should be performed on the host where you want to run the Diode server. Note : For the complete installation instructions, please refer to the official Diode Server documentation . We provide a quickstart.sh script to automate the setup process. The script will download and configure all necessary files: docker-compose.yaml \u2014 Defines Diode server containers .env \u2014 Environment settings for customization nginx.conf \u2014 Nginx configuration for routing Diode endpoints client-credentials.json \u2014 Defines OAuth2 clients for secure communication Create a working directory: mkdir -p /opt/diode cd /opt/diode Download and prepare the quickstart script: curl -sSfLo quickstart.sh https://raw.githubusercontent.com/netboxlabs/diode/release/diode-server/docker/scripts/quickstart.sh chmod +x quickstart.sh Run the script with your NetBox server address: ./quickstart.sh https://<netbox-server> Note : Replace <netbox-server> with your actual NetBox server address. Do not include a trailing slash. Example: ./quickstart.sh https://netbox.example.com This should have created an .env file for your environment. Start the Diode server: docker compose up -d Verify the Diode server is running: docker compose ps All services should show as \"running\" or \"healthy\". Extract the netbox-to-diode client secret. This will be needed for the Diode NetBox plugin installation: echo $( jq -r '.[] | select(.client_id == \"netbox-to-diode\") | .client_secret' /opt/diode/oauth2/client/client-credentials.json ) Note : This will return a credential that will be used by the Diode NetBox plugin to connect to the Diode server. Store it safely. Install Diode NetBox Plugin Host : These steps should be performed on the host where NetBox is installed. Note : For the complete installation instructions, please refer to the official Diode NetBox Plugin documentation . Source the NetBox Python Virtual Environment cd /opt/netbox source venv/bin/activate Install the Plugin Package pip install netboxlabs-diode-netbox-plugin Configure NetBox Settings Add the following to your configuration.py : PLUGINS = [ \"netbox_diode_plugin\" , ] PLUGINS_CONFIG = { \"netbox_diode_plugin\" : { # Diode gRPC target for communication with Diode server \"diode_target_override\" : \"grpc://<diode-server:port>/diode\" , # NetBox username associated with changes applied via plugin \"diode_username\" : \"diode\" , # netbox-to-diode client secret from earlier step \"netbox_to_diode_client_secret\" : \"<netbox-to-diode-secret>\" }, } Note : Replace <diode-server:port> with your Diode server address and port (default: 8080) Example: grpc://diode.example.com:8080/diode Apply Database Migrations cd /opt/netbox/netbox ./manage.py migrate netbox_diode_plugin Restart NetBox Services sudo systemctl restart netbox netbox-rq Generate Diode Client Credentials Note : These credentials will be used by the Orb agent to send discovery results to NetBox via Diode. Go to your NetBox instance (https:// ) In the left-hand pane, navigate to Diode -> Client Credentials Click on + Add a Credential For Client Name, enter any name and click Create IMPORTANT : Copy the Client ID and Client Secret and save them securely Click Return to List You have now created your Diode client credentials. These will be used as environment variables when running the Orb agent. Ingest Data with Orb Agent Host : These steps should be performed on the host where you want to run the Orb agent for network discovery. Note : For the complete installation instructions, please refer to the official Orb Agent documentation . Export Client Credentials # Export the client credentials you generated in NetBox export DIODE_CLIENT_ID = \"<your-client-id>\" export DIODE_CLIENT_SECRET = \"<your-client-secret>\" Create Agent Configuration File Create an agent.yaml file with the following content: orb : config_manager : active : local backends : network_discovery : # Enable network discovery backend common : diode : target : grpc://<diode-server:port>/diode client_id : ${DIODE_CLIENT_ID} client_secret : ${DIODE_CLIENT_SECRET} agent_name : my_agent policies : network_discovery : loopback_policy : config : scope : targets : - 127.0.0.1 Note : Replace <diode-server:port> with your Diode server address and port (default: 8080) Example: grpc://diode.example.com:8080/diode Run the Agent Using host network mode (recommended): docker run --net = host \\ -v $( pwd ) :/opt/orb/ \\ -e DIODE_CLIENT_ID \\ -e DIODE_CLIENT_SECRET \\ netboxlabs/orb-agent:latest run -c /opt/orb/agent.yaml Alternative using root user: docker run -u root \\ -v $( pwd ) :/opt/orb/ \\ -e DIODE_CLIENT_ID \\ -e DIODE_CLIENT_SECRET \\ netboxlabs/orb-agent:latest run -c /opt/orb/agent.yaml Note : The container needs sufficient permissions to send ICMP and TCP packets. This can be achieved either by: - Setting the network mode to host (recommended) - Running the container as root user Verify Agent Operation Check the agent logs for successful startup Verify data appears in NetBox Troubleshooting Common Issues Connection Issues Verify network connectivity between Diode and NetBox: # From Diode server curl -v https://<netbox-server> # From NetBox server curl -v grpc://<diode-server:port>/diode Check firewall rules: # Check if required ports are open netstat -tulpn | grep -E '8080|443' Validate URLs and ports in configuration files: Diode server .env NetBox configuration.py Orb agent agent.yaml Docker Issues Check Docker service status: systemctl status docker Verify Docker container logs: docker compose logs Permission Issues Ensure proper file permissions: ls -la /opt/diode/ ls -la /opt/netbox/ Check Docker socket permissions: ls -l /var/run/docker.sock Getting Help If you encounter issues: Search GitHub: Issues Find us in Slack: NetDev Community #orb Check the logs: Diode server logs: docker compose logs","title":"Getting Started"},{"location":"netbox-extensions/diode/getting-started/#getting-started-with-diode","text":"This guide will help you set up and start using Diode to ingest data into NetBox.","title":"Getting Started with Diode"},{"location":"netbox-extensions/diode/getting-started/#prerequisites","text":"Before you begin, ensure you have: NetBox version 4.2.3 or later Docker version 27.0.3 or newer bash 4.x or newer jq Network connectivity between your NetBox server and the Diode server Sufficient permissions to run Docker commands","title":"Prerequisites"},{"location":"netbox-extensions/diode/getting-started/#installation-steps","text":"","title":"Installation Steps"},{"location":"netbox-extensions/diode/getting-started/#deploy-diode-server","text":"Host : These steps should be performed on the host where you want to run the Diode server. Note : For the complete installation instructions, please refer to the official Diode Server documentation . We provide a quickstart.sh script to automate the setup process. The script will download and configure all necessary files: docker-compose.yaml \u2014 Defines Diode server containers .env \u2014 Environment settings for customization nginx.conf \u2014 Nginx configuration for routing Diode endpoints client-credentials.json \u2014 Defines OAuth2 clients for secure communication Create a working directory: mkdir -p /opt/diode cd /opt/diode Download and prepare the quickstart script: curl -sSfLo quickstart.sh https://raw.githubusercontent.com/netboxlabs/diode/release/diode-server/docker/scripts/quickstart.sh chmod +x quickstart.sh Run the script with your NetBox server address: ./quickstart.sh https://<netbox-server> Note : Replace <netbox-server> with your actual NetBox server address. Do not include a trailing slash. Example: ./quickstart.sh https://netbox.example.com This should have created an .env file for your environment. Start the Diode server: docker compose up -d Verify the Diode server is running: docker compose ps All services should show as \"running\" or \"healthy\". Extract the netbox-to-diode client secret. This will be needed for the Diode NetBox plugin installation: echo $( jq -r '.[] | select(.client_id == \"netbox-to-diode\") | .client_secret' /opt/diode/oauth2/client/client-credentials.json ) Note : This will return a credential that will be used by the Diode NetBox plugin to connect to the Diode server. Store it safely.","title":"Deploy Diode server"},{"location":"netbox-extensions/diode/getting-started/#install-diode-netbox-plugin","text":"Host : These steps should be performed on the host where NetBox is installed. Note : For the complete installation instructions, please refer to the official Diode NetBox Plugin documentation . Source the NetBox Python Virtual Environment cd /opt/netbox source venv/bin/activate Install the Plugin Package pip install netboxlabs-diode-netbox-plugin Configure NetBox Settings Add the following to your configuration.py : PLUGINS = [ \"netbox_diode_plugin\" , ] PLUGINS_CONFIG = { \"netbox_diode_plugin\" : { # Diode gRPC target for communication with Diode server \"diode_target_override\" : \"grpc://<diode-server:port>/diode\" , # NetBox username associated with changes applied via plugin \"diode_username\" : \"diode\" , # netbox-to-diode client secret from earlier step \"netbox_to_diode_client_secret\" : \"<netbox-to-diode-secret>\" }, } Note : Replace <diode-server:port> with your Diode server address and port (default: 8080) Example: grpc://diode.example.com:8080/diode Apply Database Migrations cd /opt/netbox/netbox ./manage.py migrate netbox_diode_plugin Restart NetBox Services sudo systemctl restart netbox netbox-rq Generate Diode Client Credentials Note : These credentials will be used by the Orb agent to send discovery results to NetBox via Diode. Go to your NetBox instance (https:// ) In the left-hand pane, navigate to Diode -> Client Credentials Click on + Add a Credential For Client Name, enter any name and click Create IMPORTANT : Copy the Client ID and Client Secret and save them securely Click Return to List You have now created your Diode client credentials. These will be used as environment variables when running the Orb agent.","title":"Install Diode NetBox Plugin"},{"location":"netbox-extensions/diode/getting-started/#ingest-data-with-orb-agent","text":"Host : These steps should be performed on the host where you want to run the Orb agent for network discovery. Note : For the complete installation instructions, please refer to the official Orb Agent documentation . Export Client Credentials # Export the client credentials you generated in NetBox export DIODE_CLIENT_ID = \"<your-client-id>\" export DIODE_CLIENT_SECRET = \"<your-client-secret>\" Create Agent Configuration File Create an agent.yaml file with the following content: orb : config_manager : active : local backends : network_discovery : # Enable network discovery backend common : diode : target : grpc://<diode-server:port>/diode client_id : ${DIODE_CLIENT_ID} client_secret : ${DIODE_CLIENT_SECRET} agent_name : my_agent policies : network_discovery : loopback_policy : config : scope : targets : - 127.0.0.1 Note : Replace <diode-server:port> with your Diode server address and port (default: 8080) Example: grpc://diode.example.com:8080/diode Run the Agent Using host network mode (recommended): docker run --net = host \\ -v $( pwd ) :/opt/orb/ \\ -e DIODE_CLIENT_ID \\ -e DIODE_CLIENT_SECRET \\ netboxlabs/orb-agent:latest run -c /opt/orb/agent.yaml Alternative using root user: docker run -u root \\ -v $( pwd ) :/opt/orb/ \\ -e DIODE_CLIENT_ID \\ -e DIODE_CLIENT_SECRET \\ netboxlabs/orb-agent:latest run -c /opt/orb/agent.yaml Note : The container needs sufficient permissions to send ICMP and TCP packets. This can be achieved either by: - Setting the network mode to host (recommended) - Running the container as root user Verify Agent Operation Check the agent logs for successful startup Verify data appears in NetBox","title":"Ingest Data with Orb Agent"},{"location":"netbox-extensions/diode/getting-started/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"netbox-extensions/diode/getting-started/#common-issues","text":"Connection Issues Verify network connectivity between Diode and NetBox: # From Diode server curl -v https://<netbox-server> # From NetBox server curl -v grpc://<diode-server:port>/diode Check firewall rules: # Check if required ports are open netstat -tulpn | grep -E '8080|443' Validate URLs and ports in configuration files: Diode server .env NetBox configuration.py Orb agent agent.yaml Docker Issues Check Docker service status: systemctl status docker Verify Docker container logs: docker compose logs Permission Issues Ensure proper file permissions: ls -la /opt/diode/ ls -la /opt/netbox/ Check Docker socket permissions: ls -l /var/run/docker.sock","title":"Common Issues"},{"location":"netbox-extensions/diode/getting-started/#getting-help","text":"If you encounter issues: Search GitHub: Issues Find us in Slack: NetDev Community #orb Check the logs: Diode server logs: docker compose logs","title":"Getting Help"},{"location":"netbox-extensions/diode/observability/metrics/","text":"Metrics Available Metrics Core Metrics (All Services) diode_{service}_service_info - Service information diode_{service}_service_startup_attempts_total - Startup attempts Service-Specific Metrics Auth Service diode_auth_service_info - Service information diode_auth_service_startup_attempts_total - Startup attempts Ingester Service diode_ingester_service_info - Service information diode_ingester_service_startup_attempts_total - Startup attempts diode_ingester_ingest_requests_total - Ingest requests (success) diode_ingester_ingest_entities_total - Entities ingested Reconciler Service diode_reconciler_service_info - Service information diode_reconciler_service_startup_attempts_total - Startup attempts diode_reconciler_handle_message_total - Messages handled (success) diode_reconciler_ingestion_log_create_total - Ingestion logs created (success) diode_reconciler_change_set_create_total - Change sets created (success) diode_reconciler_change_set_apply_total - Change sets applied (success) diode_reconciler_change_create_total - Individual changes created diode_reconciler_change_apply_total - Individual changes applied Configuration Overview Diode's telemetry implementation supports multiple configuration methods and exporters. Exporters prometheus : Serve metrics on /metrics endpoint otlp : Send to OpenTelemetry Collector console : Output to stdout (debugging) none : Disable metrics Environment Variables Core Configuration Variable Description Default Required Example TELEMETRY_SERVICE_NAME Service identifier Auto-detected No netboxlabs/diode/auth TELEMETRY_EXPORTER Metrics exporter prometheus No prometheus , otlp , console , none TELEMETRY_PROMETHEUS_PORT Prometheus port 9090 No 9090 TELEMETRY_OTLP_ENDPOINT OTLP endpoint - Yes (if OTLP) http://collector:4317 TELEMETRY_OTLP_INSECURE OTLP insecure false No true , false Advanced Configuration Variable Description Default Required Example TELEMETRY_OTLP_TIMEOUT OTLP timeout 30s No 30s TELEMETRY_OTLP_COMPRESSION OTLP compression none No gzip , none TELEMETRY_RESOURCE_ATTRIBUTES Resource attributes - No service.version=1.0.0 Docker Compose Example version : '3.8' services : diode-auth : image : netboxlabs/diode-auth:latest environment : - TELEMETRY_SERVICE_NAME=netboxlabs/diode/auth - TELEMETRY_EXPORTER=prometheus - TELEMETRY_PROMETHEUS_PORT=9090 ports : - \"9090:9090\" diode-ingester : image : netboxlabs/diode-ingester:latest environment : - TELEMETRY_SERVICE_NAME=netboxlabs/diode/ingester - TELEMETRY_EXPORTER=prometheus - TELEMETRY_PROMETHEUS_PORT=9091 ports : - \"9091:9091\" diode-reconciler : image : netboxlabs/diode-reconciler:latest environment : - TELEMETRY_SERVICE_NAME=netboxlabs/diode/reconciler - TELEMETRY_EXPORTER=prometheus - TELEMETRY_PROMETHEUS_PORT=9092 ports : - \"9092:9092\" prometheus : image : prom/prometheus:latest ports : - \"9093:9090\" volumes : - ./prometheus.yml:/etc/prometheus/prometheus.yml command : - '--config.file=/etc/prometheus/prometheus.yml' - '--storage.tsdb.path=/prometheus' - '--web.console.libraries=/etc/prometheus/console_libraries' - '--web.console.templates=/etc/prometheus/consoles' - '--web.enable-lifecycle' Prometheus Configuration global : scrape_interval : 15s scrape_configs : - job_name : 'diode-auth' static_configs : - targets : [ 'diode-auth:9090' ] - job_name : 'diode-ingester' static_configs : - targets : [ 'diode-ingester:9091' ] - job_name : 'diode-reconciler' static_configs : - targets : [ 'diode-reconciler:9092' ] OTLP Configuration Environment Variables export TELEMETRY_EXPORTER = otlp export TELEMETRY_OTLP_ENDPOINT = http://otel-collector:4317 export TELEMETRY_OTLP_INSECURE = true export TELEMETRY_OTLP_TIMEOUT = 30s export TELEMETRY_OTLP_COMPRESSION = gzip OpenTelemetry Collector Configuration receivers : otlp : protocols : grpc : endpoint : 0.0.0.0:4317 http : endpoint : 0.0.0.0:4318 processors : batch : exporters : prometheus : endpoint : \"0.0.0.0:8889\" logging : loglevel : debug service : pipelines : metrics : receivers : [ otlp ] processors : [ batch ] exporters : [ prometheus , logging ] Troubleshooting Common Issues Metrics not appearing Check the exporter configuration Verify the service is running Check firewall rules for metrics ports Prometheus scraping failures Verify the target endpoint is accessible Check the scrape configuration Ensure the service is exposing metrics on the correct port OTLP connection issues Verify the collector endpoint is reachable Check TLS/insecure settings Validate the collector configuration Debugging Enable console exporter export TELEMETRY_EXPORTER = console Check service logs docker compose logs diode-auth docker compose logs diode-ingester docker compose logs diode-reconciler Verify metrics endpoints curl http://localhost:9090/metrics curl http://localhost:9091/metrics curl http://localhost:9092/metrics Grafana Dashboard Sample Queries Service Health # Service uptime up { job =~ \" diode-.* \"} # Service restarts increase ( diode_ * _service_startup_attempts_total [ 5m ] ) Ingestion Metrics # Ingestion rate rate ( diode_ingester_ingest_requests_total [ 5m ] ) # Entities ingested rate ( diode_ingester_ingest_entities_total [ 5m ] ) Reconciliation Metrics # Message processing rate rate ( diode_reconciler_handle_message_total [ 5m ] ) # Change set creation rate rate ( diode_reconciler_change_set_create_total [ 5m ] ) # Change set application rate rate ( diode_reconciler_change_set_apply_total [ 5m ] ) Dashboard JSON A sample Grafana dashboard configuration is available in the Diode repository . References OpenTelemetry Documentation Prometheus Documentation Grafana Documentation","title":"Observability"},{"location":"netbox-extensions/diode/observability/metrics/#metrics","text":"","title":"Metrics"},{"location":"netbox-extensions/diode/observability/metrics/#available-metrics","text":"","title":"Available Metrics"},{"location":"netbox-extensions/diode/observability/metrics/#core-metrics-all-services","text":"diode_{service}_service_info - Service information diode_{service}_service_startup_attempts_total - Startup attempts","title":"Core Metrics (All Services)"},{"location":"netbox-extensions/diode/observability/metrics/#service-specific-metrics","text":"","title":"Service-Specific Metrics"},{"location":"netbox-extensions/diode/observability/metrics/#configuration-overview","text":"Diode's telemetry implementation supports multiple configuration methods and exporters.","title":"Configuration Overview"},{"location":"netbox-extensions/diode/observability/metrics/#exporters","text":"prometheus : Serve metrics on /metrics endpoint otlp : Send to OpenTelemetry Collector console : Output to stdout (debugging) none : Disable metrics","title":"Exporters"},{"location":"netbox-extensions/diode/observability/metrics/#environment-variables","text":"","title":"Environment Variables"},{"location":"netbox-extensions/diode/observability/metrics/#core-configuration","text":"Variable Description Default Required Example TELEMETRY_SERVICE_NAME Service identifier Auto-detected No netboxlabs/diode/auth TELEMETRY_EXPORTER Metrics exporter prometheus No prometheus , otlp , console , none TELEMETRY_PROMETHEUS_PORT Prometheus port 9090 No 9090 TELEMETRY_OTLP_ENDPOINT OTLP endpoint - Yes (if OTLP) http://collector:4317 TELEMETRY_OTLP_INSECURE OTLP insecure false No true , false","title":"Core Configuration"},{"location":"netbox-extensions/diode/observability/metrics/#advanced-configuration","text":"Variable Description Default Required Example TELEMETRY_OTLP_TIMEOUT OTLP timeout 30s No 30s TELEMETRY_OTLP_COMPRESSION OTLP compression none No gzip , none TELEMETRY_RESOURCE_ATTRIBUTES Resource attributes - No service.version=1.0.0","title":"Advanced Configuration"},{"location":"netbox-extensions/diode/observability/metrics/#docker-compose-example","text":"version : '3.8' services : diode-auth : image : netboxlabs/diode-auth:latest environment : - TELEMETRY_SERVICE_NAME=netboxlabs/diode/auth - TELEMETRY_EXPORTER=prometheus - TELEMETRY_PROMETHEUS_PORT=9090 ports : - \"9090:9090\" diode-ingester : image : netboxlabs/diode-ingester:latest environment : - TELEMETRY_SERVICE_NAME=netboxlabs/diode/ingester - TELEMETRY_EXPORTER=prometheus - TELEMETRY_PROMETHEUS_PORT=9091 ports : - \"9091:9091\" diode-reconciler : image : netboxlabs/diode-reconciler:latest environment : - TELEMETRY_SERVICE_NAME=netboxlabs/diode/reconciler - TELEMETRY_EXPORTER=prometheus - TELEMETRY_PROMETHEUS_PORT=9092 ports : - \"9092:9092\" prometheus : image : prom/prometheus:latest ports : - \"9093:9090\" volumes : - ./prometheus.yml:/etc/prometheus/prometheus.yml command : - '--config.file=/etc/prometheus/prometheus.yml' - '--storage.tsdb.path=/prometheus' - '--web.console.libraries=/etc/prometheus/console_libraries' - '--web.console.templates=/etc/prometheus/consoles' - '--web.enable-lifecycle'","title":"Docker Compose Example"},{"location":"netbox-extensions/diode/observability/metrics/#prometheus-configuration","text":"global : scrape_interval : 15s scrape_configs : - job_name : 'diode-auth' static_configs : - targets : [ 'diode-auth:9090' ] - job_name : 'diode-ingester' static_configs : - targets : [ 'diode-ingester:9091' ] - job_name : 'diode-reconciler' static_configs : - targets : [ 'diode-reconciler:9092' ]","title":"Prometheus Configuration"},{"location":"netbox-extensions/diode/observability/metrics/#otlp-configuration","text":"","title":"OTLP Configuration"},{"location":"netbox-extensions/diode/observability/metrics/#environment-variables_1","text":"export TELEMETRY_EXPORTER = otlp export TELEMETRY_OTLP_ENDPOINT = http://otel-collector:4317 export TELEMETRY_OTLP_INSECURE = true export TELEMETRY_OTLP_TIMEOUT = 30s export TELEMETRY_OTLP_COMPRESSION = gzip","title":"Environment Variables"},{"location":"netbox-extensions/diode/observability/metrics/#opentelemetry-collector-configuration","text":"receivers : otlp : protocols : grpc : endpoint : 0.0.0.0:4317 http : endpoint : 0.0.0.0:4318 processors : batch : exporters : prometheus : endpoint : \"0.0.0.0:8889\" logging : loglevel : debug service : pipelines : metrics : receivers : [ otlp ] processors : [ batch ] exporters : [ prometheus , logging ]","title":"OpenTelemetry Collector Configuration"},{"location":"netbox-extensions/diode/observability/metrics/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"netbox-extensions/diode/observability/metrics/#common-issues","text":"Metrics not appearing Check the exporter configuration Verify the service is running Check firewall rules for metrics ports Prometheus scraping failures Verify the target endpoint is accessible Check the scrape configuration Ensure the service is exposing metrics on the correct port OTLP connection issues Verify the collector endpoint is reachable Check TLS/insecure settings Validate the collector configuration","title":"Common Issues"},{"location":"netbox-extensions/diode/observability/metrics/#debugging","text":"Enable console exporter export TELEMETRY_EXPORTER = console Check service logs docker compose logs diode-auth docker compose logs diode-ingester docker compose logs diode-reconciler Verify metrics endpoints curl http://localhost:9090/metrics curl http://localhost:9091/metrics curl http://localhost:9092/metrics","title":"Debugging"},{"location":"netbox-extensions/diode/observability/metrics/#grafana-dashboard","text":"","title":"Grafana Dashboard"},{"location":"netbox-extensions/diode/observability/metrics/#sample-queries","text":"","title":"Sample Queries"},{"location":"netbox-extensions/diode/observability/metrics/#dashboard-json","text":"A sample Grafana dashboard configuration is available in the Diode repository .","title":"Dashboard JSON"},{"location":"netbox-extensions/diode/observability/metrics/#references","text":"OpenTelemetry Documentation Prometheus Documentation Grafana Documentation","title":"References"},{"location":"netbox-extensions/diode/protobuf/diode-proto/","text":"Protocol Documentation This document describes the Diode protocol buffer definitions used for data ingestion and communication between Diode services and NetBox. Overview The Diode protocol is defined using Protocol Buffers (protobuf) and includes definitions for all major NetBox data models including: Network Infrastructure : Devices, Interfaces, Cables, Circuits IP Management : IP Addresses, Prefixes, Aggregates, VLANs Data Center : Racks, Locations, Sites, Clusters Virtualization : Virtual Machines, Clusters, Platforms Organization : Tenants, Contacts, Providers Service Definition The main service endpoint is defined as: service IngesterService { // Ingest data entities into NetBox rpc Ingest ( stream IngestRequest ) returns ( stream IngestResponse ); } Core Message Types IngestRequest The primary message type for sending data to Diode: message IngestRequest { // Unique identifier for the data source string data_source_id = 1 ; // Entity being ingested Entity entity = 2 ; } Entity Wrapper for all supported NetBox entities: message Entity { oneof entity { // DCIM entities Site site = 1 ; Location location = 2 ; Device device = 3 ; Interface interface = 4 ; Cable cable = 5 ; // IPAM entities Prefix prefix = 6 ; IPAddress ip_address = 7 ; VLAN vlan = 8 ; // Circuits entities Circuit circuit = 9 ; CircuitTermination circuit_termination = 10 ; // Tenancy entities Tenant tenant = 11 ; // Virtualization entities VirtualMachine virtual_machine = 12 ; // And many more... } } Data Models Core Infrastructure Site Represents a physical location or facility: message Site { string name = 1 ; string slug = 2 ; string status = 3 ; string description = 4 ; string facility = 5 ; repeated string tags = 6 ; map < string , CustomFieldValue > custom_fields = 7 ; } Device Represents a network device: message Device { string name = 1 ; string device_type = 2 ; string site = 3 ; string location = 4 ; string role = 5 ; string platform = 6 ; string serial = 7 ; string asset_tag = 8 ; string status = 9 ; repeated string tags = 10 ; map < string , CustomFieldValue > custom_fields = 11 ; } Interface Represents a network interface: message Interface { string device = 1 ; string name = 2 ; string type = 3 ; string description = 4 ; string mac_address = 5 ; bool enabled = 6 ; int32 mtu = 7 ; repeated string tags = 8 ; map < string , CustomFieldValue > custom_fields = 9 ; } IP Address Management Prefix Represents an IP prefix: message Prefix { string prefix = 1 ; string status = 2 ; string vrf = 3 ; string tenant = 4 ; string site = 5 ; string role = 6 ; string description = 7 ; repeated string tags = 8 ; map < string , CustomFieldValue > custom_fields = 9 ; } IPAddress Represents an IP address: message IPAddress { string address = 1 ; string status = 2 ; string vrf = 3 ; string tenant = 4 ; string description = 5 ; string dns_name = 6 ; repeated string tags = 7 ; map < string , CustomFieldValue > custom_fields = 8 ; } Custom Fields All entities support custom fields through a flexible map structure: message CustomFieldValue { oneof value { string string_value = 1 ; int64 integer_value = 2 ; bool boolean_value = 3 ; double float_value = 4 ; string date_value = 5 ; string url_value = 6 ; string json_value = 7 ; repeated string multi_select_value = 8 ; } } Response Messages IngestResponse Response message containing ingestion results: message IngestResponse { // Operation result string state = 1 ; // Entity that was processed Entity entity = 2 ; // Any errors that occurred repeated Error errors = 3 ; } Usage Examples Python SDK Example from diode_sdk import DiodeClient # Initialize client client = DiodeClient ( target = \"grpc://diode.example.com:8080/diode\" , client_id = \"your-client-id\" , client_secret = \"your-client-secret\" ) # Create a site site = Site ( name = \"New York DC\" , slug = \"ny-dc\" , status = \"active\" , description = \"Primary data center in New York\" ) # Ingest the site response = client . ingest ( site ) print ( f \"Ingestion result: { response . state } \" ) Go SDK Example package main import ( \"context\" \"github.com/netboxlabs/diode-sdk-go/diode\" ) func main () { // Initialize client client , err := diode . NewClient ( \"grpc://diode.example.com:8080/diode\" , \"your-client-id\" , \"your-client-secret\" , ) if err != nil { panic ( err ) } // Create a device device := & diode . Device { Name : \"switch01\" , DeviceType : \"cisco-catalyst-9300\" , Site : \"ny-dc\" , Status : \"active\" , } // Ingest the device response , err := client . Ingest ( context . Background (), device ) if err != nil { panic ( err ) } fmt . Printf ( \"Ingestion result: %s\\n\" , response . State ) } References Diode Protocol Repository Python SDK Documentation Go SDK Documentation Protocol Buffers Documentation","title":"Protobuf Reference"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#protocol-documentation","text":"This document describes the Diode protocol buffer definitions used for data ingestion and communication between Diode services and NetBox.","title":"Protocol Documentation"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#overview","text":"The Diode protocol is defined using Protocol Buffers (protobuf) and includes definitions for all major NetBox data models including: Network Infrastructure : Devices, Interfaces, Cables, Circuits IP Management : IP Addresses, Prefixes, Aggregates, VLANs Data Center : Racks, Locations, Sites, Clusters Virtualization : Virtual Machines, Clusters, Platforms Organization : Tenants, Contacts, Providers","title":"Overview"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#service-definition","text":"The main service endpoint is defined as: service IngesterService { // Ingest data entities into NetBox rpc Ingest ( stream IngestRequest ) returns ( stream IngestResponse ); }","title":"Service Definition"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#core-message-types","text":"","title":"Core Message Types"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#ingestrequest","text":"The primary message type for sending data to Diode: message IngestRequest { // Unique identifier for the data source string data_source_id = 1 ; // Entity being ingested Entity entity = 2 ; }","title":"IngestRequest"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#entity","text":"Wrapper for all supported NetBox entities: message Entity { oneof entity { // DCIM entities Site site = 1 ; Location location = 2 ; Device device = 3 ; Interface interface = 4 ; Cable cable = 5 ; // IPAM entities Prefix prefix = 6 ; IPAddress ip_address = 7 ; VLAN vlan = 8 ; // Circuits entities Circuit circuit = 9 ; CircuitTermination circuit_termination = 10 ; // Tenancy entities Tenant tenant = 11 ; // Virtualization entities VirtualMachine virtual_machine = 12 ; // And many more... } }","title":"Entity"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#data-models","text":"","title":"Data Models"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#core-infrastructure","text":"","title":"Core Infrastructure"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#ip-address-management","text":"","title":"IP Address Management"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#custom-fields","text":"All entities support custom fields through a flexible map structure: message CustomFieldValue { oneof value { string string_value = 1 ; int64 integer_value = 2 ; bool boolean_value = 3 ; double float_value = 4 ; string date_value = 5 ; string url_value = 6 ; string json_value = 7 ; repeated string multi_select_value = 8 ; } }","title":"Custom Fields"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#response-messages","text":"","title":"Response Messages"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#ingestresponse","text":"Response message containing ingestion results: message IngestResponse { // Operation result string state = 1 ; // Entity that was processed Entity entity = 2 ; // Any errors that occurred repeated Error errors = 3 ; }","title":"IngestResponse"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#usage-examples","text":"","title":"Usage Examples"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#python-sdk-example","text":"from diode_sdk import DiodeClient # Initialize client client = DiodeClient ( target = \"grpc://diode.example.com:8080/diode\" , client_id = \"your-client-id\" , client_secret = \"your-client-secret\" ) # Create a site site = Site ( name = \"New York DC\" , slug = \"ny-dc\" , status = \"active\" , description = \"Primary data center in New York\" ) # Ingest the site response = client . ingest ( site ) print ( f \"Ingestion result: { response . state } \" )","title":"Python SDK Example"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#go-sdk-example","text":"package main import ( \"context\" \"github.com/netboxlabs/diode-sdk-go/diode\" ) func main () { // Initialize client client , err := diode . NewClient ( \"grpc://diode.example.com:8080/diode\" , \"your-client-id\" , \"your-client-secret\" , ) if err != nil { panic ( err ) } // Create a device device := & diode . Device { Name : \"switch01\" , DeviceType : \"cisco-catalyst-9300\" , Site : \"ny-dc\" , Status : \"active\" , } // Ingest the device response , err := client . Ingest ( context . Background (), device ) if err != nil { panic ( err ) } fmt . Printf ( \"Ingestion result: %s\\n\" , response . State ) }","title":"Go SDK Example"},{"location":"netbox-extensions/diode/protobuf/diode-proto/#references","text":"Diode Protocol Repository Python SDK Documentation Go SDK Documentation Protocol Buffers Documentation","title":"References"},{"location":"netbox-integrations/netbox-ansible-collection/","text":"NetBox Integrations NetBox Ansible Collection - Quick Start A short guide to getting started with the Ansible Collection for Netbox. The collection is available from Ansible Galaxy , and NetBox Labs and Red Hat customers can access the certified and supported collection, via Ansible Automation Hub . This doc is based on the Galaxy installation and shows how to use the collection from the command line, rather than from within Ansible Automation Hub. Code Examples All code used in the examples below can be found in the NetBox Learning git repository , in the directory netbox-ansible-collection-quick-start . Collection Overview The NetBox Ansible project provides an Ansible collection for interacting with NetBox, the leading solution for modeling and documenting modern networks. By combining the traditional disciplines of IP address management (IPAM) and datacenter infrastructure management (DCIM) with powerful APIs and extensions, NetBox provides the ideal \"source of truth\" to power network automation. This Ansible collection consists of a set of modules to define the intended network state in NetBox, along with plugins to drive automation of the network using data from NetBox. Requirements You must be running one of the two most recent releases of NetBox A NetBox write-enabled API token when using modules or a read-only token for the nb_lookup and nb_inventory plugins. Python 3.10+ Python modules: pytz pynetbox Ansible 2.15+ Note This guide assumes you have a working NetBox installation, populated with some device data of your own. The easiest way to do this is to set up a NetBox Cloud Free Plan instance, and you can be up an running in seconds. The NetBox instance used in this example has 2 sites with some devices already added: Getting Started with the Collection Installation and Setup Clone the Git repo and change into the netbox-ansible-collection-quick-start directory: git clone https://github.com/netboxlabs/netbox-learning.git cd netbox-learning/netbox-ansible-collection-quick-start Create and activate a Python 3 virtual environment: python3 -m venv ./venv source venv/bin/activate Install Python Modules and Ansible pip install pytz pip install pynetbox pip install ansible Install the NetBox Ansible Collection. Before using this collection, you need to install it with the Ansible Galaxy command-line tool: ansible-galaxy collection install netbox.netbox 5. Set environment variables for your NetBox API token and URL of your NetBox instance: export NETBOX_API=<YOUR_NETBOX_URL> (note - must include http:// or https://) export NETBOX_TOKEN=<YOUR_NETBOX_API_TOKEN> Use Case 1 - NetBox as a Dynamic Inventory Source for Ansible The Inventory Plugin component of the collection is used to dynamically generate the inventory from NetBox to be used in Ansible playbooks. In the example ansible.cfg file we are specifying that the inventory should be sourced from the file netbox_inv.yml : # ansible.cfg [defaults] inventory = ./netbox_inv.yml The plugin is highly configurable in terms of defining returned hosts and groupings etc in the inventory, so please consult the docs . In this case we are grouping the returned hosts by the device_roles and sites as defined in the NetBox database: # netbox_inv.yml plugin: netbox.netbox.nb_inventory validate_certs: False group_by: - device_roles - sites To view a graph of the inventory retrieved from NetBox, you can run the ansible-inventory command and use the -i flag to specify the netbox_inv.yml file as the source, followed by --graph : ansible-inventory -i netbox_inv.yml --graph From the returned output we can see that our NetBox instance has returned the data expected grouped the devices by device_roles and sites : @all: |--@device_roles_access: | |--sw3 | |--sw4 |--@device_roles_access_switch: | |--SWITCH-1 |--@device_roles_distribution: | |--sw1 | |--sw2 |--@device_roles_security_appliance: | |--SEC-APP-1 |--@device_roles_wireless_ap: | |--AP-1 |--@sites_cisco_devnet: | |--sw1 | |--sw2 | |--sw3 | |--sw4 |--@sites_meraki_sandbox: | |--AP-1 | |--SEC-APP-1 | |--SWITCH-1 |--@ungrouped: To list all the devices in the inventory, use the same command, but with the --list suffix: ansible-inventory -i netbox_inv.yml --list The output below has been shortened to show the inventory data returned for a single device, and all of this can be used in further playbooks to automate operations against the target device: \"sw1\": { \"ansible_host\": \"10.10.20.175\", \"custom_fields\": { \"ccc_device_id\": \"32446e0a-032b-4724-93e9-acbbab47371b\", \"cisco_catalyst_center\": \"sandboxdnac.cisco.com\" }, \"device_roles\": [ \"distribution\" ], \"device_types\": [ \"c9kv-uadp-8p\" ], \"is_virtual\": false, \"local_context_data\": [ null ], \"locations\": [], \"manufacturers\": [ \"cisco\" ], \"platforms\": [ \"ios-xe\" ], \"primary_ip4\": \"10.10.20.175\", \"regions\": [], \"serial\": \"9SB9FYAFA2O\", \"services\": [], \"site_groups\": [], \"sites\": [ \"cisco-devnet\" ], \"status\": { \"label\": \"Active\", \"value\": \"active\" }, \"tags\": [] } To run a playbook that uses the dynamic inventory, specify the inventory file when you run the playbook: ansible-playbook -i netbox_inv.yml <PLAYBOOK NAME> To target hosts or groups from the inventory in your playbook, reference the hosts or groups as normal in the playbook: --- - name: Playbook using NetBox Inventory Plugin for Ansible hosts: device_roles_distribution, device_roles_access Use Case 2 - Define Intended Network State in NetBox Define the intended state of your network in NetBox, by interacting with the NetBox database to define objects and their associated state in the following ways: Make sure objects exit Update objects if they do exist Remove objects if they do not not exist For example, to make sure a new aggregate network prefix exists: tasks: - name: Create aggregate within NetBox with only required information netbox.netbox.netbox_aggregate: netbox_url: http://netbox.local netbox_token: thisIsMyToken data: prefix: 192.168.0.0/16 rir: Test RIR state: present The example playbook populate_netbox_ipam.yml will ensure that the RFC1918 IPv4 aggregates exist in NetBox, as well as some predefined Prefix and VLAN Roles: # populate_netbox_ipam.yml --- - name: PLAY 1 - Create RIRs connection: local hosts: localhost gather_facts: False roles: - role: create_rirs tags: rirs - name: PLAY 2 - Create Aggregates connection: local hosts: localhost gather_facts: False roles: - role: create_aggregates tags: aggregates - name: PLAY 3 - Create Prefix and VLAN Roles connection: local hosts: localhost gather_facts: False roles: - role: create_prefix_and_vlan_roles tags: prefix_and_roles The playbook is modularized using roles , for example the file roles/create_aggregates/tasks/main.yml loops over the list of aggregates defined in the file roles/create_aggregates/vars/main.yml : # roles/create_aggregates/tasks/main.yml --- - name: Create Aggregates within NetBox netbox.netbox.netbox_aggregate: netbox_url: \"{{ lookup('ansible.builtin.env', 'NETBOX_API') }}\" netbox_token: \"{{ lookup('ansible.builtin.env', 'NETBOX_TOKEN') }}\" data: \"{{ aggregate }}\" state: present loop: \"{{ ipam_aggregates }}\" loop_control: loop_var: aggregate label: \"{{ aggregate['prefix']}}\" # roles/create_aggregates/vars/main.yml --- ipam_aggregates: - prefix: 10.0.0.0/8 rir: RFC 1918 - prefix: 172.16.0.0/12 rir: RFC 1918 - prefix: 192.168.0.0/16 rir: RFC 1918 Running the playbook results in the following output: ansible-playbook populate_netbox_ipam.yml PLAY [PLAY 1 - Create RIRs] *********************************************************************************************************************************** TASK [create_rirs : Create RIRs] ****************************************************************************************************************************** ok: [localhost] => (item=RFC 1918) PLAY [PLAY 2 - Create Aggregates] ***************************************************************************************************************************** TASK [create_aggregates : Create Aggregates within NetBox] **************************************************************************************************** ok: [localhost] => (item=10.0.0.0/8) ok: [localhost] => (item=172.16.0.0/12) ok: [localhost] => (item=192.168.0.0/16) PLAY [PLAY 3 - Create Prefix and VLAN Roles] ****************************************************************************************************************** TASK [create_prefix_and_vlan_roles : Create Prefix and VLAN Roles within NetBox] ****************************************************************************** ok: [localhost] => (item=Branch_Data) ok: [localhost] => (item=Branch_Voice) ok: [localhost] => (item=Branch_WiFi) ok: [localhost] => (item=Guest_WiFi) ok: [localhost] => (item=Network_Management) ok: [localhost] => (item=Point_to_Point) PLAY RECAP **************************************************************************************************************************************************** localhost : ok=3 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 Use Case 3 - Query and Return Elements from NetBox Use the Lookup Plugin to query NetBox and return data to drive network automation, such as lists of devices, device configurations, prefixes and IP addresses etc. In the example playbook lookup_site_and_device_data.yml we first of all query the NetBox sites API endpoint and then print a list of all the sites. Then we query the devices API endpoint, filter on the site cisco-devnet and print a list of the devices at that site: # lookup_site_and_device_data.yml --- - name: Lookup NetBox Site and Device Data hosts: localhost gather_facts: no vars: netbox_url: \"{{ lookup('ansible.builtin.env', 'NETBOX_API') }}\" netbox_token: \"{{ lookup('ansible.builtin.env', 'NETBOX_TOKEN') }}\" tasks: - name: \"Query NetBox for all sites\" set_fact: sites: \"{{ query('netbox.netbox.nb_lookup', 'sites', api_endpoint=netbox_url, token=netbox_token) }}\" - name: \"Print the list of sites\" debug: msg: \"{{ sites | json_query('[*].value.name') }}\" - name: \"Query NetBox for devices at the Cisco DevNet Site\" set_fact: devices: \"{{ query('netbox.netbox.nb_lookup', 'devices', api_filter='site=cisco-devnet', api_endpoint=netbox_url, token=netbox_token) }}\" - name: \"Print a list of devices at Cisco DevNet Site\" debug: msg: \"{{ devices | json_query('[*].value.name') }}\" The playbook run results in the following output: ansible-playbook lookup_site_and_device_data.yml PLAY [Lookup NetBox Site and Device Data] ********************************************************************************************************************* TASK [Query NetBox for all sites] ***************************************************************************************************************************** ok: [localhost] TASK [Print the list of sites] ******************************************************************************************************************************** ok: [localhost] => msg: - Cisco DevNet - Meraki Sandbox TASK [Query NetBox for devices at the Cisco DevNet Site] ****************************************************************************************************** ok: [localhost] TASK [Print a list of devices at Cisco DevNet Site] *********************************************************************************************************** ok: [localhost] => msg: - sw1 - sw2 - sw3 - sw4 PLAY RECAP **************************************************************************************************************************************************** localhost : ok=4 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 References Collection on Ansible Galaxy Collection on Ansible Automation Hub Docs for NetBox Inventory Plugin Docs for NetBox Lookup Plugin","title":"NetBox Ansible Collection"},{"location":"netbox-integrations/netbox-ansible-collection/#netbox-integrations","text":"","title":"NetBox Integrations"},{"location":"netbox-integrations/netbox-ansible-collection/#netbox-ansible-collection-quick-start","text":"A short guide to getting started with the Ansible Collection for Netbox. The collection is available from Ansible Galaxy , and NetBox Labs and Red Hat customers can access the certified and supported collection, via Ansible Automation Hub . This doc is based on the Galaxy installation and shows how to use the collection from the command line, rather than from within Ansible Automation Hub.","title":"NetBox Ansible Collection - Quick Start"},{"location":"netbox-integrations/netbox-ansible-collection/#code-examples","text":"All code used in the examples below can be found in the NetBox Learning git repository , in the directory netbox-ansible-collection-quick-start .","title":"Code Examples"},{"location":"netbox-integrations/netbox-ansible-collection/#collection-overview","text":"The NetBox Ansible project provides an Ansible collection for interacting with NetBox, the leading solution for modeling and documenting modern networks. By combining the traditional disciplines of IP address management (IPAM) and datacenter infrastructure management (DCIM) with powerful APIs and extensions, NetBox provides the ideal \"source of truth\" to power network automation. This Ansible collection consists of a set of modules to define the intended network state in NetBox, along with plugins to drive automation of the network using data from NetBox.","title":"Collection Overview"},{"location":"netbox-integrations/netbox-ansible-collection/#requirements","text":"You must be running one of the two most recent releases of NetBox A NetBox write-enabled API token when using modules or a read-only token for the nb_lookup and nb_inventory plugins. Python 3.10+ Python modules: pytz pynetbox Ansible 2.15+ Note This guide assumes you have a working NetBox installation, populated with some device data of your own. The easiest way to do this is to set up a NetBox Cloud Free Plan instance, and you can be up an running in seconds. The NetBox instance used in this example has 2 sites with some devices already added:","title":"Requirements"},{"location":"netbox-integrations/netbox-ansible-collection/#getting-started-with-the-collection","text":"","title":"Getting Started with the Collection"},{"location":"netbox-integrations/netbox-ansible-collection/#installation-and-setup","text":"Clone the Git repo and change into the netbox-ansible-collection-quick-start directory: git clone https://github.com/netboxlabs/netbox-learning.git cd netbox-learning/netbox-ansible-collection-quick-start Create and activate a Python 3 virtual environment: python3 -m venv ./venv source venv/bin/activate Install Python Modules and Ansible pip install pytz pip install pynetbox pip install ansible Install the NetBox Ansible Collection. Before using this collection, you need to install it with the Ansible Galaxy command-line tool: ansible-galaxy collection install netbox.netbox 5. Set environment variables for your NetBox API token and URL of your NetBox instance: export NETBOX_API=<YOUR_NETBOX_URL> (note - must include http:// or https://) export NETBOX_TOKEN=<YOUR_NETBOX_API_TOKEN>","title":"Installation and Setup"},{"location":"netbox-integrations/netbox-ansible-collection/#use-case-1-netbox-as-a-dynamic-inventory-source-for-ansible","text":"The Inventory Plugin component of the collection is used to dynamically generate the inventory from NetBox to be used in Ansible playbooks. In the example ansible.cfg file we are specifying that the inventory should be sourced from the file netbox_inv.yml : # ansible.cfg [defaults] inventory = ./netbox_inv.yml The plugin is highly configurable in terms of defining returned hosts and groupings etc in the inventory, so please consult the docs . In this case we are grouping the returned hosts by the device_roles and sites as defined in the NetBox database: # netbox_inv.yml plugin: netbox.netbox.nb_inventory validate_certs: False group_by: - device_roles - sites To view a graph of the inventory retrieved from NetBox, you can run the ansible-inventory command and use the -i flag to specify the netbox_inv.yml file as the source, followed by --graph : ansible-inventory -i netbox_inv.yml --graph From the returned output we can see that our NetBox instance has returned the data expected grouped the devices by device_roles and sites : @all: |--@device_roles_access: | |--sw3 | |--sw4 |--@device_roles_access_switch: | |--SWITCH-1 |--@device_roles_distribution: | |--sw1 | |--sw2 |--@device_roles_security_appliance: | |--SEC-APP-1 |--@device_roles_wireless_ap: | |--AP-1 |--@sites_cisco_devnet: | |--sw1 | |--sw2 | |--sw3 | |--sw4 |--@sites_meraki_sandbox: | |--AP-1 | |--SEC-APP-1 | |--SWITCH-1 |--@ungrouped: To list all the devices in the inventory, use the same command, but with the --list suffix: ansible-inventory -i netbox_inv.yml --list The output below has been shortened to show the inventory data returned for a single device, and all of this can be used in further playbooks to automate operations against the target device: \"sw1\": { \"ansible_host\": \"10.10.20.175\", \"custom_fields\": { \"ccc_device_id\": \"32446e0a-032b-4724-93e9-acbbab47371b\", \"cisco_catalyst_center\": \"sandboxdnac.cisco.com\" }, \"device_roles\": [ \"distribution\" ], \"device_types\": [ \"c9kv-uadp-8p\" ], \"is_virtual\": false, \"local_context_data\": [ null ], \"locations\": [], \"manufacturers\": [ \"cisco\" ], \"platforms\": [ \"ios-xe\" ], \"primary_ip4\": \"10.10.20.175\", \"regions\": [], \"serial\": \"9SB9FYAFA2O\", \"services\": [], \"site_groups\": [], \"sites\": [ \"cisco-devnet\" ], \"status\": { \"label\": \"Active\", \"value\": \"active\" }, \"tags\": [] } To run a playbook that uses the dynamic inventory, specify the inventory file when you run the playbook: ansible-playbook -i netbox_inv.yml <PLAYBOOK NAME> To target hosts or groups from the inventory in your playbook, reference the hosts or groups as normal in the playbook: --- - name: Playbook using NetBox Inventory Plugin for Ansible hosts: device_roles_distribution, device_roles_access","title":"Use Case 1 - NetBox as a Dynamic Inventory Source for Ansible"},{"location":"netbox-integrations/netbox-ansible-collection/#use-case-2-define-intended-network-state-in-netbox","text":"Define the intended state of your network in NetBox, by interacting with the NetBox database to define objects and their associated state in the following ways: Make sure objects exit Update objects if they do exist Remove objects if they do not not exist For example, to make sure a new aggregate network prefix exists: tasks: - name: Create aggregate within NetBox with only required information netbox.netbox.netbox_aggregate: netbox_url: http://netbox.local netbox_token: thisIsMyToken data: prefix: 192.168.0.0/16 rir: Test RIR state: present The example playbook populate_netbox_ipam.yml will ensure that the RFC1918 IPv4 aggregates exist in NetBox, as well as some predefined Prefix and VLAN Roles: # populate_netbox_ipam.yml --- - name: PLAY 1 - Create RIRs connection: local hosts: localhost gather_facts: False roles: - role: create_rirs tags: rirs - name: PLAY 2 - Create Aggregates connection: local hosts: localhost gather_facts: False roles: - role: create_aggregates tags: aggregates - name: PLAY 3 - Create Prefix and VLAN Roles connection: local hosts: localhost gather_facts: False roles: - role: create_prefix_and_vlan_roles tags: prefix_and_roles The playbook is modularized using roles , for example the file roles/create_aggregates/tasks/main.yml loops over the list of aggregates defined in the file roles/create_aggregates/vars/main.yml : # roles/create_aggregates/tasks/main.yml --- - name: Create Aggregates within NetBox netbox.netbox.netbox_aggregate: netbox_url: \"{{ lookup('ansible.builtin.env', 'NETBOX_API') }}\" netbox_token: \"{{ lookup('ansible.builtin.env', 'NETBOX_TOKEN') }}\" data: \"{{ aggregate }}\" state: present loop: \"{{ ipam_aggregates }}\" loop_control: loop_var: aggregate label: \"{{ aggregate['prefix']}}\" # roles/create_aggregates/vars/main.yml --- ipam_aggregates: - prefix: 10.0.0.0/8 rir: RFC 1918 - prefix: 172.16.0.0/12 rir: RFC 1918 - prefix: 192.168.0.0/16 rir: RFC 1918 Running the playbook results in the following output: ansible-playbook populate_netbox_ipam.yml PLAY [PLAY 1 - Create RIRs] *********************************************************************************************************************************** TASK [create_rirs : Create RIRs] ****************************************************************************************************************************** ok: [localhost] => (item=RFC 1918) PLAY [PLAY 2 - Create Aggregates] ***************************************************************************************************************************** TASK [create_aggregates : Create Aggregates within NetBox] **************************************************************************************************** ok: [localhost] => (item=10.0.0.0/8) ok: [localhost] => (item=172.16.0.0/12) ok: [localhost] => (item=192.168.0.0/16) PLAY [PLAY 3 - Create Prefix and VLAN Roles] ****************************************************************************************************************** TASK [create_prefix_and_vlan_roles : Create Prefix and VLAN Roles within NetBox] ****************************************************************************** ok: [localhost] => (item=Branch_Data) ok: [localhost] => (item=Branch_Voice) ok: [localhost] => (item=Branch_WiFi) ok: [localhost] => (item=Guest_WiFi) ok: [localhost] => (item=Network_Management) ok: [localhost] => (item=Point_to_Point) PLAY RECAP **************************************************************************************************************************************************** localhost : ok=3 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0","title":"Use Case 2 - Define Intended Network State in NetBox"},{"location":"netbox-integrations/netbox-ansible-collection/#use-case-3-query-and-return-elements-from-netbox","text":"Use the Lookup Plugin to query NetBox and return data to drive network automation, such as lists of devices, device configurations, prefixes and IP addresses etc. In the example playbook lookup_site_and_device_data.yml we first of all query the NetBox sites API endpoint and then print a list of all the sites. Then we query the devices API endpoint, filter on the site cisco-devnet and print a list of the devices at that site: # lookup_site_and_device_data.yml --- - name: Lookup NetBox Site and Device Data hosts: localhost gather_facts: no vars: netbox_url: \"{{ lookup('ansible.builtin.env', 'NETBOX_API') }}\" netbox_token: \"{{ lookup('ansible.builtin.env', 'NETBOX_TOKEN') }}\" tasks: - name: \"Query NetBox for all sites\" set_fact: sites: \"{{ query('netbox.netbox.nb_lookup', 'sites', api_endpoint=netbox_url, token=netbox_token) }}\" - name: \"Print the list of sites\" debug: msg: \"{{ sites | json_query('[*].value.name') }}\" - name: \"Query NetBox for devices at the Cisco DevNet Site\" set_fact: devices: \"{{ query('netbox.netbox.nb_lookup', 'devices', api_filter='site=cisco-devnet', api_endpoint=netbox_url, token=netbox_token) }}\" - name: \"Print a list of devices at Cisco DevNet Site\" debug: msg: \"{{ devices | json_query('[*].value.name') }}\" The playbook run results in the following output: ansible-playbook lookup_site_and_device_data.yml PLAY [Lookup NetBox Site and Device Data] ********************************************************************************************************************* TASK [Query NetBox for all sites] ***************************************************************************************************************************** ok: [localhost] TASK [Print the list of sites] ******************************************************************************************************************************** ok: [localhost] => msg: - Cisco DevNet - Meraki Sandbox TASK [Query NetBox for devices at the Cisco DevNet Site] ****************************************************************************************************** ok: [localhost] TASK [Print a list of devices at Cisco DevNet Site] *********************************************************************************************************** ok: [localhost] => msg: - sw1 - sw2 - sw3 - sw4 PLAY RECAP **************************************************************************************************************************************************** localhost : ok=4 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0","title":"Use Case 3 - Query and Return Elements from NetBox"},{"location":"netbox-integrations/netbox-ansible-collection/#references","text":"Collection on Ansible Galaxy Collection on Ansible Automation Hub Docs for NetBox Inventory Plugin Docs for NetBox Lookup Plugin","title":"References"},{"location":"netbox-integrations/pyats/","text":"Getting Started With NetBox, PyATS and Genie Learn More You can view an on-demand Webinar Getting Started with Network Test Automation: NetBox + pyATS hosted by NetBox Labs. Code Examples All code used in the examples below can be found in the NetBox Learning git repository , in the directory netbox-pyats-webinar . Set Up and Installation Clone the Git repo and change into the netbox-pyats-webinar directory: git clone https://github.com/netboxlabs/netbox-learning.git cd netbox-learning/netbox-pyats-webinar Create and activate Python 3 virtual environment: python3 -m venv ./venv source venv/bin/activate Upgrade pip: python3 -m pip install --upgrade pip Install PyATS: As per the official documentation , there are a options to perform a minimal installation (option 1) or a full installation (opton 2). Option 1 Minimal install that includes the Genie library and that allows you to use the interactive testbed creation command to create your testbed files from NetBox: pip install pyats[library] pip install pyats.contrib Option 2 Full installation that includes all packages and libraries: pip install pyats[full] Tip If you are using Zsh on a Mac then you need to quote the install string. pip install \"pyats[full]\" Note If you plan to run the example script ospf_neighbor_table.py then you will also need to install the prettytable library with pip install prettytable or you can simply run the command pip install -r requirements.txt to install this along with pyATS, Genie and the contrib library. There is also a PyATS Docker Image . This command will pull down the container if you don't have it locally and drop you into a Bash shell: docker run -it ciscotestautomation/pyats:latest /bin/bash Lab Network Our lab network consists of 2 x Cisco CSR100V routers and they are documented in NetBox under the Site PyATS Webinar and are directly connected to each other over port GigabitEthernet2 on the 192.168.1.0/30 subnet. They are both running OSPF, and you can find the the configuration for this in the initial_device_configs.md file: Generating The testbed file Dynamically from NetBox Inventory Option 1 Use the pyats create testbed netbox command to build your testbed file. Note that where a value is prefixed with os.getenv or %ENV then these values are being pulled in from the local environment variables that you need to set with the export command eg. export NETBOX_URL=https://example.cloud.netboxapp.com/ , export DEF_PYATS_USER=admin : pyats create testbed netbox \\ --output testbed.yaml \\ --netbox-url=${NETBOX_URL} \\ --user-token=${NETBOX_USER_TOKEN} \\ --def_user='%ENV{DEF_PYATS_USER}' \\ --def_pass='%ENV{DEF_PYATS_PASS}' \\ --url_filter='site=pyats-webinar' \\ --topology In this example we are generating a testbed file called testbed.yaml and filtering NetBox by the site name pyats-webinar . When you hit enter the output will look like this: Begin retrieving data from netbox... Configuring testbed default credentials. Retrieving associated data for CSR1... Retrieving associated data for CSR2... Testbed file generated: testbed.yaml Option 2 Run the generate_testbed_file.py Python script. Note that where a value is prefixed with os.getenv or %ENV then these values are being pulled in from the local environment variables that you need to set with the export command eg. export NETBOX_URL=https://example.cloud.netboxapp.com/ , export DEF_PYATS_USER=admin . In this script we are generating a testbed file called testbed.yaml and filtering NetBox by the site name pyats-webinar , but you could just as easily filter on other fields as in the examples commented out: # Description: This script generates a testbed file based on the Netbox data # using the pyATS framework. It uses the Netbox class from the # pyats.contrib.creators.netbox module to create the testbed file. # Import the necessary libraries from pyats.contrib.creators.netbox import Netbox import yaml import os # Define Netbox URL, user token, and default credentials netbox_url = os.getenv('NETBOX_URL') user_token = os.getenv('NETBOX_USER_TOKEN') def_user = '%ENV{DEF_PYATS_USER}' def_pass = '%ENV{DEF_PYATS_PASS}' url_filter = 'site=pyats-webinar' # url_filter = 'site_id=68' # url_filter = 'site=pyats-webinar&os=ios-xe' # url_filter = 'platform=ios-xe' # Create testbed object and build data structure nb_testbed = Netbox( netbox_url=netbox_url, user_token=user_token, def_user=def_user, def_pass=def_pass, url_filter=url_filter, ssl_verify=False, topology=True ) # Generate testbed file tb = nb_testbed._generate() tb_yaml = yaml.dump(tb) with open(\"testbed.yaml\", \"w\") as f: f.write(tb_yaml) The resulting testbed file produced by either option will look something like this, depending on your network. Note that as we included the --topology switch the testbed file output includes the interfaces and connections from NetBox also: devices: CSR1: alias: CSR1 connections: cli: ip: 10.90.0.35 protocol: ssh credentials: default: password: '%ENV{DEF_PYATS_PASS}' username: '%ENV{DEF_PYATS_USER}' os: iosxe platform: iosxe type: CSR1000V CSR2: alias: CSR2 connections: cli: ip: 10.90.0.36 protocol: ssh credentials: default: password: '%ENV{DEF_PYATS_PASS}' username: '%ENV{DEF_PYATS_USER}' os: iosxe platform: iosxe type: CSR1000V testbed: credentials: default: password: '%ENV{DEF_PYATS_PASS}' username: '%ENV{DEF_PYATS_USER}' topology: CSR1: interfaces: GigabitEthernet1: alias: CSR1_GigabitEthernet1 ipv4: 10.90.0.35/27 type: ethernet GigabitEthernet2: alias: CSR1_GigabitEthernet2 ipv4: 192.168.1.1/30 link: cable_num_34 type: ethernet GigabitEthernet3: alias: CSR1_GigabitEthernet3 type: ethernet GigabitEthernet4: alias: CSR1_GigabitEthernet4 type: ethernet GigabitEthernet5: alias: CSR1_GigabitEthernet5 type: ethernet CSR2: interfaces: GigabitEthernet1: alias: CSR2_GigabitEthernet1 ipv4: 10.90.0.36/27 type: ethernet GigabitEthernet2: alias: CSR2_GigabitEthernet2 ipv4: 192.168.1.2/30 link: cable_num_34 type: ethernet GigabitEthernet3: alias: CSR2_GigabitEthernet3 type: ethernet GigabitEthernet4: alias: CSR2_GigabitEthernet4 type: ethernet GigabitEthernet5: alias: CSR2_GigabitEthernet5 type: ethernet Structured Data Vs Unstructured Data When you run a command at the CLI of a network device, you get unstructured data back as the response, which is just a blob of text: CSR1#sh ip interface brief Interface IP-Address OK? Method Status Protocol GigabitEthernet1 10.0.0.15 YES manual up up GigabitEthernet2 192.168.1.1 YES manual up up Loopback0 1.1.1.1 YES manual up up This is great for humans, as we can read this, but a computer cannot understand this data. Also if the next version of the OS you are using makes a change to the way that the output is formatted then you will have a problem and have to re-write your scripts to handle this. This is where the Genie parser comes into play as it will parse the output into structured data. The data is then represented using key/value pairs in JSON format that can be used by a computer: { \"interface\": { \"GigabitEthernet1\": { \"interface_is_ok\": \"YES\", \"ip_address\": \"10.0.0.15\", \"method\": \"manual\", \"protocol\": \"up\", \"status\": \"up\" }, \"GigabitEthernet2\": { \"interface_is_ok\": \"YES\", \"ip_address\": \"192.168.1.1\", \"method\": \"manual\", \"protocol\": \"up\", \"status\": \"up\" }, \"Loopback0\": { \"interface_is_ok\": \"YES\", \"ip_address\": \"1.1.1.1\", \"method\": \"manual\", \"protocol\": \"up\", \"status\": \"up\" } } } Running Your First Tests With The Genie CLI Genie Parsing There are parsers available for a large number of network OS's (not just Cisco), and you can view the complete list here In this example we will run the genie parse command to parse the output of the show ip ospf neighbor command and limit it to just device CSR1 : genie parse 'show ip ospf neighbor' --testbed-file testbed.yaml --device CSR1 0%| | 0/1 [00:00<?, ?it/s]{ \"interfaces\": { \"GigabitEthernet2\": { \"neighbors\": { \"2.2.2.2\": { \"address\": \"192.168.1.2\", \"dead_time\": \"00:00:34\", \"priority\": 1, \"state\": \"FULL/DR\" } } } } } This will output the parsed data to your terminal, but if you want to save the output just append the directory you wish to save it to with the --output switch. This will save both the _console file (the unstructured data) and the _parsed file (the structured data), along with the connection_ log (the raw output of the full connection process) into the chosen directory: genie parse 'show ip ospf neighbor' --testbed-file testbed.yaml --device CSR1 --output csr1 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:01<00:00, 1.01s/it] +==============================================================================+ | Genie Parse Summary for CSR1 | +==============================================================================+ | Connected to CSR1 | | - Log: csr1/connection_CSR1.txt | |------------------------------------------------------------------------------| | Parsed command 'show ip ospf neighbor' | | - Parsed structure: csr1/CSR1_show-ip-ospf-neighbor_parsed.txt | | - Device Console: csr1/CSR1_show-ip-ospf-neighbor_console.txt | |------------------------------------------------------------------------------| Genie Learning In this example we will run the genie learn command to learn all about routing and ospf for both devices in our testbed file. We will also save the output into directory called pre-change . Genie will automagically create directories for us if they don't already exist. For reference if you run the genie learn all command then for IOS-XE devices the list of features learned is: acl, arp, bgp, device, dot1x, eigrp, fdb, hsrp, igmp, interface, isis, lag, lisp, lldp, mcast, mld, msdp, nd, ntp, ospf, pim, platform, prefix_list, rip, route_policy, routing, static_routing, stp, terminal, utils, vlan, vrf, vxlan, config genie learn routing ospf --testbed-file testbed.yaml --output pre-change Learning '['routing', 'ospf']' on devices '['CSR1', 'CSR2']' 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:11<00:00, 5.85s/it] +==============================================================================+ | Genie Learn Summary for device CSR1 | +==============================================================================+ | Connected to CSR1 | | - Log: pre-change/connection_CSR1.txt | |------------------------------------------------------------------------------| | Learnt feature 'routing' | | - Ops structure: pre-change/routing_iosxe_CSR1_ops.txt | | - Device Console: pre-change/routing_iosxe_CSR1_console.txt | |------------------------------------------------------------------------------| | Learnt feature 'ospf' | | - Ops structure: pre-change/ospf_iosxe_CSR1_ops.txt | | - Device Console: pre-change/ospf_iosxe_CSR1_console.txt | |==============================================================================| +==============================================================================+ | Genie Learn Summary for device CSR2 | +==============================================================================+ | Connected to CSR2 | | - Log: pre-change/connection_CSR2.txt | |------------------------------------------------------------------------------| | Learnt feature 'routing' | | - Ops structure: pre-change/routing_iosxe_CSR2_ops.txt | | - Device Console: pre-change/routing_iosxe_CSR2_console.txt | |------------------------------------------------------------------------------| | Learnt feature 'ospf' | | - Ops structure: pre-change/ospf_iosxe_CSR2_ops.txt | | - Device Console: pre-change/ospf_iosxe_CSR2_console.txt | |==============================================================================| Making a Change to The Network Let's make a small change to the CSR2 router in our test network, and remove the network 2.2.2.2 0.0.0.0 area 0 statement from the OSPF configuration: CSR2#conf t Enter configuration commands, one per line. End with CNTL/Z. CSR2(config)#router ospf 1 CSR2(config-router)#no network 2.2.2.2 0.0.0.0 area 0 Next lets re-learn routing and ospf for both devices in our testbed file. We will also save the output into directory called post-change : genie learn routing ospf --testbed-file testbed.yaml --output post-change Learning '['routing', 'ospf']' on devices '['CSR1', 'CSR2']' 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:11<00:00, 5.84s/it] +==============================================================================+ | Genie Learn Summary for device CSR1 | +==============================================================================+ | Connected to CSR1 | | - Log: post-change/connection_CSR1.txt | |------------------------------------------------------------------------------| | Learnt feature 'routing' | | - Ops structure: post-change/routing_iosxe_CSR1_ops.txt | | - Device Console: post-change/routing_iosxe_CSR1_console.txt | |------------------------------------------------------------------------------| | Learnt feature 'ospf' | | - Ops structure: post-change/ospf_iosxe_CSR1_ops.txt | | - Device Console: post-change/ospf_iosxe_CSR1_console.txt | |==============================================================================| +==============================================================================+ | Genie Learn Summary for device CSR2 | +==============================================================================+ | Connected to CSR2 | | - Log: post-change/connection_CSR2.txt | |------------------------------------------------------------------------------| | Learnt feature 'routing' | | - Ops structure: post-change/routing_iosxe_CSR2_ops.txt | | - Device Console: post-change/routing_iosxe_CSR2_console.txt | |------------------------------------------------------------------------------| | Learnt feature 'ospf' | | - Ops structure: post-change/ospf_iosxe_CSR2_ops.txt | | - Device Console: post-change/ospf_iosxe_CSR2_console.txt | |==============================================================================| Genie Diff Now let's use the genie diff command to tell us what changed in our network, and we will store the output in a directory called routing-diff : genie diff pre-change post-change --output diff 1it [00:00, 333.44it/s] +==============================================================================+ | Genie Diff Summary between directories pre-change/ and post-change/ | +==============================================================================+ | File: routing_iosxe_CSR2_ops.txt | | - Identical | |------------------------------------------------------------------------------| | File: ospf_iosxe_CSR1_ops.txt | | - Identical | |------------------------------------------------------------------------------| | File: routing_iosxe_CSR1_ops.txt | | - Diff can be found at diff/diff_routing_iosxe_CSR1_ops.txt | |------------------------------------------------------------------------------| | File: ospf_iosxe_CSR2_ops.txt | | - Diff can be found at diff/diff_ospf_iosxe_CSR2_ops.txt | |------------------------------------------------------------------------------| There are differences in the outputs of both the routing_iosxe_CSR1_ops.txt and ospf_iosxe_CSR2_ops.txt files and we can view the contents of those files to see what has changed: cat diff/diff_routing_iosxe_CSR1_ops.txt --- pre-change/routing_iosxe_CSR1_ops.txt +++ post-change/routing_iosxe_CSR1_ops.txt info: vrf: default: address_family: ipv4: routes: - 2.2.2.2/32: - active: True - metric: 2 - next_hop: - next_hop_list: - 1: - index: 1 - next_hop: 192.168.1.2 - outgoing_interface: GigabitEthernet2 - updated: 03:32:43 - route: 2.2.2.2/32 - route_preference: 110 - source_protocol: ospf - source_protocol_codes: O% cat diff/diff_ospf_iosxe_CSR2_ops.txt --- pre-change/ospf_iosxe_CSR2_ops.txt +++ post-change/ospf_iosxe_CSR2_ops.txt info: vrf: default: address_family: ipv4: instance: 1: areas: 0.0.0.0: interfaces: - Loopback0: - bfd: - enable: False - cost: 1 - demand_circuit: False - enable: True - interface_type: loopback - name: Loopback0% As we can see, CSR1 has lost the the route to the 2.2.2.2/32 prefix and on CSR2 the interface lo0 has been removed from OSPF area 0 . pyATS and Python As you would expect, it is also very easy to work with pyATS and python. Type python in your terminal, and then start by importing the load module from the genie.testbed library and load the testbed file: from genie.testbed import load testbed = load('testbed.yaml') Then connect to the CSR1 device: device = testbed.devices['CSR1'] device.connect() Then parse the command show ip interface brief and print the output nicely using the pprint library: parsed_data = device.parse('show ip interface brief') from pprint import pprint pprint(parsed_data) {'interface': {'GigabitEthernet1': {'interface_is_ok': 'YES', 'ip_address': '10.0.0.15', 'method': 'manual', 'protocol': 'up', 'status': 'up'}, 'GigabitEthernet2': {'interface_is_ok': 'YES', 'ip_address': '192.168.1.1', 'method': 'manual', 'protocol': 'up', 'status': 'up'}, 'Loopback0': {'interface_is_ok': 'YES', 'ip_address': '1.1.1.1', 'method': 'manual', 'protocol': 'up', 'status': 'up'}}} Lastly, close the connection to the device: device.disconnect() As you can imagine, the possibilities are endless and you can see an example of a script that gets and prints OSPF Neighbor table for a given device in the file ospf_neighbor_table.py . Run the script and you will get a nicely formatted table of the OSPF neighbors for CRS1: python ospf_neighbor_table.py OSPF Neighbor Table for CSR1 +------------------+----------+-------------+---------+ | Interface | Neighbor | Address | State | +------------------+----------+-------------+---------+ | GigabitEthernet2 | 2.2.2.2 | 192.168.1.2 | FULL/DR | +------------------+----------+-------------+---------+ pyATS Test Scripts and Jobs So far we have only scratched the surface of what you can do with pyATS, and test scripts will take your automated testing to the next level. Test scripts are written and executed with the AEtest Python package I have included an example test script called connectivity_check.py , which is adapted from the example script in the official documentation . This script tests that both CSR1 and CSR2 can ping each other's loopback addresses. Test scripts are structured Python files that contain/describe the testing you want to do. A clean, elegant test script is scalable, and generates easy-to-read test results and logs. To run the example test script, you must also specify the testbed file that is to be used, for example: python connectivity_check.py --testbed testbed.yaml Once the test script has been run then the results are displayed in the output: 2024-04-23T11:50:16: %AETEST-INFO: +------------------------------------------------------------------------------+ 2024-04-23T11:50:16: %AETEST-INFO: | Detailed Results | 2024-04-23T11:50:16: %AETEST-INFO: +------------------------------------------------------------------------------+ 2024-04-23T11:50:16: %AETEST-INFO: SECTIONS/TESTCASES RESULT 2024-04-23T11:50:16: %AETEST-INFO: -------------------------------------------------------------------------------- 2024-04-23T11:50:16: %AETEST-INFO: . 2024-04-23T11:50:16: %AETEST-INFO: |-- common_setup PASSED 2024-04-23T11:50:16: %AETEST-INFO: | |-- check_topology PASSED 2024-04-23T11:50:16: %AETEST-INFO: | `-- establish_connections PASSED 2024-04-23T11:50:16: %AETEST-INFO: | |-- Step 1: Connecting to CSR1 PASSED 2024-04-23T11:50:16: %AETEST-INFO: | `-- Step 2: Connecting to CSR2 PASSED 2024-04-23T11:50:16: %AETEST-INFO: |-- PingTestcase[device=device1] PASSED 2024-04-23T11:50:16: %AETEST-INFO: | |-- ping[destination=192.168.1.1] PASSED 2024-04-23T11:50:16: %AETEST-INFO: | `-- ping[destination=192.168.1.2] PASSED 2024-04-23T11:50:16: %AETEST-INFO: |-- PingTestcase[device=device2] PASSED 2024-04-23T11:50:16: %AETEST-INFO: | |-- ping[destination=192.168.1.1] PASSED 2024-04-23T11:50:16: %AETEST-INFO: | `-- ping[destination=192.168.1.2] PASSED 2024-04-23T11:50:16: %AETEST-INFO: `-- common_cleanup PASSED 2024-04-23T11:50:16: %AETEST-INFO: `-- disconnect PASSED 2024-04-23T11:50:16: %AETEST-INFO: |-- Step 1: Disconnecting from CSR1 PASSED 2024-04-23T11:50:16: %AETEST-INFO: `-- Step 2: Disconnecting from CSR2 PASSED 2024-04-23T11:50:16: %AETEST-INFO: +------------------------------------------------------------------------------+ 2024-04-23T11:50:16: %AETEST-INFO: | Summary | 2024-04-23T11:50:16: %AETEST-INFO: +------------------------------------------------------------------------------+ 2024-04-23T11:50:16: %AETEST-INFO: Number of ABORTED 0 2024-04-23T11:50:16: %AETEST-INFO: Number of BLOCKED 0 2024-04-23T11:50:16: %AETEST-INFO: Number of ERRORED 0 2024-04-23T11:50:16: %AETEST-INFO: Number of FAILED 0 2024-04-23T11:50:16: %AETEST-INFO: Number of PASSED 4 2024-04-23T11:50:16: %AETEST-INFO: Number of PASSX 0 2024-04-23T11:50:16: %AETEST-INFO: Number of SKIPPED 0 2024-04-23T11:50:16: %AETEST-INFO: Total Number 4 2024-04-23T11:50:16: %AETEST-INFO: Success Rate 100.0% 2024-04-23T11:50:16: %AETEST-INFO: -------------------------------------------------------------------------------- pyATS Jobs take test scripts to another level and allow the execution of test scripts as tasks. This is beyond the scope of this document but you can read all about pyATS jobs in the official docs","title":"pyATS"},{"location":"netbox-integrations/pyats/#getting-started-with-netbox-pyats-and-genie","text":"Learn More You can view an on-demand Webinar Getting Started with Network Test Automation: NetBox + pyATS hosted by NetBox Labs.","title":"Getting Started With NetBox, PyATS and Genie"},{"location":"netbox-integrations/pyats/#code-examples","text":"All code used in the examples below can be found in the NetBox Learning git repository , in the directory netbox-pyats-webinar .","title":"Code Examples"},{"location":"netbox-integrations/pyats/#set-up-and-installation","text":"Clone the Git repo and change into the netbox-pyats-webinar directory: git clone https://github.com/netboxlabs/netbox-learning.git cd netbox-learning/netbox-pyats-webinar Create and activate Python 3 virtual environment: python3 -m venv ./venv source venv/bin/activate Upgrade pip: python3 -m pip install --upgrade pip Install PyATS: As per the official documentation , there are a options to perform a minimal installation (option 1) or a full installation (opton 2). Option 1 Minimal install that includes the Genie library and that allows you to use the interactive testbed creation command to create your testbed files from NetBox: pip install pyats[library] pip install pyats.contrib Option 2 Full installation that includes all packages and libraries: pip install pyats[full] Tip If you are using Zsh on a Mac then you need to quote the install string. pip install \"pyats[full]\" Note If you plan to run the example script ospf_neighbor_table.py then you will also need to install the prettytable library with pip install prettytable or you can simply run the command pip install -r requirements.txt to install this along with pyATS, Genie and the contrib library. There is also a PyATS Docker Image . This command will pull down the container if you don't have it locally and drop you into a Bash shell: docker run -it ciscotestautomation/pyats:latest /bin/bash","title":"Set Up and Installation"},{"location":"netbox-integrations/pyats/#lab-network","text":"Our lab network consists of 2 x Cisco CSR100V routers and they are documented in NetBox under the Site PyATS Webinar and are directly connected to each other over port GigabitEthernet2 on the 192.168.1.0/30 subnet. They are both running OSPF, and you can find the the configuration for this in the initial_device_configs.md file:","title":"Lab Network"},{"location":"netbox-integrations/pyats/#generating-the-testbed-file-dynamically-from-netbox-inventory","text":"Option 1 Use the pyats create testbed netbox command to build your testbed file. Note that where a value is prefixed with os.getenv or %ENV then these values are being pulled in from the local environment variables that you need to set with the export command eg. export NETBOX_URL=https://example.cloud.netboxapp.com/ , export DEF_PYATS_USER=admin : pyats create testbed netbox \\ --output testbed.yaml \\ --netbox-url=${NETBOX_URL} \\ --user-token=${NETBOX_USER_TOKEN} \\ --def_user='%ENV{DEF_PYATS_USER}' \\ --def_pass='%ENV{DEF_PYATS_PASS}' \\ --url_filter='site=pyats-webinar' \\ --topology In this example we are generating a testbed file called testbed.yaml and filtering NetBox by the site name pyats-webinar . When you hit enter the output will look like this: Begin retrieving data from netbox... Configuring testbed default credentials. Retrieving associated data for CSR1... Retrieving associated data for CSR2... Testbed file generated: testbed.yaml Option 2 Run the generate_testbed_file.py Python script. Note that where a value is prefixed with os.getenv or %ENV then these values are being pulled in from the local environment variables that you need to set with the export command eg. export NETBOX_URL=https://example.cloud.netboxapp.com/ , export DEF_PYATS_USER=admin . In this script we are generating a testbed file called testbed.yaml and filtering NetBox by the site name pyats-webinar , but you could just as easily filter on other fields as in the examples commented out: # Description: This script generates a testbed file based on the Netbox data # using the pyATS framework. It uses the Netbox class from the # pyats.contrib.creators.netbox module to create the testbed file. # Import the necessary libraries from pyats.contrib.creators.netbox import Netbox import yaml import os # Define Netbox URL, user token, and default credentials netbox_url = os.getenv('NETBOX_URL') user_token = os.getenv('NETBOX_USER_TOKEN') def_user = '%ENV{DEF_PYATS_USER}' def_pass = '%ENV{DEF_PYATS_PASS}' url_filter = 'site=pyats-webinar' # url_filter = 'site_id=68' # url_filter = 'site=pyats-webinar&os=ios-xe' # url_filter = 'platform=ios-xe' # Create testbed object and build data structure nb_testbed = Netbox( netbox_url=netbox_url, user_token=user_token, def_user=def_user, def_pass=def_pass, url_filter=url_filter, ssl_verify=False, topology=True ) # Generate testbed file tb = nb_testbed._generate() tb_yaml = yaml.dump(tb) with open(\"testbed.yaml\", \"w\") as f: f.write(tb_yaml) The resulting testbed file produced by either option will look something like this, depending on your network. Note that as we included the --topology switch the testbed file output includes the interfaces and connections from NetBox also: devices: CSR1: alias: CSR1 connections: cli: ip: 10.90.0.35 protocol: ssh credentials: default: password: '%ENV{DEF_PYATS_PASS}' username: '%ENV{DEF_PYATS_USER}' os: iosxe platform: iosxe type: CSR1000V CSR2: alias: CSR2 connections: cli: ip: 10.90.0.36 protocol: ssh credentials: default: password: '%ENV{DEF_PYATS_PASS}' username: '%ENV{DEF_PYATS_USER}' os: iosxe platform: iosxe type: CSR1000V testbed: credentials: default: password: '%ENV{DEF_PYATS_PASS}' username: '%ENV{DEF_PYATS_USER}' topology: CSR1: interfaces: GigabitEthernet1: alias: CSR1_GigabitEthernet1 ipv4: 10.90.0.35/27 type: ethernet GigabitEthernet2: alias: CSR1_GigabitEthernet2 ipv4: 192.168.1.1/30 link: cable_num_34 type: ethernet GigabitEthernet3: alias: CSR1_GigabitEthernet3 type: ethernet GigabitEthernet4: alias: CSR1_GigabitEthernet4 type: ethernet GigabitEthernet5: alias: CSR1_GigabitEthernet5 type: ethernet CSR2: interfaces: GigabitEthernet1: alias: CSR2_GigabitEthernet1 ipv4: 10.90.0.36/27 type: ethernet GigabitEthernet2: alias: CSR2_GigabitEthernet2 ipv4: 192.168.1.2/30 link: cable_num_34 type: ethernet GigabitEthernet3: alias: CSR2_GigabitEthernet3 type: ethernet GigabitEthernet4: alias: CSR2_GigabitEthernet4 type: ethernet GigabitEthernet5: alias: CSR2_GigabitEthernet5 type: ethernet","title":"Generating The testbed file Dynamically from NetBox Inventory"},{"location":"netbox-integrations/pyats/#structured-data-vs-unstructured-data","text":"When you run a command at the CLI of a network device, you get unstructured data back as the response, which is just a blob of text: CSR1#sh ip interface brief Interface IP-Address OK? Method Status Protocol GigabitEthernet1 10.0.0.15 YES manual up up GigabitEthernet2 192.168.1.1 YES manual up up Loopback0 1.1.1.1 YES manual up up This is great for humans, as we can read this, but a computer cannot understand this data. Also if the next version of the OS you are using makes a change to the way that the output is formatted then you will have a problem and have to re-write your scripts to handle this. This is where the Genie parser comes into play as it will parse the output into structured data. The data is then represented using key/value pairs in JSON format that can be used by a computer: { \"interface\": { \"GigabitEthernet1\": { \"interface_is_ok\": \"YES\", \"ip_address\": \"10.0.0.15\", \"method\": \"manual\", \"protocol\": \"up\", \"status\": \"up\" }, \"GigabitEthernet2\": { \"interface_is_ok\": \"YES\", \"ip_address\": \"192.168.1.1\", \"method\": \"manual\", \"protocol\": \"up\", \"status\": \"up\" }, \"Loopback0\": { \"interface_is_ok\": \"YES\", \"ip_address\": \"1.1.1.1\", \"method\": \"manual\", \"protocol\": \"up\", \"status\": \"up\" } } }","title":"Structured Data Vs Unstructured Data"},{"location":"netbox-integrations/pyats/#running-your-first-tests-with-the-genie-cli","text":"","title":"Running Your First Tests With The Genie CLI"},{"location":"netbox-integrations/pyats/#genie-parsing","text":"There are parsers available for a large number of network OS's (not just Cisco), and you can view the complete list here In this example we will run the genie parse command to parse the output of the show ip ospf neighbor command and limit it to just device CSR1 : genie parse 'show ip ospf neighbor' --testbed-file testbed.yaml --device CSR1 0%| | 0/1 [00:00<?, ?it/s]{ \"interfaces\": { \"GigabitEthernet2\": { \"neighbors\": { \"2.2.2.2\": { \"address\": \"192.168.1.2\", \"dead_time\": \"00:00:34\", \"priority\": 1, \"state\": \"FULL/DR\" } } } } } This will output the parsed data to your terminal, but if you want to save the output just append the directory you wish to save it to with the --output switch. This will save both the _console file (the unstructured data) and the _parsed file (the structured data), along with the connection_ log (the raw output of the full connection process) into the chosen directory: genie parse 'show ip ospf neighbor' --testbed-file testbed.yaml --device CSR1 --output csr1 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:01<00:00, 1.01s/it] +==============================================================================+ | Genie Parse Summary for CSR1 | +==============================================================================+ | Connected to CSR1 | | - Log: csr1/connection_CSR1.txt | |------------------------------------------------------------------------------| | Parsed command 'show ip ospf neighbor' | | - Parsed structure: csr1/CSR1_show-ip-ospf-neighbor_parsed.txt | | - Device Console: csr1/CSR1_show-ip-ospf-neighbor_console.txt | |------------------------------------------------------------------------------|","title":"Genie Parsing"},{"location":"netbox-integrations/pyats/#genie-learning","text":"In this example we will run the genie learn command to learn all about routing and ospf for both devices in our testbed file. We will also save the output into directory called pre-change . Genie will automagically create directories for us if they don't already exist. For reference if you run the genie learn all command then for IOS-XE devices the list of features learned is: acl, arp, bgp, device, dot1x, eigrp, fdb, hsrp, igmp, interface, isis, lag, lisp, lldp, mcast, mld, msdp, nd, ntp, ospf, pim, platform, prefix_list, rip, route_policy, routing, static_routing, stp, terminal, utils, vlan, vrf, vxlan, config genie learn routing ospf --testbed-file testbed.yaml --output pre-change Learning '['routing', 'ospf']' on devices '['CSR1', 'CSR2']' 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:11<00:00, 5.85s/it] +==============================================================================+ | Genie Learn Summary for device CSR1 | +==============================================================================+ | Connected to CSR1 | | - Log: pre-change/connection_CSR1.txt | |------------------------------------------------------------------------------| | Learnt feature 'routing' | | - Ops structure: pre-change/routing_iosxe_CSR1_ops.txt | | - Device Console: pre-change/routing_iosxe_CSR1_console.txt | |------------------------------------------------------------------------------| | Learnt feature 'ospf' | | - Ops structure: pre-change/ospf_iosxe_CSR1_ops.txt | | - Device Console: pre-change/ospf_iosxe_CSR1_console.txt | |==============================================================================| +==============================================================================+ | Genie Learn Summary for device CSR2 | +==============================================================================+ | Connected to CSR2 | | - Log: pre-change/connection_CSR2.txt | |------------------------------------------------------------------------------| | Learnt feature 'routing' | | - Ops structure: pre-change/routing_iosxe_CSR2_ops.txt | | - Device Console: pre-change/routing_iosxe_CSR2_console.txt | |------------------------------------------------------------------------------| | Learnt feature 'ospf' | | - Ops structure: pre-change/ospf_iosxe_CSR2_ops.txt | | - Device Console: pre-change/ospf_iosxe_CSR2_console.txt | |==============================================================================|","title":"Genie Learning"},{"location":"netbox-integrations/pyats/#making-a-change-to-the-network","text":"Let's make a small change to the CSR2 router in our test network, and remove the network 2.2.2.2 0.0.0.0 area 0 statement from the OSPF configuration: CSR2#conf t Enter configuration commands, one per line. End with CNTL/Z. CSR2(config)#router ospf 1 CSR2(config-router)#no network 2.2.2.2 0.0.0.0 area 0 Next lets re-learn routing and ospf for both devices in our testbed file. We will also save the output into directory called post-change : genie learn routing ospf --testbed-file testbed.yaml --output post-change Learning '['routing', 'ospf']' on devices '['CSR1', 'CSR2']' 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:11<00:00, 5.84s/it] +==============================================================================+ | Genie Learn Summary for device CSR1 | +==============================================================================+ | Connected to CSR1 | | - Log: post-change/connection_CSR1.txt | |------------------------------------------------------------------------------| | Learnt feature 'routing' | | - Ops structure: post-change/routing_iosxe_CSR1_ops.txt | | - Device Console: post-change/routing_iosxe_CSR1_console.txt | |------------------------------------------------------------------------------| | Learnt feature 'ospf' | | - Ops structure: post-change/ospf_iosxe_CSR1_ops.txt | | - Device Console: post-change/ospf_iosxe_CSR1_console.txt | |==============================================================================| +==============================================================================+ | Genie Learn Summary for device CSR2 | +==============================================================================+ | Connected to CSR2 | | - Log: post-change/connection_CSR2.txt | |------------------------------------------------------------------------------| | Learnt feature 'routing' | | - Ops structure: post-change/routing_iosxe_CSR2_ops.txt | | - Device Console: post-change/routing_iosxe_CSR2_console.txt | |------------------------------------------------------------------------------| | Learnt feature 'ospf' | | - Ops structure: post-change/ospf_iosxe_CSR2_ops.txt | | - Device Console: post-change/ospf_iosxe_CSR2_console.txt | |==============================================================================|","title":"Making a Change to The Network"},{"location":"netbox-integrations/pyats/#genie-diff","text":"Now let's use the genie diff command to tell us what changed in our network, and we will store the output in a directory called routing-diff : genie diff pre-change post-change --output diff 1it [00:00, 333.44it/s] +==============================================================================+ | Genie Diff Summary between directories pre-change/ and post-change/ | +==============================================================================+ | File: routing_iosxe_CSR2_ops.txt | | - Identical | |------------------------------------------------------------------------------| | File: ospf_iosxe_CSR1_ops.txt | | - Identical | |------------------------------------------------------------------------------| | File: routing_iosxe_CSR1_ops.txt | | - Diff can be found at diff/diff_routing_iosxe_CSR1_ops.txt | |------------------------------------------------------------------------------| | File: ospf_iosxe_CSR2_ops.txt | | - Diff can be found at diff/diff_ospf_iosxe_CSR2_ops.txt | |------------------------------------------------------------------------------| There are differences in the outputs of both the routing_iosxe_CSR1_ops.txt and ospf_iosxe_CSR2_ops.txt files and we can view the contents of those files to see what has changed: cat diff/diff_routing_iosxe_CSR1_ops.txt --- pre-change/routing_iosxe_CSR1_ops.txt +++ post-change/routing_iosxe_CSR1_ops.txt info: vrf: default: address_family: ipv4: routes: - 2.2.2.2/32: - active: True - metric: 2 - next_hop: - next_hop_list: - 1: - index: 1 - next_hop: 192.168.1.2 - outgoing_interface: GigabitEthernet2 - updated: 03:32:43 - route: 2.2.2.2/32 - route_preference: 110 - source_protocol: ospf - source_protocol_codes: O% cat diff/diff_ospf_iosxe_CSR2_ops.txt --- pre-change/ospf_iosxe_CSR2_ops.txt +++ post-change/ospf_iosxe_CSR2_ops.txt info: vrf: default: address_family: ipv4: instance: 1: areas: 0.0.0.0: interfaces: - Loopback0: - bfd: - enable: False - cost: 1 - demand_circuit: False - enable: True - interface_type: loopback - name: Loopback0% As we can see, CSR1 has lost the the route to the 2.2.2.2/32 prefix and on CSR2 the interface lo0 has been removed from OSPF area 0 .","title":"Genie Diff"},{"location":"netbox-integrations/pyats/#pyats-and-python","text":"As you would expect, it is also very easy to work with pyATS and python. Type python in your terminal, and then start by importing the load module from the genie.testbed library and load the testbed file: from genie.testbed import load testbed = load('testbed.yaml') Then connect to the CSR1 device: device = testbed.devices['CSR1'] device.connect() Then parse the command show ip interface brief and print the output nicely using the pprint library: parsed_data = device.parse('show ip interface brief') from pprint import pprint pprint(parsed_data) {'interface': {'GigabitEthernet1': {'interface_is_ok': 'YES', 'ip_address': '10.0.0.15', 'method': 'manual', 'protocol': 'up', 'status': 'up'}, 'GigabitEthernet2': {'interface_is_ok': 'YES', 'ip_address': '192.168.1.1', 'method': 'manual', 'protocol': 'up', 'status': 'up'}, 'Loopback0': {'interface_is_ok': 'YES', 'ip_address': '1.1.1.1', 'method': 'manual', 'protocol': 'up', 'status': 'up'}}} Lastly, close the connection to the device: device.disconnect() As you can imagine, the possibilities are endless and you can see an example of a script that gets and prints OSPF Neighbor table for a given device in the file ospf_neighbor_table.py . Run the script and you will get a nicely formatted table of the OSPF neighbors for CRS1: python ospf_neighbor_table.py OSPF Neighbor Table for CSR1 +------------------+----------+-------------+---------+ | Interface | Neighbor | Address | State | +------------------+----------+-------------+---------+ | GigabitEthernet2 | 2.2.2.2 | 192.168.1.2 | FULL/DR | +------------------+----------+-------------+---------+","title":"pyATS and Python"},{"location":"netbox-integrations/pyats/#pyats-test-scripts-and-jobs","text":"So far we have only scratched the surface of what you can do with pyATS, and test scripts will take your automated testing to the next level. Test scripts are written and executed with the AEtest Python package I have included an example test script called connectivity_check.py , which is adapted from the example script in the official documentation . This script tests that both CSR1 and CSR2 can ping each other's loopback addresses. Test scripts are structured Python files that contain/describe the testing you want to do. A clean, elegant test script is scalable, and generates easy-to-read test results and logs. To run the example test script, you must also specify the testbed file that is to be used, for example: python connectivity_check.py --testbed testbed.yaml Once the test script has been run then the results are displayed in the output: 2024-04-23T11:50:16: %AETEST-INFO: +------------------------------------------------------------------------------+ 2024-04-23T11:50:16: %AETEST-INFO: | Detailed Results | 2024-04-23T11:50:16: %AETEST-INFO: +------------------------------------------------------------------------------+ 2024-04-23T11:50:16: %AETEST-INFO: SECTIONS/TESTCASES RESULT 2024-04-23T11:50:16: %AETEST-INFO: -------------------------------------------------------------------------------- 2024-04-23T11:50:16: %AETEST-INFO: . 2024-04-23T11:50:16: %AETEST-INFO: |-- common_setup PASSED 2024-04-23T11:50:16: %AETEST-INFO: | |-- check_topology PASSED 2024-04-23T11:50:16: %AETEST-INFO: | `-- establish_connections PASSED 2024-04-23T11:50:16: %AETEST-INFO: | |-- Step 1: Connecting to CSR1 PASSED 2024-04-23T11:50:16: %AETEST-INFO: | `-- Step 2: Connecting to CSR2 PASSED 2024-04-23T11:50:16: %AETEST-INFO: |-- PingTestcase[device=device1] PASSED 2024-04-23T11:50:16: %AETEST-INFO: | |-- ping[destination=192.168.1.1] PASSED 2024-04-23T11:50:16: %AETEST-INFO: | `-- ping[destination=192.168.1.2] PASSED 2024-04-23T11:50:16: %AETEST-INFO: |-- PingTestcase[device=device2] PASSED 2024-04-23T11:50:16: %AETEST-INFO: | |-- ping[destination=192.168.1.1] PASSED 2024-04-23T11:50:16: %AETEST-INFO: | `-- ping[destination=192.168.1.2] PASSED 2024-04-23T11:50:16: %AETEST-INFO: `-- common_cleanup PASSED 2024-04-23T11:50:16: %AETEST-INFO: `-- disconnect PASSED 2024-04-23T11:50:16: %AETEST-INFO: |-- Step 1: Disconnecting from CSR1 PASSED 2024-04-23T11:50:16: %AETEST-INFO: `-- Step 2: Disconnecting from CSR2 PASSED 2024-04-23T11:50:16: %AETEST-INFO: +------------------------------------------------------------------------------+ 2024-04-23T11:50:16: %AETEST-INFO: | Summary | 2024-04-23T11:50:16: %AETEST-INFO: +------------------------------------------------------------------------------+ 2024-04-23T11:50:16: %AETEST-INFO: Number of ABORTED 0 2024-04-23T11:50:16: %AETEST-INFO: Number of BLOCKED 0 2024-04-23T11:50:16: %AETEST-INFO: Number of ERRORED 0 2024-04-23T11:50:16: %AETEST-INFO: Number of FAILED 0 2024-04-23T11:50:16: %AETEST-INFO: Number of PASSED 4 2024-04-23T11:50:16: %AETEST-INFO: Number of PASSX 0 2024-04-23T11:50:16: %AETEST-INFO: Number of SKIPPED 0 2024-04-23T11:50:16: %AETEST-INFO: Total Number 4 2024-04-23T11:50:16: %AETEST-INFO: Success Rate 100.0% 2024-04-23T11:50:16: %AETEST-INFO: -------------------------------------------------------------------------------- pyATS Jobs take test scripts to another level and allow the execution of test scripts as tasks. This is beyond the scope of this document but you can read all about pyATS jobs in the official docs","title":"pyATS Test Scripts and Jobs"},{"location":"netbox-integrations/servicenow/","text":"ServiceNow Integration Overview The NetBox ServiceNow Integration provides API and CMDB integration capabilities between ServiceNow and NetBox instances. This application enables bidirectional synchronization of infrastructure data, allowing organizations to maintain consistent configuration management data across both platforms. ServiceNow Compatibility : Certified for Washington DC and Xanadu versions. Key Features Bidirectional Synchronization : Synchronize configuration items between ServiceNow CMDB and NetBox Automated Data Import : Import NetBox objects (devices, device types, sites, locations, etc.) into ServiceNow through import sets Real-time Integration : API-based integration for real-time data exchange Data Validation : Built-in validation and correlation mechanisms to ensure data integrity Extensible Architecture : Modular design using ServiceNow Flow Designer and Integration Hub actions Security Integration : Role-based access controls and secure API communication NetBox to ServiceNow Object Mapping The following table shows the supported NetBox objects and their corresponding destinations in ServiceNow: NetBox Object ServiceNow Destination Mapping Details Device Configuration Item (cmdb_ci) Mapped to appropriate CI class based on device role and type Device Type Hardware Product Model (cmdb_hardware_product_model) Device specifications, manufacturer, and model information Site Location (cmn_location) Physical site information and geographical data Region Location (cmn_location) Geographic regions as top-level locations Manufacturer Company (core_company) Vendor/manufacturer information Tenant Department (cmn_department) Organizational units and client information Device Role CI Classification Maps to ServiceNow CI classification and categories Business Value Centralized configuration management across multiple platforms Reduced manual data entry and associated errors Improved visibility into infrastructure assets Enhanced change management processes Streamlined compliance reporting Technical Architecture The application is built as a ServiceNow scoped application ( x_990381_netbox_cl ) and includes: Custom tables for NetBox data import staging Extended ServiceNow CMDB tables with NetBox-specific fields Flow Designer flows for automated synchronization processes Integration Hub spokes for NetBox API connectivity Business rules and UI actions for user interaction Obtaining the Application The NetBox CMDB Integration application is currently distributed as XML update sets. To obtain the application: Prerequisites Before requesting the application, ensure your organization meets the following requirements: ServiceNow Integration Purchased : Purchased the ServiceNow Integration from NetBox Labs ServiceNow Instance : Active ServiceNow instance with appropriate licensing NetBox Environment : Operational NetBox instance with API access Administrator Access : ServiceNow administrator privileges for application installation ServiceNow MID Server (NetBox Enterprise Only) : MID server installed on-prem to handle communication between ServiceNow and NetBox Enterprise Obtaining Access Contact NetBox Labs : Reach out to your NetBox Labs support team or account manager Request Access : Submit a request for the NetBox CMDB Integration application for ServiceNow Receive Update Set : NetBox Labs will provide you with the XML update set file(s) Version Information Application Version : 1.4 Dependencies : System Import Sets Model Management Configuration Management (CMDB) System (apps/system_user)","title":"Overview"},{"location":"netbox-integrations/servicenow/#servicenow-integration-overview","text":"The NetBox ServiceNow Integration provides API and CMDB integration capabilities between ServiceNow and NetBox instances. This application enables bidirectional synchronization of infrastructure data, allowing organizations to maintain consistent configuration management data across both platforms. ServiceNow Compatibility : Certified for Washington DC and Xanadu versions.","title":"ServiceNow Integration Overview"},{"location":"netbox-integrations/servicenow/#key-features","text":"Bidirectional Synchronization : Synchronize configuration items between ServiceNow CMDB and NetBox Automated Data Import : Import NetBox objects (devices, device types, sites, locations, etc.) into ServiceNow through import sets Real-time Integration : API-based integration for real-time data exchange Data Validation : Built-in validation and correlation mechanisms to ensure data integrity Extensible Architecture : Modular design using ServiceNow Flow Designer and Integration Hub actions Security Integration : Role-based access controls and secure API communication","title":"Key Features"},{"location":"netbox-integrations/servicenow/#netbox-to-servicenow-object-mapping","text":"The following table shows the supported NetBox objects and their corresponding destinations in ServiceNow: NetBox Object ServiceNow Destination Mapping Details Device Configuration Item (cmdb_ci) Mapped to appropriate CI class based on device role and type Device Type Hardware Product Model (cmdb_hardware_product_model) Device specifications, manufacturer, and model information Site Location (cmn_location) Physical site information and geographical data Region Location (cmn_location) Geographic regions as top-level locations Manufacturer Company (core_company) Vendor/manufacturer information Tenant Department (cmn_department) Organizational units and client information Device Role CI Classification Maps to ServiceNow CI classification and categories","title":"NetBox to ServiceNow Object Mapping"},{"location":"netbox-integrations/servicenow/#business-value","text":"Centralized configuration management across multiple platforms Reduced manual data entry and associated errors Improved visibility into infrastructure assets Enhanced change management processes Streamlined compliance reporting","title":"Business Value"},{"location":"netbox-integrations/servicenow/#technical-architecture","text":"The application is built as a ServiceNow scoped application ( x_990381_netbox_cl ) and includes: Custom tables for NetBox data import staging Extended ServiceNow CMDB tables with NetBox-specific fields Flow Designer flows for automated synchronization processes Integration Hub spokes for NetBox API connectivity Business rules and UI actions for user interaction","title":"Technical Architecture"},{"location":"netbox-integrations/servicenow/#obtaining-the-application","text":"The NetBox CMDB Integration application is currently distributed as XML update sets. To obtain the application:","title":"Obtaining the Application"},{"location":"netbox-integrations/servicenow/#prerequisites","text":"Before requesting the application, ensure your organization meets the following requirements: ServiceNow Integration Purchased : Purchased the ServiceNow Integration from NetBox Labs ServiceNow Instance : Active ServiceNow instance with appropriate licensing NetBox Environment : Operational NetBox instance with API access Administrator Access : ServiceNow administrator privileges for application installation ServiceNow MID Server (NetBox Enterprise Only) : MID server installed on-prem to handle communication between ServiceNow and NetBox Enterprise","title":"Prerequisites"},{"location":"netbox-integrations/servicenow/#obtaining-access","text":"Contact NetBox Labs : Reach out to your NetBox Labs support team or account manager Request Access : Submit a request for the NetBox CMDB Integration application for ServiceNow Receive Update Set : NetBox Labs will provide you with the XML update set file(s)","title":"Obtaining Access"},{"location":"netbox-integrations/servicenow/#version-information","text":"Application Version : 1.4 Dependencies : System Import Sets Model Management Configuration Management (CMDB) System (apps/system_user)","title":"Version Information"},{"location":"netbox-integrations/servicenow/snow-faq/","text":"FAQ and Troubleshooting Installation Issues Update set installation won't get past the Preview phase Common Causes: - Missing Dependencies : Ensure all required plugins are installed (IntegrationHub Starter Pack, Model Management, System Import Sets) - Version Incompatibility : Verify the update set version matches your ServiceNow instance version - Insufficient Privileges : Confirm you have admin privileges on the ServiceNow instance - Conflicting Customizations : Local customizations may conflict with the application Resolution Steps: 1. Check the preview log for specific error messages 2. Verify all dependencies are installed and activated 3. Review any conflicts shown in the preview results 4. Contact NetBox Labs support if errors persist What can I check to see that installation went well? Verification Checklist: 1. Application Menu : Verify \"NetBox\" application appears in the application navigator 2. Tables Created : Check that new tables are present: - x_990381_netbox_cl_netbox_parameters - x_990381_netbox_cl_devices_import_set - x_990381_netbox_cl_device_types_import_set - x_990381_netbox_cl_netbox_sites_import 3. Extended Fields : Verify NetBox fields are added to existing tables: - cmdb_ci.x_990381_netbox_cl_netbox_correlation_id - cmn_location.x_990381_netbox_cl_netbox_synchronize 4. Guided Setup : Access All > NetBox > Configuration > Guided Setup successfully 5. No Critical Errors : Check system logs for any critical errors during installation What new tables are included with the application? Import Set Tables: - x_990381_netbox_cl_devices_import_set - NetBox devices staging - x_990381_netbox_cl_device_types_import_set - NetBox device types staging - x_990381_netbox_cl_netbox_sites_import - NetBox sites staging - x_990381_netbox_cl_netbox_regions_import - NetBox regions staging - x_990381_netbox_cl_netbox_clients_import - NetBox tenants/clients staging - x_990381_netbox_cl_netbox_departments_imports - NetBox departments staging - x_990381_netbox_cl_netbox_manufacturers_import - NetBox manufacturers staging Configuration Tables: - x_990381_netbox_cl_netbox_parameters - Application configuration parameters - x_990381_netbox_cl_netbox_notification_queue - NetBox notification queue Under which license should I subscribe the new tables? Licensing Guidance: - Import Set Tables : These are typically covered under the base ServiceNow platform license as they are temporary staging tables - Configuration Tables : These tables would usually be licensed under the ITSM allotment, but can be included wherever some allotments remain - Extended Fields : No additional licensing required as they extend existing licensed tables Recommendation : Consult with your ServiceNow account manager for specific licensing questions, as requirements may vary based on your ServiceNow contract and usage. Guided Setup Issues I'm missing some plugins and don't have a license for them Required vs. Recommended Plugins: - Essential Plugins (Required): - IntegrationHub Starter Pack - System Import Sets - Model Management - Recommended Plugins (Optional): - Additional IntegrationHub spokes for enhanced functionality Resolution Options: 1. Contact ServiceNow : Request licensing for required plugins through your ServiceNow account manager 2. PDI Users : Activate plugins through the PDI configuration screen 3. Alternative Approach : Some functionality may be limited without optional plugins, but core integration will still work What's the purpose of manually creating an HTTP(s) connection record? Purpose and Importance: - Application package : This record cannot be packaged with the NetBox CMDB Integration scoped application and must therefore be created manually during the setup process - API Communication : Establishes the connection between ServiceNow and your NetBox instance - Authentication : Stores connection parameters and credential references - MID Server Support : Configures routing through MID servers if required - Standardization : Uses ServiceNow's standard HTTP connection framework for reliability Key Requirements: - Name : Must be exactly \"NetBox API\" (serves as a key for the application) - Connection Alias : Must be x_990381_netbox_cl.NetBox_API - URL Format : Must not include trailing slash Both our NetBox and ServiceNow instances are in the cloud but we have a MID server on premises, should I configure it in step 2.1 or 2.2 of the guided setup? Recommendation : Configure in Step 2.1 (Create the HTTP(s) connection record) Reasoning: - If both instances are in the cloud, direct communication is typically possible - MID server configuration should only be used if network policies require it - Step 2.2 is for optional modifications after initial setup Decision Factors: - Network Policies : Check if your organization requires all API traffic to route through the MID server - Security Requirements : Some organizations mandate MID server usage for all external connections - Performance : Direct cloud-to-cloud communication is typically faster Testing Approach : Try without MID server first, then add it in Step 2.2 if connection tests fail. The connection test keeps failing, how do I troubleshoot connections? Systematic Troubleshooting: Verify Basic Connectivity Check for firewall restrictions between instances Verify DNS resolution of NetBox hostname Check API Token Format Ensure API token is exactly 32 hexadecimal characters Verify token is active in NetBox Test token manually using curl or Postman Validate Connection Record Confirm connection name is exactly \"NetBox API\" Verify URL has no trailing slash Check credential association is correct Review Network Configuration Check MID server configuration if applicable Verify proxy settings if required Test from ServiceNow's network diagnostic tools Check Logs Review ServiceNow system logs for detailed error messages Check NetBox logs for incoming connection attempts Look for authentication or authorization errors Application Parameters What are the important Application parameters to know about initially? Critical Parameters for Initial Setup: Parameter Purpose Default Value NetBox Log Level Controls application logging verbosity Medium API user in NetBox Username for ServiceNow\u2192NetBox API calls servicenow_integration API user in ServiceNow Username for NetBox\u2192ServiceNow API calls netbox_integration Import [Object Types] Enable/disable synchronization from NetBox to ServiceNow (import direction) for specific objects false Export [Object Types] Enable/disable synchronization from ServiceNow to NetBox (export direction) for specific objects false Navigation : Go to All > NetBox > Configuration > Parameters to view and modify these settings. What are the Synchronize and Sync direction parameters used for? Synchronize Parameters (Boolean - true/false): - Purpose : Not used Sync Direction Parameters (String values): - Purpose : Not used How can I tell the application to increase the logging level? Steps to Increase Logging: Navigate to Parameters Go to All > NetBox > Configuration > Parameters Find the \"NetBox Log Level\" parameter Available Log Levels (case insensitive): None : No logging Low : Basic operational messages Medium : Moderate detail including warnings (default) High : Detailed debug information Change Log Level Edit the \"NetBox Log Level\" parameter Set value to \"High\" for maximum detail Save the parameter View Logs Check All > NetBox > Maintenance > NetBox Logs for NetBox-related entries What are the NetBox Tenant Group ID parameters used for? Purpose : These parameters map NetBox tenant groups to ServiceNow organizational structures. Key Parameters: - NetBox Tenant Group ID for Customers : Maps NetBox tenants to ServiceNow customer companies - NetBox Tenant Group ID for Departments : Maps NetBox tenants to ServiceNow departments Usage: - Import : Only tenants belonging to specified tenant groups are imported into Companies or Departments tables - Export : ServiceNow records are assigned to these tenant groups in NetBox - Format : Integer value representing the NetBox tenant group ID Configuration : Set these during guided setup or modify in the Parameters table. Why do some parameters have a value of \"Not used\"? Explanation : Parameters with \"Not used\" values are placeholders for future functionality . Examples: - Role ID parameters for specific CI classes (Server, IP Switch, Virtualization Server) - Features planned for future releases but not yet implemented Current Behavior : - These parameters are ignored by the current application logic - \"Role ID - Generic\" is used instead for all device types - No action required from users Future Updates : These parameters will become functional in future application releases. Why not use the sys_properties table instead of a custom table for parameters? Design Rationale: Advantages of Custom Table: - Scoped Isolation : Parameters are contained within the application scope - Enhanced Metadata : Supports detailed descriptions and ordering - Guided Setup Integration : Easier integration with setup wizards - Backup/Restore : Parameters are included in application update sets - Security : Scoped access controls Limitations of sys_properties: - Global scope could cause conflicts - Limited metadata support - More complex guided setup integration - Potential interference with other applications What is the nbk parameter for? Purpose : The nbk parameter is a temporary administrative credential used during the guided setup process. Details: - Temporary Nature : Created during guided setup and automatically deleted afterward - Elevated Privileges : Provides admin-level access to NetBox for configuration - Security : Ensures only low-privilege accounts remain after setup completion - Usage : Enables ServiceNow to configure NetBox settings during initial setup Important : This parameter should not exist after guided setup completion. If it persists, it may indicate an incomplete setup process. If you think the setup has concluded normally, you can and should delete the parameter from the table. Operations Data is not getting synchronized between ServiceNow and NetBox Troubleshooting Steps: Check Synchronization Parameters Verify \"Export [Object]\" parameters are set to true Check that specific records have \"NetBox Synchronize\" field set to true Verify Connection Health Test API connectivity in both directions by navigating to All >`NetBox > Maintenance > Test connections Check credential validity and expiration Review HTTP connection record configuration Review Flow Execution Check All > Process Automation > Flow Designer > Executions Look for failed or stuck flow executions Review error messages in execution logs Increase NetBox Log Level parameter if logs are not verbose enough Check Import Set Processing Navigate to All > System Import Sets > Import Sets Verify import sets are being created and processed Check for transformation errors Check Data Sources Navigate to All > NetBox > Configuration > Data Sources Verify that data sources don't contain more than one attachment Verify that the NetBox Buffer data source is being gradually emptied over time Validate Data Requirements Ensure required fields are populated Check for data validation failures Verify correlation IDs are properly set Data is not getting synchronized between NetBox and ServiceNow Specific NetBox\u2192ServiceNow Issues: Verify Connection Health Test API connectivity in both directions by navigating to All >`NetBox > Maintenance > Test connections Check credential validity and expiration Review HTTP connection record configuration Webhook Configuration Verify NetBox webhooks are properly configured Check webhook URL points to correct ServiceNow instance Confirm webhook authentication credentials NetBox Event Rules Ensure event rules are active in NetBox Verify event rules trigger on appropriate object changes Check event rule conditions and actions ServiceNow Inbound Processing Check All > System Web Services > Inbound > REST Messages Review inbound API call logs Verify authentication is successful Import Processing Check import set creation from NetBox data Review transformation map execution Verify target table updates How do I pause synchronization between systems, one way or another? Temporary Pause Options: Option 1: Disable Synchronization Parameters - Navigate to All > NetBox > Configuration > Parameters - Set \"Import [Object]\" and \"Export [Object]\" parameters to false for affected object types - This stops all synchronization for those objects Option 2: Record-Level Control - Set \"NetBox Synchronize\" field to false on specific records - This provides granular control over individual items Option 3: Connection Disruption (Emergency only) - Modify HTTP connection record to invalid URL - Remove or invalidate API credentials - Warning : This may cause errors in logs Resuming Synchronization: - Reverse the changes made during pause - Verify connection tests pass - Monitor initial synchronization for any issues Best Practice : Use Option 1 (parameter-based) for planned maintenance, as it's the cleanest approach and doesn't generate error messages. I'm getting duplicate records in ServiceNow or NetBox Duplicate records can occur during synchronization due to various factors such as data inconsistencies or identification rule challenges. Mitigation Steps : Review Correlation IDs Check that NetBox Correlation ID fields are properly populated Verify correlation IDs are unique and consistent between systems Manual Cleanup Identify duplicate records Manually merge or delete duplicates as appropriate Document patterns for NetBox Labs support Future Improvements : NetBox Labs is developing enhanced IRE rules and automated deduplication capabilities that will be included in future releases to minimize this issue.","title":"FAQ and Troubleshooting"},{"location":"netbox-integrations/servicenow/snow-faq/#faq-and-troubleshooting","text":"","title":"FAQ and Troubleshooting"},{"location":"netbox-integrations/servicenow/snow-faq/#installation-issues","text":"","title":"Installation Issues"},{"location":"netbox-integrations/servicenow/snow-faq/#update-set-installation-wont-get-past-the-preview-phase","text":"Common Causes: - Missing Dependencies : Ensure all required plugins are installed (IntegrationHub Starter Pack, Model Management, System Import Sets) - Version Incompatibility : Verify the update set version matches your ServiceNow instance version - Insufficient Privileges : Confirm you have admin privileges on the ServiceNow instance - Conflicting Customizations : Local customizations may conflict with the application Resolution Steps: 1. Check the preview log for specific error messages 2. Verify all dependencies are installed and activated 3. Review any conflicts shown in the preview results 4. Contact NetBox Labs support if errors persist","title":"Update set installation won't get past the Preview phase"},{"location":"netbox-integrations/servicenow/snow-faq/#what-can-i-check-to-see-that-installation-went-well","text":"Verification Checklist: 1. Application Menu : Verify \"NetBox\" application appears in the application navigator 2. Tables Created : Check that new tables are present: - x_990381_netbox_cl_netbox_parameters - x_990381_netbox_cl_devices_import_set - x_990381_netbox_cl_device_types_import_set - x_990381_netbox_cl_netbox_sites_import 3. Extended Fields : Verify NetBox fields are added to existing tables: - cmdb_ci.x_990381_netbox_cl_netbox_correlation_id - cmn_location.x_990381_netbox_cl_netbox_synchronize 4. Guided Setup : Access All > NetBox > Configuration > Guided Setup successfully 5. No Critical Errors : Check system logs for any critical errors during installation","title":"What can I check to see that installation went well?"},{"location":"netbox-integrations/servicenow/snow-faq/#what-new-tables-are-included-with-the-application","text":"Import Set Tables: - x_990381_netbox_cl_devices_import_set - NetBox devices staging - x_990381_netbox_cl_device_types_import_set - NetBox device types staging - x_990381_netbox_cl_netbox_sites_import - NetBox sites staging - x_990381_netbox_cl_netbox_regions_import - NetBox regions staging - x_990381_netbox_cl_netbox_clients_import - NetBox tenants/clients staging - x_990381_netbox_cl_netbox_departments_imports - NetBox departments staging - x_990381_netbox_cl_netbox_manufacturers_import - NetBox manufacturers staging Configuration Tables: - x_990381_netbox_cl_netbox_parameters - Application configuration parameters - x_990381_netbox_cl_netbox_notification_queue - NetBox notification queue","title":"What new tables are included with the application?"},{"location":"netbox-integrations/servicenow/snow-faq/#under-which-license-should-i-subscribe-the-new-tables","text":"Licensing Guidance: - Import Set Tables : These are typically covered under the base ServiceNow platform license as they are temporary staging tables - Configuration Tables : These tables would usually be licensed under the ITSM allotment, but can be included wherever some allotments remain - Extended Fields : No additional licensing required as they extend existing licensed tables Recommendation : Consult with your ServiceNow account manager for specific licensing questions, as requirements may vary based on your ServiceNow contract and usage.","title":"Under which license should I subscribe the new tables?"},{"location":"netbox-integrations/servicenow/snow-faq/#guided-setup-issues","text":"","title":"Guided Setup Issues"},{"location":"netbox-integrations/servicenow/snow-faq/#im-missing-some-plugins-and-dont-have-a-license-for-them","text":"Required vs. Recommended Plugins: - Essential Plugins (Required): - IntegrationHub Starter Pack - System Import Sets - Model Management - Recommended Plugins (Optional): - Additional IntegrationHub spokes for enhanced functionality Resolution Options: 1. Contact ServiceNow : Request licensing for required plugins through your ServiceNow account manager 2. PDI Users : Activate plugins through the PDI configuration screen 3. Alternative Approach : Some functionality may be limited without optional plugins, but core integration will still work","title":"I'm missing some plugins and don't have a license for them"},{"location":"netbox-integrations/servicenow/snow-faq/#whats-the-purpose-of-manually-creating-an-https-connection-record","text":"Purpose and Importance: - Application package : This record cannot be packaged with the NetBox CMDB Integration scoped application and must therefore be created manually during the setup process - API Communication : Establishes the connection between ServiceNow and your NetBox instance - Authentication : Stores connection parameters and credential references - MID Server Support : Configures routing through MID servers if required - Standardization : Uses ServiceNow's standard HTTP connection framework for reliability Key Requirements: - Name : Must be exactly \"NetBox API\" (serves as a key for the application) - Connection Alias : Must be x_990381_netbox_cl.NetBox_API - URL Format : Must not include trailing slash","title":"What's the purpose of manually creating an HTTP(s) connection record?"},{"location":"netbox-integrations/servicenow/snow-faq/#both-our-netbox-and-servicenow-instances-are-in-the-cloud-but-we-have-a-mid-server-on-premises-should-i-configure-it-in-step-21-or-22-of-the-guided-setup","text":"Recommendation : Configure in Step 2.1 (Create the HTTP(s) connection record) Reasoning: - If both instances are in the cloud, direct communication is typically possible - MID server configuration should only be used if network policies require it - Step 2.2 is for optional modifications after initial setup Decision Factors: - Network Policies : Check if your organization requires all API traffic to route through the MID server - Security Requirements : Some organizations mandate MID server usage for all external connections - Performance : Direct cloud-to-cloud communication is typically faster Testing Approach : Try without MID server first, then add it in Step 2.2 if connection tests fail.","title":"Both our NetBox and ServiceNow instances are in the cloud but we have a MID server on premises, should I configure it in step 2.1 or 2.2 of the guided setup?"},{"location":"netbox-integrations/servicenow/snow-faq/#the-connection-test-keeps-failing-how-do-i-troubleshoot-connections","text":"Systematic Troubleshooting: Verify Basic Connectivity Check for firewall restrictions between instances Verify DNS resolution of NetBox hostname Check API Token Format Ensure API token is exactly 32 hexadecimal characters Verify token is active in NetBox Test token manually using curl or Postman Validate Connection Record Confirm connection name is exactly \"NetBox API\" Verify URL has no trailing slash Check credential association is correct Review Network Configuration Check MID server configuration if applicable Verify proxy settings if required Test from ServiceNow's network diagnostic tools Check Logs Review ServiceNow system logs for detailed error messages Check NetBox logs for incoming connection attempts Look for authentication or authorization errors","title":"The connection test keeps failing, how do I troubleshoot connections?"},{"location":"netbox-integrations/servicenow/snow-faq/#application-parameters","text":"","title":"Application Parameters"},{"location":"netbox-integrations/servicenow/snow-faq/#what-are-the-important-application-parameters-to-know-about-initially","text":"Critical Parameters for Initial Setup: Parameter Purpose Default Value NetBox Log Level Controls application logging verbosity Medium API user in NetBox Username for ServiceNow\u2192NetBox API calls servicenow_integration API user in ServiceNow Username for NetBox\u2192ServiceNow API calls netbox_integration Import [Object Types] Enable/disable synchronization from NetBox to ServiceNow (import direction) for specific objects false Export [Object Types] Enable/disable synchronization from ServiceNow to NetBox (export direction) for specific objects false Navigation : Go to All > NetBox > Configuration > Parameters to view and modify these settings.","title":"What are the important Application parameters to know about initially?"},{"location":"netbox-integrations/servicenow/snow-faq/#what-are-the-synchronize-and-sync-direction-parameters-used-for","text":"Synchronize Parameters (Boolean - true/false): - Purpose : Not used Sync Direction Parameters (String values): - Purpose : Not used","title":"What are the Synchronize and Sync direction parameters used for?"},{"location":"netbox-integrations/servicenow/snow-faq/#how-can-i-tell-the-application-to-increase-the-logging-level","text":"Steps to Increase Logging: Navigate to Parameters Go to All > NetBox > Configuration > Parameters Find the \"NetBox Log Level\" parameter Available Log Levels (case insensitive): None : No logging Low : Basic operational messages Medium : Moderate detail including warnings (default) High : Detailed debug information Change Log Level Edit the \"NetBox Log Level\" parameter Set value to \"High\" for maximum detail Save the parameter View Logs Check All > NetBox > Maintenance > NetBox Logs for NetBox-related entries","title":"How can I tell the application to increase the logging level?"},{"location":"netbox-integrations/servicenow/snow-faq/#what-are-the-netbox-tenant-group-id-parameters-used-for","text":"Purpose : These parameters map NetBox tenant groups to ServiceNow organizational structures. Key Parameters: - NetBox Tenant Group ID for Customers : Maps NetBox tenants to ServiceNow customer companies - NetBox Tenant Group ID for Departments : Maps NetBox tenants to ServiceNow departments Usage: - Import : Only tenants belonging to specified tenant groups are imported into Companies or Departments tables - Export : ServiceNow records are assigned to these tenant groups in NetBox - Format : Integer value representing the NetBox tenant group ID Configuration : Set these during guided setup or modify in the Parameters table.","title":"What are the NetBox Tenant Group ID parameters used for?"},{"location":"netbox-integrations/servicenow/snow-faq/#why-do-some-parameters-have-a-value-of-not-used","text":"Explanation : Parameters with \"Not used\" values are placeholders for future functionality . Examples: - Role ID parameters for specific CI classes (Server, IP Switch, Virtualization Server) - Features planned for future releases but not yet implemented Current Behavior : - These parameters are ignored by the current application logic - \"Role ID - Generic\" is used instead for all device types - No action required from users Future Updates : These parameters will become functional in future application releases.","title":"Why do some parameters have a value of \"Not used\"?"},{"location":"netbox-integrations/servicenow/snow-faq/#why-not-use-the-sys_properties-table-instead-of-a-custom-table-for-parameters","text":"Design Rationale: Advantages of Custom Table: - Scoped Isolation : Parameters are contained within the application scope - Enhanced Metadata : Supports detailed descriptions and ordering - Guided Setup Integration : Easier integration with setup wizards - Backup/Restore : Parameters are included in application update sets - Security : Scoped access controls Limitations of sys_properties: - Global scope could cause conflicts - Limited metadata support - More complex guided setup integration - Potential interference with other applications","title":"Why not use the sys_properties table instead of a custom table for parameters?"},{"location":"netbox-integrations/servicenow/snow-faq/#what-is-the-nbk-parameter-for","text":"Purpose : The nbk parameter is a temporary administrative credential used during the guided setup process. Details: - Temporary Nature : Created during guided setup and automatically deleted afterward - Elevated Privileges : Provides admin-level access to NetBox for configuration - Security : Ensures only low-privilege accounts remain after setup completion - Usage : Enables ServiceNow to configure NetBox settings during initial setup Important : This parameter should not exist after guided setup completion. If it persists, it may indicate an incomplete setup process. If you think the setup has concluded normally, you can and should delete the parameter from the table.","title":"What is the nbk parameter for?"},{"location":"netbox-integrations/servicenow/snow-faq/#operations","text":"","title":"Operations"},{"location":"netbox-integrations/servicenow/snow-faq/#data-is-not-getting-synchronized-between-servicenow-and-netbox","text":"Troubleshooting Steps: Check Synchronization Parameters Verify \"Export [Object]\" parameters are set to true Check that specific records have \"NetBox Synchronize\" field set to true Verify Connection Health Test API connectivity in both directions by navigating to All >`NetBox > Maintenance > Test connections Check credential validity and expiration Review HTTP connection record configuration Review Flow Execution Check All > Process Automation > Flow Designer > Executions Look for failed or stuck flow executions Review error messages in execution logs Increase NetBox Log Level parameter if logs are not verbose enough Check Import Set Processing Navigate to All > System Import Sets > Import Sets Verify import sets are being created and processed Check for transformation errors Check Data Sources Navigate to All > NetBox > Configuration > Data Sources Verify that data sources don't contain more than one attachment Verify that the NetBox Buffer data source is being gradually emptied over time Validate Data Requirements Ensure required fields are populated Check for data validation failures Verify correlation IDs are properly set","title":"Data is not getting synchronized between ServiceNow and NetBox"},{"location":"netbox-integrations/servicenow/snow-faq/#data-is-not-getting-synchronized-between-netbox-and-servicenow","text":"Specific NetBox\u2192ServiceNow Issues: Verify Connection Health Test API connectivity in both directions by navigating to All >`NetBox > Maintenance > Test connections Check credential validity and expiration Review HTTP connection record configuration Webhook Configuration Verify NetBox webhooks are properly configured Check webhook URL points to correct ServiceNow instance Confirm webhook authentication credentials NetBox Event Rules Ensure event rules are active in NetBox Verify event rules trigger on appropriate object changes Check event rule conditions and actions ServiceNow Inbound Processing Check All > System Web Services > Inbound > REST Messages Review inbound API call logs Verify authentication is successful Import Processing Check import set creation from NetBox data Review transformation map execution Verify target table updates","title":"Data is not getting synchronized between NetBox and ServiceNow"},{"location":"netbox-integrations/servicenow/snow-faq/#how-do-i-pause-synchronization-between-systems-one-way-or-another","text":"Temporary Pause Options: Option 1: Disable Synchronization Parameters - Navigate to All > NetBox > Configuration > Parameters - Set \"Import [Object]\" and \"Export [Object]\" parameters to false for affected object types - This stops all synchronization for those objects Option 2: Record-Level Control - Set \"NetBox Synchronize\" field to false on specific records - This provides granular control over individual items Option 3: Connection Disruption (Emergency only) - Modify HTTP connection record to invalid URL - Remove or invalidate API credentials - Warning : This may cause errors in logs Resuming Synchronization: - Reverse the changes made during pause - Verify connection tests pass - Monitor initial synchronization for any issues Best Practice : Use Option 1 (parameter-based) for planned maintenance, as it's the cleanest approach and doesn't generate error messages.","title":"How do I pause synchronization between systems, one way or another?"},{"location":"netbox-integrations/servicenow/snow-faq/#im-getting-duplicate-records-in-servicenow-or-netbox","text":"Duplicate records can occur during synchronization due to various factors such as data inconsistencies or identification rule challenges. Mitigation Steps : Review Correlation IDs Check that NetBox Correlation ID fields are properly populated Verify correlation IDs are unique and consistent between systems Manual Cleanup Identify duplicate records Manually merge or delete duplicates as appropriate Document patterns for NetBox Labs support Future Improvements : NetBox Labs is developing enhanced IRE rules and automated deduplication capabilities that will be included in future releases to minimize this issue.","title":"I'm getting duplicate records in ServiceNow or NetBox"},{"location":"netbox-integrations/servicenow/snow-installation/","text":"Installation and Setup Before Starting Before you start the installation, ensure the following requirements are met: Administrative Privileges : You must be logged in with admin privileges on both NetBox and ServiceNow instances ServiceNow Version : Washington DC or Xanadu (certified versions) IntegrationHub License : Your ServiceNow instance must be licensed for IntegrationHub Starter Pack for proper integration functionality Uploading and Committing the Application Follow these steps to install the NetBox ServiceNow Integration application in your ServiceNow instance: Navigate to Retrieved Update Sets Go to All > System Update Sets > Retrieved Update Sets Import the Update Set Navigate to the Related Links section at the bottom of the list Click on Import Update Set From XML Select the NetBox CMDB Integration application file and click Upload \u23f1\ufe0f This operation may take several minutes Preview the Update Set Once the file has uploaded, click on the Preview button \u23f1\ufe0f This operation may take several minutes Review and skip any conflicts Commit the Update Set After the preview is complete, click the Commit button \u23f1\ufe0f This operation may take several minutes Handle Any Errors If any errors occur during commit, check the Release Notes to determine which errors can safely be ignored Document any persistent errors for support escalation if needed Configuration Using Guided Setup After successful installation, use the built-in Guided Setup to configure the application: Accessing the Guided Setup Navigate to Guided Setup Go to All > NetBox > Configuration > Guided Setup Review the Pre-checklist and fulfill any outstanding requirements Click Get Started when ready Phase 1: Plugins The guided setup begins with ensuring required plugins are installed: Step 1.1: Install Basic Plugins Install essential plugins required for basic functionality These plugins are mandatory for the integration to work Step 1.2: Install Recommended Plugins Install additional plugins that enhance functionality These plugins are recommended but not strictly required \ud83d\udcdd Note: Plugin installation runs in the background. You don't need to wait for completion before proceeding to the next phase. Phase 2: Post-Installation Setup Complete the following configuration steps: Step 2.1: Create the HTTP(s) Connection Record Configure the primary connection to your NetBox instance: Required Fields: Name : NetBox API \u26a0\ufe0f (case sensitive and must match exactly Connection Alias : x_990381_netbox_cl.NetBox_API Host : Your NetBox instance hostname or IP address Connection URL : https://instanceNameOrIP \u26a0\ufe0f (no trailing slash) MID Server Configuration (NetBox Enterprise Only): Select Use MID if your NetBox instance is only accessible through a MID server Configure MID server parameters as needed Save the Record Save the connection record Mark the step as complete Step 2.2: (Optional) HTTP(s) Connection Setup This step allows you to modify connection parameters if needed later in the setup Return to this step if connection adjustments are required Step 2.3: Create Application Parameters Configure application parameters based on your installation scenario: For New Installations: - When prompted: \"No existing NetBox parameters detected, this looks like a new install. Parameters will be created after pressing Save\" - Press Save to create new parameters with default values For Existing Installations: - The system displays the number of existing parameters - Choose whether to overwrite existing parameters with default values - Missing parameters will be automatically recreated with default values Step 2.4: Setup Temporary Admin Connection to NetBox Establish elevated access for configuration: Purpose and Security Creates temporary elevated privileges on your NetBox instance for automated configuration This temporary channel enables ServiceNow to configure NetBox during setup Important : The channel is automatically removed at the end of setup Only low-privilege accounts remain after completion Configuration Follow on-screen instructions to establish the temporary communication channel Provide temporary admin credentials for your NetBox instance Step 2.5: Setup ServiceNow to NetBox Credentials Create credentials for ServiceNow to access NetBox API: Create API Credentials on NetBox Configure the following fields: Username : Set appropriate username Password : Set secure password API Token : Generate API token Critical API Token Requirements \u26a0\ufe0f MANDATORY : The API Token MUST be a hexadecimal string of exactly 32 characters Example format: a1b2c3d4e5f67890abcdef1234567890 Troubleshooting Connection Issues If errors occur, verify: API Token format (32-character hexadecimal string) HTTP(s) connection record configuration (Step 2.1) Temporary admin credentials (Step 2.4) Step 2.6: Associate Credentials Link credentials to the connection record: Manual Association Required Follow on-screen instructions to manually associate the credentials created in Step 2.5 Link to the HTTP(s) Connection record created in Step 2.1 Remember to save before proceeding to the next step Step 2.7: Setup NetBox to ServiceNow Credentials Create credentials for NetBox to access ServiceNow API: Create ServiceNow API Access Configure the following: Username : Set appropriate username (modifiable) Password : Set secure password (modifiable) API Key : Automatically generated (do not modify) Integration Notes Credentials are stored locally and in your NetBox instance ServiceNow credentials are stored in NetBox webhook headers Troubleshooting If errors occur, verify: HTTP(s) connection record configuration (Step 2.1) Temporary admin credentials (Step 2.4) Step 2.8: Test Connections Validate bidirectional connectivity: Connection Testing Test ServiceNow to NetBox communication Test NetBox to ServiceNow communication Verify API responses and authentication Validation Steps Confirm all connection parameters are correct Validate credential associations Monitor for any errors or warnings Common Installation Issues Issue Possible Cause Solution Update Set Import Fails File corruption or version mismatch Re-download update set from NetBox Labs Plugin Installation Errors Missing dependencies or insufficient permissions Verify ServiceNow admin privileges and dependency requirements Connection Test Fails Network connectivity or firewall issues Check network configuration and firewall rules API Token Rejected Incorrect token format Ensure API token is exactly 32 hexadecimal characters Credential Association Fails Timing or configuration issues Retry association after verifying all previous steps Temporary Admin Channel Failed Invalid NetBox admin credentials Verify NetBox admin credentials and permissions","title":"Installation"},{"location":"netbox-integrations/servicenow/snow-installation/#installation-and-setup","text":"","title":"Installation and Setup"},{"location":"netbox-integrations/servicenow/snow-installation/#before-starting","text":"Before you start the installation, ensure the following requirements are met: Administrative Privileges : You must be logged in with admin privileges on both NetBox and ServiceNow instances ServiceNow Version : Washington DC or Xanadu (certified versions) IntegrationHub License : Your ServiceNow instance must be licensed for IntegrationHub Starter Pack for proper integration functionality","title":"Before Starting"},{"location":"netbox-integrations/servicenow/snow-installation/#uploading-and-committing-the-application","text":"Follow these steps to install the NetBox ServiceNow Integration application in your ServiceNow instance: Navigate to Retrieved Update Sets Go to All > System Update Sets > Retrieved Update Sets Import the Update Set Navigate to the Related Links section at the bottom of the list Click on Import Update Set From XML Select the NetBox CMDB Integration application file and click Upload \u23f1\ufe0f This operation may take several minutes Preview the Update Set Once the file has uploaded, click on the Preview button \u23f1\ufe0f This operation may take several minutes Review and skip any conflicts Commit the Update Set After the preview is complete, click the Commit button \u23f1\ufe0f This operation may take several minutes Handle Any Errors If any errors occur during commit, check the Release Notes to determine which errors can safely be ignored Document any persistent errors for support escalation if needed","title":"Uploading and Committing the Application"},{"location":"netbox-integrations/servicenow/snow-installation/#configuration-using-guided-setup","text":"After successful installation, use the built-in Guided Setup to configure the application:","title":"Configuration Using Guided Setup"},{"location":"netbox-integrations/servicenow/snow-installation/#accessing-the-guided-setup","text":"Navigate to Guided Setup Go to All > NetBox > Configuration > Guided Setup Review the Pre-checklist and fulfill any outstanding requirements Click Get Started when ready","title":"Accessing the Guided Setup"},{"location":"netbox-integrations/servicenow/snow-installation/#phase-1-plugins","text":"The guided setup begins with ensuring required plugins are installed:","title":"Phase 1: Plugins"},{"location":"netbox-integrations/servicenow/snow-installation/#step-11-install-basic-plugins","text":"Install essential plugins required for basic functionality These plugins are mandatory for the integration to work","title":"Step 1.1: Install Basic Plugins"},{"location":"netbox-integrations/servicenow/snow-installation/#step-12-install-recommended-plugins","text":"Install additional plugins that enhance functionality These plugins are recommended but not strictly required \ud83d\udcdd Note: Plugin installation runs in the background. You don't need to wait for completion before proceeding to the next phase.","title":"Step 1.2: Install Recommended Plugins"},{"location":"netbox-integrations/servicenow/snow-installation/#phase-2-post-installation-setup","text":"Complete the following configuration steps:","title":"Phase 2: Post-Installation Setup"},{"location":"netbox-integrations/servicenow/snow-installation/#step-21-create-the-https-connection-record","text":"Configure the primary connection to your NetBox instance: Required Fields: Name : NetBox API \u26a0\ufe0f (case sensitive and must match exactly Connection Alias : x_990381_netbox_cl.NetBox_API Host : Your NetBox instance hostname or IP address Connection URL : https://instanceNameOrIP \u26a0\ufe0f (no trailing slash) MID Server Configuration (NetBox Enterprise Only): Select Use MID if your NetBox instance is only accessible through a MID server Configure MID server parameters as needed Save the Record Save the connection record Mark the step as complete","title":"Step 2.1: Create the HTTP(s) Connection Record"},{"location":"netbox-integrations/servicenow/snow-installation/#step-22-optional-https-connection-setup","text":"This step allows you to modify connection parameters if needed later in the setup Return to this step if connection adjustments are required","title":"Step 2.2: (Optional) HTTP(s) Connection Setup"},{"location":"netbox-integrations/servicenow/snow-installation/#step-23-create-application-parameters","text":"Configure application parameters based on your installation scenario: For New Installations: - When prompted: \"No existing NetBox parameters detected, this looks like a new install. Parameters will be created after pressing Save\" - Press Save to create new parameters with default values For Existing Installations: - The system displays the number of existing parameters - Choose whether to overwrite existing parameters with default values - Missing parameters will be automatically recreated with default values","title":"Step 2.3: Create Application Parameters"},{"location":"netbox-integrations/servicenow/snow-installation/#step-24-setup-temporary-admin-connection-to-netbox","text":"Establish elevated access for configuration: Purpose and Security Creates temporary elevated privileges on your NetBox instance for automated configuration This temporary channel enables ServiceNow to configure NetBox during setup Important : The channel is automatically removed at the end of setup Only low-privilege accounts remain after completion Configuration Follow on-screen instructions to establish the temporary communication channel Provide temporary admin credentials for your NetBox instance","title":"Step 2.4: Setup Temporary Admin Connection to NetBox"},{"location":"netbox-integrations/servicenow/snow-installation/#step-25-setup-servicenow-to-netbox-credentials","text":"Create credentials for ServiceNow to access NetBox API: Create API Credentials on NetBox Configure the following fields: Username : Set appropriate username Password : Set secure password API Token : Generate API token Critical API Token Requirements \u26a0\ufe0f MANDATORY : The API Token MUST be a hexadecimal string of exactly 32 characters Example format: a1b2c3d4e5f67890abcdef1234567890 Troubleshooting Connection Issues If errors occur, verify: API Token format (32-character hexadecimal string) HTTP(s) connection record configuration (Step 2.1) Temporary admin credentials (Step 2.4)","title":"Step 2.5: Setup ServiceNow to NetBox Credentials"},{"location":"netbox-integrations/servicenow/snow-installation/#step-26-associate-credentials","text":"Link credentials to the connection record: Manual Association Required Follow on-screen instructions to manually associate the credentials created in Step 2.5 Link to the HTTP(s) Connection record created in Step 2.1 Remember to save before proceeding to the next step","title":"Step 2.6: Associate Credentials"},{"location":"netbox-integrations/servicenow/snow-installation/#step-27-setup-netbox-to-servicenow-credentials","text":"Create credentials for NetBox to access ServiceNow API: Create ServiceNow API Access Configure the following: Username : Set appropriate username (modifiable) Password : Set secure password (modifiable) API Key : Automatically generated (do not modify) Integration Notes Credentials are stored locally and in your NetBox instance ServiceNow credentials are stored in NetBox webhook headers Troubleshooting If errors occur, verify: HTTP(s) connection record configuration (Step 2.1) Temporary admin credentials (Step 2.4)","title":"Step 2.7: Setup NetBox to ServiceNow Credentials"},{"location":"netbox-integrations/servicenow/snow-installation/#step-28-test-connections","text":"Validate bidirectional connectivity: Connection Testing Test ServiceNow to NetBox communication Test NetBox to ServiceNow communication Verify API responses and authentication Validation Steps Confirm all connection parameters are correct Validate credential associations Monitor for any errors or warnings","title":"Step 2.8: Test Connections"},{"location":"netbox-integrations/servicenow/snow-installation/#common-installation-issues","text":"Issue Possible Cause Solution Update Set Import Fails File corruption or version mismatch Re-download update set from NetBox Labs Plugin Installation Errors Missing dependencies or insufficient permissions Verify ServiceNow admin privileges and dependency requirements Connection Test Fails Network connectivity or firewall issues Check network configuration and firewall rules API Token Rejected Incorrect token format Ensure API token is exactly 32 hexadecimal characters Credential Association Fails Timing or configuration issues Retry association after verifying all previous steps Temporary Admin Channel Failed Invalid NetBox admin credentials Verify NetBox admin credentials and permissions","title":"Common Installation Issues"},{"location":"netbox-integrations/servicenow/snow-technical-info/","text":"Technical Information New Tables in ServiceNow The NetBox CMDB Integration application creates several new tables in ServiceNow for staging imported data from NetBox: Import Set Tables Table Name Purpose Key Fields x_990381_netbox_cl_devices_import_set Staging table for NetBox devices Device name, serial, asset tag, device type, site, location, status x_990381_netbox_cl_device_types_import_set Staging table for NetBox device types Model, manufacturer, height, weight, specifications x_990381_netbox_cl_netbox_sites_import Staging table for NetBox sites Site name, description, physical address, contact information x_990381_netbox_cl_netbox_regions_import Staging table for NetBox regions Region name, description, hierarchy x_990381_netbox_cl_netbox_clients_import Staging table for NetBox tenants/clients Client name, description, contact details x_990381_netbox_cl_netbox_departments_imports Staging table for NetBox departments Department information and organizational structure x_990381_netbox_cl_netbox_manufacturers_import Staging table for NetBox manufacturers Manufacturer name, description, contact information x_990381_netbox_cl_netbox_notification_queue Queue for NetBox notifications Notification type, status, payload x_990381_netbox_cl_netbox_parameters Configuration parameters Parameter name, value, description Extended ServiceNow Tables The application extends existing ServiceNow tables with NetBox-specific fields: Configuration Item (cmdb_ci) Field Name Type Purpose x_990381_netbox_cl_netbox_correlation_id String Unique identifier linking ServiceNow CI to NetBox object x_990381_netbox_cl_netbox_synchronize Boolean Flag indicating if CI should be synchronized with NetBox Location (cmn_location) Field Name Type Purpose x_990381_netbox_cl_netbox_correlation_id String Unique identifier linking ServiceNow location to NetBox location x_990381_netbox_cl_netbox_synchronize Boolean Flag indicating if location should be synchronized with NetBox x_990381_netbox_cl_level Integer Hierarchical level in NetBox location structure Hardware Product Model (cmdb_hardware_product_model) Field Name Type Purpose x_990381_netbox_cl_netbox_correlation_id String Links ServiceNow model to NetBox device type x_990381_netbox_cl_netbox_synchronize Boolean Flag indicating if location should be synchronized with NetBox Department (cmn_department) Field Name Type Purpose x_990381_netbox_cl_netbox_correlation_id String Links ServiceNow department to NetBox tenant x_990381_netbox_cl_netbox_synchronize Boolean Flag indicating if location should be synchronized with NetBox Company (core_company) Field Name Type Purpose x_990381_netbox_cl_netbox_correlation_id String Links ServiceNow company to NetBox organization x_990381_netbox_cl_netbox_synchronize Boolean Flag indicating if location should be synchronized with NetBox Data Synchronization Flow Import Phase : NetBox data is retrieved via API and staged in import set tables Transform Phase : Import set processors transform and validate data according to mapping rules Load Phase : Transformed data is inserted/updated in target ServiceNow tables Correlation Phase : NetBox correlation IDs are maintained for bidirectional synchronization Export Phase : ServiceNow changes are propagated back to NetBox when synchronization is enabled","title":"Technical Info"},{"location":"netbox-integrations/servicenow/snow-technical-info/#technical-information","text":"","title":"Technical Information"},{"location":"netbox-integrations/servicenow/snow-technical-info/#new-tables-in-servicenow","text":"The NetBox CMDB Integration application creates several new tables in ServiceNow for staging imported data from NetBox:","title":"New Tables in ServiceNow"},{"location":"netbox-integrations/servicenow/snow-technical-info/#import-set-tables","text":"Table Name Purpose Key Fields x_990381_netbox_cl_devices_import_set Staging table for NetBox devices Device name, serial, asset tag, device type, site, location, status x_990381_netbox_cl_device_types_import_set Staging table for NetBox device types Model, manufacturer, height, weight, specifications x_990381_netbox_cl_netbox_sites_import Staging table for NetBox sites Site name, description, physical address, contact information x_990381_netbox_cl_netbox_regions_import Staging table for NetBox regions Region name, description, hierarchy x_990381_netbox_cl_netbox_clients_import Staging table for NetBox tenants/clients Client name, description, contact details x_990381_netbox_cl_netbox_departments_imports Staging table for NetBox departments Department information and organizational structure x_990381_netbox_cl_netbox_manufacturers_import Staging table for NetBox manufacturers Manufacturer name, description, contact information x_990381_netbox_cl_netbox_notification_queue Queue for NetBox notifications Notification type, status, payload x_990381_netbox_cl_netbox_parameters Configuration parameters Parameter name, value, description","title":"Import Set Tables"},{"location":"netbox-integrations/servicenow/snow-technical-info/#extended-servicenow-tables","text":"The application extends existing ServiceNow tables with NetBox-specific fields:","title":"Extended ServiceNow Tables"},{"location":"netbox-integrations/servicenow/snow-technical-info/#configuration-item-cmdb_ci","text":"Field Name Type Purpose x_990381_netbox_cl_netbox_correlation_id String Unique identifier linking ServiceNow CI to NetBox object x_990381_netbox_cl_netbox_synchronize Boolean Flag indicating if CI should be synchronized with NetBox","title":"Configuration Item (cmdb_ci)"},{"location":"netbox-integrations/servicenow/snow-technical-info/#location-cmn_location","text":"Field Name Type Purpose x_990381_netbox_cl_netbox_correlation_id String Unique identifier linking ServiceNow location to NetBox location x_990381_netbox_cl_netbox_synchronize Boolean Flag indicating if location should be synchronized with NetBox x_990381_netbox_cl_level Integer Hierarchical level in NetBox location structure","title":"Location (cmn_location)"},{"location":"netbox-integrations/servicenow/snow-technical-info/#hardware-product-model-cmdb_hardware_product_model","text":"Field Name Type Purpose x_990381_netbox_cl_netbox_correlation_id String Links ServiceNow model to NetBox device type x_990381_netbox_cl_netbox_synchronize Boolean Flag indicating if location should be synchronized with NetBox","title":"Hardware Product Model (cmdb_hardware_product_model)"},{"location":"netbox-integrations/servicenow/snow-technical-info/#department-cmn_department","text":"Field Name Type Purpose x_990381_netbox_cl_netbox_correlation_id String Links ServiceNow department to NetBox tenant x_990381_netbox_cl_netbox_synchronize Boolean Flag indicating if location should be synchronized with NetBox","title":"Department (cmn_department)"},{"location":"netbox-integrations/servicenow/snow-technical-info/#company-core_company","text":"Field Name Type Purpose x_990381_netbox_cl_netbox_correlation_id String Links ServiceNow company to NetBox organization x_990381_netbox_cl_netbox_synchronize Boolean Flag indicating if location should be synchronized with NetBox","title":"Company (core_company)"},{"location":"netbox-integrations/servicenow/snow-technical-info/#data-synchronization-flow","text":"Import Phase : NetBox data is retrieved via API and staged in import set tables Transform Phase : Import set processors transform and validate data according to mapping rules Load Phase : Transformed data is inserted/updated in target ServiceNow tables Correlation Phase : NetBox correlation IDs are maintained for bidirectional synchronization Export Phase : ServiceNow changes are propagated back to NetBox when synchronization is enabled","title":"Data Synchronization Flow"},{"location":"netbox-integrations/servicenow/snow-upgrading/","text":"Upgrades and Bug Fixes Distribution and Installation Upgrades, patches, and hotfixes for the NetBox CMDB Integration application are distributed through XML update sets, which can be obtained from NetBox Labs support. Critical: Review Update Status After committing any update set, it is essential to review the update status for potential skipped records: Access Update Status Navigate to All > Upgrade Center > Upgrade History Click on the related list link in colomn \"Skipped\" Identify Skipped Records Skipped records indicate potential conflicts or issues Common causes include: Local customizations conflicting with updates Missing dependencies Permission restrictions Data validation failures Resolution Actions Review each skipped record individually Determine if manual intervention is required Consult with your system administrator if needed Document any unresolved skips for support escalation ServiceNow Documentation For detailed guidance on handling skipped records, refer to the official ServiceNow documentation. Update Types and Considerations Major Version Upgrades Planning Required : May include significant changes to data model or functionality Testing Recommended : Test in development environment before production deployment Backup Advised : Create system backup before applying major updates Documentation Review : Review release notes for breaking changes or new requirements Patches and Minor Updates Focused Changes : Target specific issues or improvements Lower Risk : Generally safer to apply directly to production Cumulative : May include fixes from previous patches Quick Deployment : Usually faster to install and commit Hotfixes Urgent Nature : Address critical issues requiring immediate attention Emergency Process : May bypass standard testing procedures Limited Scope : Focus on specific critical problems Rapid Deployment : Prioritized for quick resolution Best Practices for Updates Pre-Update Preparation Environment Assessment Document current application version Note any local customizations Review system compatibility Backup Strategy Create update set backup of current configuration Document critical business processes Ensure rollback plan is available Testing Protocol Test updates in development environment when possible Validate core functionality after update Verify integration points remain functional During Update Process Monitoring Monitor system performance during installation Watch for error messages or warnings Document any unexpected behavior Communication Notify relevant stakeholders of update schedule Coordinate with business users for testing Maintain communication with NetBox Labs support if needed Post-Update Validation Functional Testing Test core synchronization processes Verify API connectivity remains stable Validate data integrity between systems Performance Monitoring Monitor system performance for any degradation Check integration hub flow execution Review system logs for new errors or warnings User Acceptance Coordinate with business users for validation Gather feedback on any functional changes Address any user-reported issues promptly Troubleshooting Update Issues Issue Possible Cause Resolution Update Set Import Fails File corruption or incompatible version Re-download from NetBox Labs Preview Shows Conflicts Local customizations conflict with updates Review conflicts and resolve manually Commit Fails Dependency issues or permission problems Check dependencies and admin privileges Records Skipped Data validation or conflict issues Review skipped records per ServiceNow documentation Post-Update Errors Configuration mismatches Verify configuration and consult support Performance Degradation Resource conflicts or inefficient changes Monitor system resources and contact support","title":"Upgrading"},{"location":"netbox-integrations/servicenow/snow-upgrading/#upgrades-and-bug-fixes","text":"","title":"Upgrades and Bug Fixes"},{"location":"netbox-integrations/servicenow/snow-upgrading/#distribution-and-installation","text":"Upgrades, patches, and hotfixes for the NetBox CMDB Integration application are distributed through XML update sets, which can be obtained from NetBox Labs support.","title":"Distribution and Installation"},{"location":"netbox-integrations/servicenow/snow-upgrading/#critical-review-update-status","text":"After committing any update set, it is essential to review the update status for potential skipped records: Access Update Status Navigate to All > Upgrade Center > Upgrade History Click on the related list link in colomn \"Skipped\" Identify Skipped Records Skipped records indicate potential conflicts or issues Common causes include: Local customizations conflicting with updates Missing dependencies Permission restrictions Data validation failures Resolution Actions Review each skipped record individually Determine if manual intervention is required Consult with your system administrator if needed Document any unresolved skips for support escalation ServiceNow Documentation For detailed guidance on handling skipped records, refer to the official ServiceNow documentation.","title":"Critical: Review Update Status"},{"location":"netbox-integrations/servicenow/snow-upgrading/#update-types-and-considerations","text":"","title":"Update Types and Considerations"},{"location":"netbox-integrations/servicenow/snow-upgrading/#major-version-upgrades","text":"Planning Required : May include significant changes to data model or functionality Testing Recommended : Test in development environment before production deployment Backup Advised : Create system backup before applying major updates Documentation Review : Review release notes for breaking changes or new requirements","title":"Major Version Upgrades"},{"location":"netbox-integrations/servicenow/snow-upgrading/#patches-and-minor-updates","text":"Focused Changes : Target specific issues or improvements Lower Risk : Generally safer to apply directly to production Cumulative : May include fixes from previous patches Quick Deployment : Usually faster to install and commit","title":"Patches and Minor Updates"},{"location":"netbox-integrations/servicenow/snow-upgrading/#hotfixes","text":"Urgent Nature : Address critical issues requiring immediate attention Emergency Process : May bypass standard testing procedures Limited Scope : Focus on specific critical problems Rapid Deployment : Prioritized for quick resolution","title":"Hotfixes"},{"location":"netbox-integrations/servicenow/snow-upgrading/#best-practices-for-updates","text":"","title":"Best Practices for Updates"},{"location":"netbox-integrations/servicenow/snow-upgrading/#pre-update-preparation","text":"Environment Assessment Document current application version Note any local customizations Review system compatibility Backup Strategy Create update set backup of current configuration Document critical business processes Ensure rollback plan is available Testing Protocol Test updates in development environment when possible Validate core functionality after update Verify integration points remain functional","title":"Pre-Update Preparation"},{"location":"netbox-integrations/servicenow/snow-upgrading/#during-update-process","text":"Monitoring Monitor system performance during installation Watch for error messages or warnings Document any unexpected behavior Communication Notify relevant stakeholders of update schedule Coordinate with business users for testing Maintain communication with NetBox Labs support if needed","title":"During Update Process"},{"location":"netbox-integrations/servicenow/snow-upgrading/#post-update-validation","text":"Functional Testing Test core synchronization processes Verify API connectivity remains stable Validate data integrity between systems Performance Monitoring Monitor system performance for any degradation Check integration hub flow execution Review system logs for new errors or warnings User Acceptance Coordinate with business users for validation Gather feedback on any functional changes Address any user-reported issues promptly","title":"Post-Update Validation"},{"location":"netbox-integrations/servicenow/snow-upgrading/#troubleshooting-update-issues","text":"Issue Possible Cause Resolution Update Set Import Fails File corruption or incompatible version Re-download from NetBox Labs Preview Shows Conflicts Local customizations conflict with updates Review conflicts and resolve manually Commit Fails Dependency issues or permission problems Check dependencies and admin privileges Records Skipped Data validation or conflict issues Review skipped records per ServiceNow documentation Post-Update Errors Configuration mismatches Verify configuration and consult support Performance Degradation Resource conflicts or inefficient changes Monitor system resources and contact support","title":"Troubleshooting Update Issues"},{"location":"sdks/pynetbox/","text":"NetBox SDKs Documentation Location NetBox SDK documentation has moved! For the most current and authoritative NetBox SDK documentation, please visit: NetBox SDKs Documentation \u2192 About NetBox SDKs NetBox SDKs provide programmatic access to NetBox through various programming languages. These libraries simplify integration with NetBox's REST API and enable automation of network infrastructure management tasks. Available SDKs pynetbox - Python API client library netbox-python - Alternative lightweight Python wrapper go-netbox - Go client library netbox-client-ruby - Ruby client library Key Features Full API Coverage : Complete access to NetBox's REST API endpoints Authentication Support : Token-based authentication for secure access Query Methods : Comprehensive filtering, searching, and pagination support CRUD Operations : Create, read, update, and delete NetBox objects Threading Support : Multi-threaded operations for improved performance Type Safety : Strongly typed interfaces where applicable Getting Started To get started with NetBox SDKs, including installation instructions, authentication setup, and usage examples, please visit the official documentation: \u2192 Visit NetBox SDKs Documentation Quick Links Installation Guides Authentication Setup Usage Examples API Reference Best Practices Popular Use Cases Infrastructure Automation : Automate device provisioning and configuration management Data Migration : Bulk import/export of network infrastructure data Reporting & Analytics : Generate custom reports and dashboards Integration : Connect NetBox with other network management tools CI/CD Pipelines : Integrate network documentation into deployment workflows Why the redirect? NetBox SDK documentation is maintained in its own dedicated repository to ensure you always have access to the most up-to-date information, including the latest features, compatibility updates, and best practices for each supported programming language.","title":"Pynetbox"},{"location":"sdks/pynetbox/#netbox-sdks","text":"Documentation Location NetBox SDK documentation has moved! For the most current and authoritative NetBox SDK documentation, please visit: NetBox SDKs Documentation \u2192","title":"NetBox SDKs"},{"location":"sdks/pynetbox/#about-netbox-sdks","text":"NetBox SDKs provide programmatic access to NetBox through various programming languages. These libraries simplify integration with NetBox's REST API and enable automation of network infrastructure management tasks.","title":"About NetBox SDKs"},{"location":"sdks/pynetbox/#available-sdks","text":"pynetbox - Python API client library netbox-python - Alternative lightweight Python wrapper go-netbox - Go client library netbox-client-ruby - Ruby client library","title":"Available SDKs"},{"location":"sdks/pynetbox/#key-features","text":"Full API Coverage : Complete access to NetBox's REST API endpoints Authentication Support : Token-based authentication for secure access Query Methods : Comprehensive filtering, searching, and pagination support CRUD Operations : Create, read, update, and delete NetBox objects Threading Support : Multi-threaded operations for improved performance Type Safety : Strongly typed interfaces where applicable","title":"Key Features"},{"location":"sdks/pynetbox/#getting-started","text":"To get started with NetBox SDKs, including installation instructions, authentication setup, and usage examples, please visit the official documentation: \u2192 Visit NetBox SDKs Documentation","title":"Getting Started"},{"location":"sdks/pynetbox/#quick-links","text":"Installation Guides Authentication Setup Usage Examples API Reference Best Practices","title":"Quick Links"},{"location":"sdks/pynetbox/#popular-use-cases","text":"Infrastructure Automation : Automate device provisioning and configuration management Data Migration : Bulk import/export of network infrastructure data Reporting & Analytics : Generate custom reports and dashboards Integration : Connect NetBox with other network management tools CI/CD Pipelines : Integrate network documentation into deployment workflows Why the redirect? NetBox SDK documentation is maintained in its own dedicated repository to ensure you always have access to the most up-to-date information, including the latest features, compatibility updates, and best practices for each supported programming language.","title":"Popular Use Cases"}]}